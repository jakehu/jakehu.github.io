<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>夜莺黑盒监控 (categraf http_response)</title>
      <link href="/2024/categrahg-httpresponse-19edtc/"/>
      <url>/2024/categrahg-httpresponse-19edtc/</url>
      
        <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://download.flashcat.cloud/categraf-v0.3.77-linux-amd64.tar.gz</span><br><span class="line">tar -zxvf categraf-v0.3.77-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">mkdir</span> -pv /opt/categraf</span><br><span class="line"><span class="built_in">cp</span> -r ./categraf-v0.3.77-linux-amd64/* /opt/categraf/</span><br></pre></td></tr></tbody></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>N9E: 这里是配置像哪个 VM 推送数据 <a href="https://flashcat.cloud/docs/content/flashcat-monitor/nightingale-v6/faq/pushgw-writers/">参考</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[Pushgw.Writers]]</span><br><span class="line"><span class="comment"># Url = "http://127.0.0.1:8480/insert/0/prometheus/api/v1/write"</span></span><br><span class="line">Url = <span class="string">"http://10.168.140.45:8428/api/v1/write"</span></span><br></pre></td></tr></tbody></table></figure><p>categraf:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[writers]]</span><br><span class="line">url = <span class="string">"http://10.168.137.144:17000/prometheus/v1/write"</span></span><br><span class="line"></span><br><span class="line">[heartbeat]</span><br><span class="line"><span class="built_in">enable</span> = <span class="literal">true</span></span><br><span class="line">url = <span class="string">"http://10.168.137.144:17000/v1/n9e/heartbeat"</span></span><br></pre></td></tr></tbody></table></figure><p>inputs:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[instances]]</span><br><span class="line">targets = [</span><br><span class="line"><span class="string">"http://10.113.75.134:5000/v1/datasets/8a9302de-ded1-493c-8a12-e8acf3d80772/files?apikey=ka-admin123"</span></span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>linux systemd 托管不太好控制单个模块采集</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ./categraf --inputs http_response &amp;</span><br><span class="line">pkill categraf</span><br></pre></td></tr></tbody></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./categraf --<span class="built_in">test</span> --inputs http_response</span><br><span class="line">./categraf --inputs http_response</span><br><span class="line"></span><br><span class="line">pkill n9e</span><br><span class="line"><span class="built_in">nohup</span> ./n9e &amp;&gt; n9e.log &amp;</span><br></pre></td></tr></tbody></table></figure><p>参考：</p><p><a href="https://flashcat.cloud/docs/content/flashcat-monitor/categraf/2-installation/">https://flashcat.cloud/docs/content/flashcat-monitor/categraf/2-installation/</a></p><p>‍</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>No route to host</title>
      <link href="/2024/no-route-to-host-1fthpi/"/>
      <url>/2024/no-route-to-host-1fthpi/</url>
      
        <content type="html"><![CDATA[<h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No route to host</span><br></pre></td></tr></tbody></table></figure><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>目标服务器防火墙导致</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置 Dockerfile 让容器支持中文</title>
      <link href="/2024/configure-dockerfile-to-let-the-container-support-chinese-1iqwgv/"/>
      <url>/2024/configure-dockerfile-to-let-the-container-support-chinese-1iqwgv/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RUN yum install -y kde-l10n-Chinese &amp;&amp; \</span><br><span class="line">    yum install -y glibc-common &amp;&amp; \</span><br><span class="line">    localedef -c -f UTF-8 -i zh_CN zh_CN.utf8</span><br><span class="line"></span><br><span class="line"><span class="comment"># ENV LANG zh_CN.UTF-8</span></span><br><span class="line">ENV LC_ALL zh_CN.UTF-8</span><br></pre></td></tr></tbody></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac 刷新 Dns</title>
      <link href="/2024/mac-refresh-dns-z1i6di6/"/>
      <url>/2024/mac-refresh-dns-z1i6di6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder</span><br></pre></td></tr></tbody></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记 Python 之 Orm Peewee 部分使用方法</title>
      <link href="/2023/python-peewee/"/>
      <url>/2023/python-peewee/</url>
      
        <content type="html"><![CDATA[<h4 id="函数TIMESTAMPDIFF"><a href="#函数TIMESTAMPDIFF" class="headerlink" title="函数TIMESTAMPDIFF"></a>函数 TIMESTAMPDIFF</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> peewee <span class="keyword">import</span> SQL, fn</span><br><span class="line"></span><br><span class="line">Task.select().where(</span><br><span class="line">    (Task.recent_sync_time.is_null(<span class="literal">True</span>))</span><br><span class="line">    | (fn.TIMESTAMPDIFF(SQL(<span class="string">"MINUTE"</span>), Task.recent_sync_time, fn.NOW()) &gt; Task.interval)</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>注意这里的 <code>MINUTE</code> 必须使用 <code>SQL</code> 函数格式化，如：<code>SQL("MINUTE")</code></p><p><a href="https://pythonhosted.org/pyfact/_modules/fact/factdb/utils.html">参考</a></p><h4 id="JSONField"><a href="#JSONField" class="headerlink" title="JSONField"></a>JSONField</h4><p><code>Peewee</code> 中本来是没有 <code>JSONField</code> 这个数据类型的，我们可以利用官方的扩展包</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playhouse.mysql_ext <span class="keyword">import</span> JSONField</span><br></pre></td></tr></tbody></table></figure><p>也可以通过<code>自定义类型</code>或者 <code>jsonfield</code> 这个三方包完成</p><p><a href="https://stackoverflow.com/questions/40553790/peewee-orm-jsonfield-for-mysql">参考</a></p><h4 id="Model-To-Dict"><a href="#Model-To-Dict" class="headerlink" title="Model To Dict"></a>Model To Dict</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playhouse.shortcuts <span class="keyword">import</span> model_to_dict</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data_list</span>(<span class="params">info_id</span>):</span><br><span class="line">    datas = Data.select().where(Data.info_id == info_id)</span><br><span class="line">    datas = [model_to_dict(data) <span class="keyword">for</span> data <span class="keyword">in</span> datas]</span><br><span class="line">    <span class="keyword">return</span> datas</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="json-extract"><a href="#json-extract" class="headerlink" title="json_extract"></a>json_extract</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Data.delete().where(</span><br><span class="line">    Data.info_id == info_id,</span><br><span class="line">    fn.json_extract(Data.data, <span class="string">"$."</span> + field) == value,</span><br><span class="line">).execute()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> peewee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 下终端中使用 Http 代理</title>
      <link href="/2023/mac-http-proxy/"/>
      <url>/2023/mac-http-proxy/</url>
      
        <content type="html"><![CDATA[<h4 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h4><p>想在 <code>Mac</code> 中优雅的开启和关闭 <code>http_proxy</code></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>在 <code>~/.zshrc</code> 中加入以下函数</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># on proxy</span></span><br><span class="line">func <span class="function"><span class="title">onproxy</span></span> () {</span><br><span class="line">  <span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:1080"</span></span><br><span class="line">  <span class="built_in">export</span> https_proxy=<span class="string">"http://127.0.0.1:1080"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Proxy ON"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># off proxy</span></span><br><span class="line">func <span class="function"><span class="title">offproxy</span></span> () {</span><br><span class="line">  <span class="built_in">unset</span> http_proxy</span><br><span class="line">  <span class="built_in">unset</span> https_proxy</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Proxy OFF"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; onproxy</span><br><span class="line">Proxy ON</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs 包优雅的升级</title>
      <link href="/2023/npm-check-updates/"/>
      <url>/2023/npm-check-updates/</url>
      
        <content type="html"><![CDATA[<h4 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h4><p>最近在升级 <code>hexo</code> 各种包的版本，对于升级推荐使用 <code>npm-check-updates</code>，这个包可以做所有 <code>npm oudated</code> 和 <code>npm upgrade</code> 能做的事情</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-check-updates</span><br></pre></td></tr></tbody></table></figure><h4 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h4><p>利用 <code>ncu</code> 检查包的版本，输出如下:</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; ncu</span><br><span class="line">Checking /hexo/package.json</span><br><span class="line">[====================] 16/16 100%</span><br><span class="line"></span><br><span class="line"> hexo                      ^5.4.2  →   ^6.3.0</span><br><span class="line"> hexo-deployer-git         ^2.1.0  →   ^4.0.0</span><br><span class="line"> hexo-generator-archive    ^1.0.0  →   ^2.0.0</span><br><span class="line"> hexo-generator-category   ^1.0.0  →   ^2.0.0</span><br><span class="line"> hexo-generator-index      ^2.0.0  →   ^3.0.0</span><br><span class="line"> hexo-generator-sitemap    ^2.2.0  →   ^3.0.1</span><br><span class="line"> hexo-generator-tag        ^1.0.0  →   ^2.0.0</span><br><span class="line"> hexo-pangu                ^0.2.1  →   ^0.2.2</span><br><span class="line"> hexo-renderer-ejs         ^1.0.0  →   ^2.0.0</span><br><span class="line"> hexo-renderer-marked      ^3.3.0  →   ^6.0.0</span><br><span class="line"> hexo-server               ^2.0.0  →   ^3.0.0</span><br><span class="line"> hexo-theme-next          ^8.12.1  →  ^8.15.0</span><br><span class="line"> hexo-word-counter          0.0.3  →    0.1.0</span><br><span class="line"></span><br><span class="line">Run ncu -u to upgrade package.json</span><br></pre></td></tr></tbody></table></figure><h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><blockquote><p>upgrade package.json</p></blockquote><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncu -u</span><br></pre></td></tr></tbody></table></figure><blockquote><p>install new versions</p></blockquote><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群晖 Synocommunity 无效的位置</title>
      <link href="/2023/Synology-Packages-Error/"/>
      <url>/2023/Synology-Packages-Error/</url>
      
        <content type="html"><![CDATA[<p>添加的 <code>synocommunity</code> 本来是没有问题的，最近发现没法显示相关组件，从新添加提示<code>无效的位置</code></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt.bak &amp;&amp; <span class="built_in">sudo</span> curl -Lko /etc/ssl/certs/ca-certificates.crt https://curl.se/ca/cacert.pem</span><br></pre></td></tr></tbody></table></figure><p>参考：<a href="https://github.com/SynoCommunity/spksrc/issues/4897">can’t add community repo - “invalid location” error - problem solved</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Caddy error listen tcp 127.0.0.1:2019: bind: cannot assign</title>
      <link href="/2023/caddy-error/"/>
      <url>/2023/caddy-error/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>最近在使用 <code>Caddy</code> 的时候出现如下错误</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Jan 05 02:16:47 C20230104172971 caddy[3271]: HOME=/root</span><br><span class="line">Jan 05 02:16:47 C20230104172971 caddy[3271]: LOGNAME=root</span><br><span class="line">Jan 05 02:16:47 C20230104172971 caddy[3271]: USER=root</span><br><span class="line">Jan 05 02:16:47 C20230104172971 caddy[3271]: SHELL=/bin/sh</span><br><span class="line">Jan 05 02:16:47 C20230104172971 caddy[3271]: INVOCATION_ID=91c06f7e038e4ed2a5e12d9d975650b1</span><br><span class="line">Jan 05 02:16:47 C20230104172971 caddy[3271]: JOURNAL_STREAM=8:26524</span><br><span class="line">Jan 05 02:16:47 C20230104172971 caddy[3271]: {"level":"info","ts":1672885007.9022179,"msg":"using provided configuration","config_file":"/etc/caddy/Caddyfile","config_adapter":""}</span><br><span class="line">Jan 05 02:16:47 C20230104172971 caddy[3271]: run: loading initial config: loading new config: starting caddy administration endpoint: listen tcp 127.0.0.1:2019: bind: cannot assign&gt;</span><br><span class="line">Jan 05 02:16:47 C20230104172971 systemd[1]: caddy.service: Main process exited, code=exited, status=1/FAILURE</span><br><span class="line">Jan 05 02:16:47 C20230104172971 systemd[1]: caddy.service: Failed with result 'exit-code'.</span><br></pre></td></tr></tbody></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在 <code>Caddyfile</code> 开头增加下面配置即可</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  admin 0.0.0.0:2019</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> caddy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用更改 Hosts 文件恢复 Google Translate</title>
      <link href="/2022/google-translate/"/>
      <url>/2022/google-translate/</url>
      
        <content type="html"><![CDATA[<h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>首先找到 <code>google.cn</code> 在大陆可用的 <code>IP</code>，可以利用下面 <code>chinaz</code></p><p><a href="https://ping.chinaz.com/google.cn">https://ping.chinaz.com/google.cn</a></p><p>尽量找延迟低一点的 <code>IP</code></p><h3 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h3><p>修改 <code>Host</code>，<code>Windows</code> 如：<code>C:\Windows\System32\drivers\etc\hosts</code></p><p>将下面记录加入到 <code>hosts</code> 文件</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">180.163.151.162 translate.googleapis.com</span><br></pre></td></tr></tbody></table></figure><p><a href="https://hcfy.app/blog/2022/09/28/ggg">参考</a></p><hr><p>题外话：<code>Chrome</code> 翻译插件可以用<code>火山翻译</code>，字节出品还比较好用</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言中生成密码</title>
      <link href="/2022/go-password/"/>
      <url>/2022/go-password/</url>
      
        <content type="html"><![CDATA[<p><code>Go</code> 语言中生成特定长度和特定组合的密码</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">NUmStr  = <span class="string">"0123456789"</span></span><br><span class="line">CharStr = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">SpecStr = <span class="string">"!@#$%&amp;"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GeneratePasswd</span><span class="params">(length <span class="type">int</span>, charset <span class="type">string</span>)</span></span> <span class="type">string</span> {</span><br><span class="line"><span class="keyword">var</span> passwd []<span class="type">byte</span> = <span class="built_in">make</span>([]<span class="type">byte</span>, length, length)</span><br><span class="line"><span class="keyword">var</span> sourceStr <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> charset == <span class="string">"num"</span> { <span class="comment">// 数字</span></span><br><span class="line">sourceStr = NUmStr</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> charset == <span class="string">"char"</span> { <span class="comment">// 字母</span></span><br><span class="line">sourceStr = charset</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> charset == <span class="string">"mix"</span> { <span class="comment">// 数字、字母混合模式</span></span><br><span class="line">sourceStr = fmt.Sprintf(<span class="string">"%s%s"</span>, NUmStr, CharStr)</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> charset == <span class="string">"advance"</span> { <span class="comment">// 数字、字母、字符混合模式</span></span><br><span class="line">sourceStr = fmt.Sprintf(<span class="string">"%s%s%s"</span>, NUmStr, CharStr, SpecStr)</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">sourceStr = NUmStr</span><br><span class="line">}</span><br><span class="line"><span class="comment">// fmt.Println("source:", sourceStr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成密码</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ {</span><br><span class="line">index := rand.Intn(<span class="built_in">len</span>(sourceStr))</span><br><span class="line">passwd[i] = sourceStr[index]</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(passwd)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 远程开发之 Remote</title>
      <link href="/2022/VSCode-Remote/"/>
      <url>/2022/VSCode-Remote/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>本地 <code>Windows</code>，在做 <code>k8s kubebuilder</code> 开发的时候是在本机安装一台 <code>Cnetos</code> 虚拟机来作为开发环境，这个时候就需要用到远程开发了</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1、<code>Vscode</code> 上安装 <code>Remote - SSH</code> 插件</p><p>2、设置配置文件</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件路径</span></span><br><span class="line"><span class="comment"># C:\Users\jakehu\.ssh\config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件格式</span></span><br><span class="line">Host kubebuilder</span><br><span class="line">    HostName 10.113.73.205</span><br><span class="line">    User root</span><br><span class="line">    Port 22</span><br></pre></td></tr></tbody></table></figure><p>3、配置免密登陆</p><p>将本地公钥 <code>C:\Users\jakehu\.ssh\id_rsa.pub</code> 放入服务器 <code>~/.ssh/authorized_keys</code> 即可</p><hr><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote 参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware 虚拟机中 Centos 获取不到 IP</title>
      <link href="/2022/vmware-centos-no-ip/"/>
      <url>/2022/vmware-centos-no-ip/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>虚拟机是 <code>Centos</code>，利用桥接模式进行网络连接，输入 <code>ip a s</code> 命令 <code>ens33</code> 网卡没有 <code>IP</code> 地址</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>修改配置文件：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></tbody></table></figure><p>修改如下配置：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONBOOT=<span class="built_in">yes</span></span><br></pre></td></tr></tbody></table></figure><p>重启：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></tbody></table></figure><hr><p>题外话：</p><p><a href="https://docs.vmware.com/cn/VMware-Workstation-Player-for-Windows/16.0/com.vmware.player.win.using.doc/GUID-D8892B15-73A5-4FCE-AB7D-56C2C90BD951.html">安装 VMware Tools</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 下搭建 kubebuilder 开发环境</title>
      <link href="/2022/centos-kubebuilder/"/>
      <url>/2022/centos-kubebuilder/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>昨天在 <code>Windows</code> 上成功安装了 <code>kubebuilder</code> 但是在最后 <code>make install</code> 环节一直过不去，想想算了，还是用 <code>Centos</code> 吧</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>这是官方给出的需求依赖</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go version v1.17.9+</span><br><span class="line">docker version 17.03+.</span><br><span class="line">kubectl version v1.11.3+.</span><br><span class="line">Access to a Kubernetes v1.11.3+ cluster.</span><br></pre></td></tr></tbody></table></figure><h4 id="GO"><a href="#GO" class="headerlink" title="GO"></a>GO</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://go.dev/dl/go1.18.4.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">rm</span> -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.18.4.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin</span><br><span class="line">go version</span><br></pre></td></tr></tbody></table></figure><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><p><a href="https://docs.docker.com/engine/install/centos/">Centos Docker 安装文档</a></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自启动Docker</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></tbody></table></figure><h4 id="K8S"><a href="#K8S" class="headerlink" title="K8S"></a>K8S</h4><p><a href="https://minikube.sigs.k8s.io/docs/start/">Minikube 安装</a></p><p>问题 1：<code>X Exiting due to DRV_AS_ROOT: The "docker" driver should not be used with root privileges.</code></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --force --driver=docker</span><br></pre></td></tr></tbody></table></figure><h3 id="kubebuilder"><a href="#kubebuilder" class="headerlink" title="kubebuilder"></a>kubebuilder</h3><p><a href="https://book.kubebuilder.io/quick-start.html">kubebuilder 安装</a></p><hr><p>到此 <code>kubebuilder</code> 环境就算搭建完成</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubebuilder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 下通过 Cygwin 来安装 kubebuilder</title>
      <link href="/2022/windows-cygwin-kubebuilder/"/>
      <url>/2022/windows-cygwin-kubebuilder/</url>
      
        <content type="html"><![CDATA[<h3 id="Cygwin"><a href="#Cygwin" class="headerlink" title="Cygwin"></a>Cygwin</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>Cygwin</code> 就是一个 <code>Windows</code> 软件，该软件就是在 <code>Windows</code> 上仿真 <code>Linux</code> 操作系统</p><p>基础模块：<code>Base</code>、<code>Devel</code>、<code>Libs</code>、<code>Net</code>、<code>System</code>、<code>Utils</code></p><p>这里我们安装 <code>Base</code>、<code>Devel</code> 就够了</p><p><code>Cygwin</code> 包可以通过 UI 界面进行安装，也可以通过将下载来下来的 <code>exe</code> 文件放在 <code>C:\cygwin64\bin</code> 目录下</p><p><a href="https://developer.aliyun.com/mirror/cygwin/">Cygwin 镜像</a></p><h4 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h4><p>除了上面说的，我们还可以使用第三发的包管理工具 <code>apt-cyg</code></p><p>安装：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg</span><br><span class="line"><span class="built_in">mv</span> apt-cyg /bin/apt-cyg</span><br><span class="line"><span class="built_in">chmod</span> +x /bin/apt-cyg</span><br></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cyg install wget</span><br></pre></td></tr></tbody></table></figure><h3 id="Kubebuilder"><a href="#Kubebuilder" class="headerlink" title="Kubebuilder"></a>Kubebuilder</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go version v1.17.9+</span><br><span class="line">docker version 17.03+.</span><br><span class="line">kubectl version v1.11.3+.</span><br><span class="line">Access to a Kubernetes v1.11.3+ cluster.</span><br></pre></td></tr></tbody></table></figure><p>还需要安装 <code>Make</code></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cyg install make</span><br></pre></td></tr></tbody></table></figure><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:kubernetes-sigs/kubebuilder.git</span><br><span class="line"><span class="built_in">cd</span> kubebuilder</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><h4 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> kubebuilder</span><br><span class="line">/cygdrive/c/Users/jakehu/go/bin/kubebuilder</span><br></pre></td></tr></tbody></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go mod init jakehu.me</span><br><span class="line">kubebuilder init --domain jakehu.me</span><br></pre></td></tr></tbody></table></figure><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">tree</span><br><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── Makefile</span><br><span class="line">├── PROJECT</span><br><span class="line">├── README.md</span><br><span class="line">├── config</span><br><span class="line">│&nbsp;&nbsp; ├── default</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── kustomization.yaml</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── manager_auth_proxy_patch.yaml</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── manager_config_patch.yaml</span><br><span class="line">│&nbsp;&nbsp; ├── manager</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── controller_manager_config.yaml</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── kustomization.yaml</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── manager.yaml</span><br><span class="line">│&nbsp;&nbsp; ├── prometheus</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── kustomization.yaml</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── monitor.yaml</span><br><span class="line">│&nbsp;&nbsp; └── rbac</span><br><span class="line">│&nbsp;&nbsp;     ├── auth_proxy_client_clusterrole.yaml</span><br><span class="line">│&nbsp;&nbsp;     ├── auth_proxy_role.yaml</span><br><span class="line">│&nbsp;&nbsp;     ├── auth_proxy_role_binding.yaml</span><br><span class="line">│&nbsp;&nbsp;     ├── auth_proxy_service.yaml</span><br><span class="line">│&nbsp;&nbsp;     ├── kustomization.yaml</span><br><span class="line">│&nbsp;&nbsp;     ├── leader_election_role.yaml</span><br><span class="line">│&nbsp;&nbsp;     ├── leader_election_role_binding.yaml</span><br><span class="line">│&nbsp;&nbsp;     ├── role_binding.yaml</span><br><span class="line">│&nbsp;&nbsp;     └── service_account.yaml</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── hack</span><br><span class="line">│&nbsp;&nbsp; └── boilerplate.go.txt</span><br><span class="line">└── main.go</span><br><span class="line"></span><br><span class="line">6 directories, 25 files</span><br></pre></td></tr></tbody></table></figure><hr><p><a href="https://book.kubebuilder.io/quick-start.html">kubebuilder 文档</a></p><p>题外话：<code>make</code> 下载失败的时候请走代理</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"127.0.0.1:10809"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">"127.0.0.1:10809"</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubebuilder </tag>
            
            <tag> cygwin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 通过 Q 对象动态构建查询语句</title>
      <link href="/2022/Django-Sql-Q/"/>
      <url>/2022/Django-Sql-Q/</url>
      
        <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>需要构建的 <code>SQL</code> 条件如下:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">where</span> field1 <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">and</span> field2 <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">3</span>) <span class="keyword">and</span> (field3 <span class="keyword">like</span> "%test%" <span class="keyword">or</span> field4 <span class="keyword">like</span> "%test%")</span><br></pre></td></tr></tbody></table></figure><h3 id="非动态"><a href="#非动态" class="headerlink" title="非动态"></a>非动态</h3><p>如果是非动态其实还是比较好实现的</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">where = Q(field1__in=(<span class="number">1</span>,<span class="number">2</span>)) &amp; ~Q(field2__in=(<span class="number">1</span>,<span class="number">3</span>)) &amp; (Q(field3__icontains=<span class="string">"test"</span>) | Q(field4__icontains=<span class="string">"test"</span>))</span><br><span class="line">MyObject.objects.<span class="built_in">filter</span>(where)</span><br></pre></td></tr></tbody></table></figure><h3 id="动态实现"><a href="#动态实现" class="headerlink" title="动态实现"></a>动态实现</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Q1 = Q()</span><br><span class="line"><span class="keyword">if</span> request.query_params.get(<span class="string">"group_id"</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    Q1.add(Q(cid_id__in=[<span class="number">1</span>,<span class="number">2</span>]), Q.AND) <span class="comment"># 1,2 is the group_id</span></span><br><span class="line">    Q1.add(~Q(id__in=[<span class="number">1</span>,<span class="number">2</span>]), Q.AND)</span><br><span class="line">Q2 = Q()</span><br><span class="line"><span class="keyword">if</span> request.query_params.get(<span class="string">"name"</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    Q2.add(Q(schema__icontains=request.query_params.get(<span class="string">"name"</span>)), Q.OR)</span><br><span class="line">    Q2.add(Q(cid__host__icontains=request.query_params.get(<span class="string">"name"</span>)), Q.OR)</span><br><span class="line">    Q2.add(Q(cid__env__name__icontains=request.query_params.get(<span class="string">"name"</span>)), Q.OR)</span><br><span class="line">MyObject.objects.<span class="built_in">filter</span>(Q1 &amp; Q2)</span><br></pre></td></tr></tbody></table></figure><p>上面实现中 <code>cid</code> 为外键 <code>cid_id</code> 为外键表 <code>id</code> 字段，<code>cid__env__name</code> 为 <code>cid</code> 外键表的外键表 <code>env</code> 的字段 <code>name</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO 生成特定长度的随机数</title>
      <link href="/2022/go-random-number/"/>
      <url>/2022/go-random-number/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>最近在用 <code>Go</code> 做一个小程序，需要生成一个 <code>6</code> 位数随机验证码，遂记录一下实现</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><code>Go</code> 生成特定长度的随机数</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(RandomNumber(<span class="number">6</span>))</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// width 表示需要的位数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomNumber</span><span class="params">(width <span class="type">int</span>)</span></span> <span class="type">string</span> {</span><br><span class="line">numeric := [<span class="number">10</span>]<span class="type">byte</span>{<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>}</span><br><span class="line">r := <span class="built_in">len</span>(numeric)</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sb strings.Builder</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; width; i++ {</span><br><span class="line">fmt.Fprintf(&amp;sb, <span class="string">"%d"</span>, numeric[rand.Intn(r)])</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sb.String()</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Desktop 的替代者 Colima</title>
      <link href="/2022/docker-desktop-colima/"/>
      <url>/2022/docker-desktop-colima/</url>
      
        <content type="html"><![CDATA[<p>用 <code>Colima</code> 也已经大半年了，作为 <code>Docker Desktop</code> 的替代者用起来还是觉得不错的</p><p>目前最新版 <code>0.4.2</code></p><p><a href="https://github.com/abiosoft/colima">项目地址</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这里只以 <code>Homebrew</code> 为例</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install colima</span><br></pre></td></tr></tbody></table></figure><p>大概有如下依赖</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dependencies for colima: gdbm, ca-certificates, openssl@1.1, sqlite, python@3.9, glib, libtool, guile, nettle, libnghttp2, unbound, gnutls, libslirp, libusb, qemu and lima</span><br></pre></td></tr></tbody></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>删除现有的 <code>VM</code> 实例</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colima delete</span><br></pre></td></tr></tbody></table></figure><p><code>Homebrew</code> 更新</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew upgrade colima</span><br></pre></td></tr></tbody></table></figure><p><code>start</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colima start</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用这块可以参考官方文档，底层的 <code>runtime</code> 默认是 <code>Docker</code></p><p>以 <code>kubernetes</code> 为例，需要先安装 <code>kubectl</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubectl</span><br></pre></td></tr></tbody></table></figure><p>然后再启动 <code>colima</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">colima start --with-kubernetes</span><br><span class="line"></span><br><span class="line">INFO[0000] starting colima</span><br><span class="line">INFO[0000] runtime: docker+k3s</span><br><span class="line">INFO[0000] preparing network ...                         context=vm</span><br><span class="line">INFO[0000] starting ...                                  context=vm</span><br><span class="line">INFO[0030] provisioning ...                              context=docker</span><br><span class="line">INFO[0030] starting ...                                  context=docker</span><br><span class="line">INFO[0035] provisioning ...                              context=kubernetes</span><br><span class="line">INFO[0036] starting ...                                  context=kubernetes</span><br><span class="line">INFO[0040] done</span><br></pre></td></tr></tbody></table></figure><p>查看状态</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">colima status</span><br><span class="line"></span><br><span class="line">INFO[0000] colima is running</span><br><span class="line">INFO[0000] arch: x86_64</span><br><span class="line">INFO[0000] runtime: docker</span><br><span class="line">INFO[0000] mountType: sshfs</span><br><span class="line">INFO[0000] socket: unix:///Users/jakehu/.colima/default/docker.sock</span><br><span class="line">INFO[0000] kubernetes: enabled</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> colima </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO 实现小程序登陆授权流程</title>
      <link href="/2022/go-miniprogram/"/>
      <url>/2022/go-miniprogram/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>最近在用 <code>gin</code> 开发一款小程序后端需要用到小程序登陆授权，看看如何实现</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html">小程序登陆流程图</a></p><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><p>核心代码实现，这里主要是利用了 <code>silenceper/wechat</code> 包</p><p><code>InitWechat</code> 函数主要是初始化 <code>Wechat</code> 同时去设置缓存</p><p><code>MiniProgramLogin</code> 函数主要是去调用 <code>Code2Session</code> 进行授权，同时将 <code>code</code> 换成 <code>session</code></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"github.com/silenceper/wechat/v2"</span></span><br><span class="line"><span class="string">"github.com/silenceper/wechat/v2/cache"</span></span><br><span class="line">miniConfig <span class="string">"github.com/silenceper/wechat/v2/miniprogram/config"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitWechat</span><span class="params">(c *gin.Context)</span></span> *wechat.Wechat {</span><br><span class="line">wc := wechat.NewWechat()</span><br><span class="line">redisOpts := &amp;cache.RedisOpts{</span><br><span class="line">Host:        <span class="string">"127.0.0.1:3306"</span>,</span><br><span class="line">Database:    <span class="number">0</span>,  <span class="comment">// redis db</span></span><br><span class="line">MaxActive:   <span class="number">10</span>, <span class="comment">// 连接池最大活跃连接数</span></span><br><span class="line">MaxIdle:     <span class="number">10</span>, <span class="comment">//连接池最大空闲连接数</span></span><br><span class="line">IdleTimeout: <span class="number">60</span>, <span class="comment">//空闲连接超时时间，单位：second</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">redisCache := cache.NewRedis(c, redisOpts)</span><br><span class="line">wc.SetCache(redisCache)</span><br><span class="line"><span class="keyword">return</span> wc</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MiniProgramLogin</span><span class="params">(c *gin.Context, code <span class="type">string</span>)</span></span> (<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{}, <span class="type">error</span>) {</span><br><span class="line">wc := InitWechat(c)</span><br><span class="line">cfg := &amp;miniConfig.Config{</span><br><span class="line">AppID:     <span class="string">"APPID"</span>,</span><br><span class="line">AppSecret: <span class="string">"APPSECRET"</span>,</span><br><span class="line">}</span><br><span class="line">miniprogram := wc.GetMiniProgram(cfg)</span><br><span class="line">auth := miniprogram.GetAuth()</span><br><span class="line">session, err := auth.Code2Session(code)</span><br><span class="line"></span><br><span class="line">result := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{}{}</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> result, err</span><br><span class="line">}</span><br><span class="line">result[<span class="string">"openid"</span>] = session.OpenID</span><br><span class="line">result[<span class="string">"session_key"</span>] = session.SessionKey</span><br><span class="line">result[<span class="string">"unionid"</span>] = session.UnionID</span><br><span class="line"><span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p>小程序需要调用 <code>wx.login</code> 获取到 <code>code</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">App</span>({</span><br><span class="line">  <span class="attr">globalData</span>: {},</span><br><span class="line">  <span class="attr">onLaunch</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="keyword">var</span> token = wx.<span class="title function_">getStorageSync</span>(<span class="string">'token'</span>); <span class="comment">// 获取本地缓存</span></span><br><span class="line">      <span class="keyword">if</span> (!token) {</span><br><span class="line">          wx.<span class="title function_">login</span>({</span><br><span class="line">              <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">_a</span>) {</span><br><span class="line">                  <span class="keyword">var</span> code = _a.<span class="property">code</span>; <span class="comment">// 获取到登陆code</span></span><br><span class="line">                  <span class="keyword">if</span> (code) {</span><br><span class="line">                      <span class="variable language_">console</span>.<span class="title function_">log</span>(code);</span><br><span class="line">                      <span class="comment">// 在这里请求API进行登陆</span></span><br><span class="line">                  }</span><br><span class="line">              }</span><br><span class="line">          });</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utils.MiniProgramLogin(c, code)</span><br></pre></td></tr></tbody></table></figure><p><code>c</code> 为 <code>gin</code> 上下文对象 <code>*gin.Context</code></p><p><code>code</code> 为前端传入小程序 <code>wx.login</code> 获取到的 <code>code</code></p><hr><p>纵有千古，横有八荒；前途似海，来日方长。</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把 Gin 打包到 Docker 中运行</title>
      <link href="/2022/gin-docker/"/>
      <url>/2022/gin-docker/</url>
      
        <content type="html"><![CDATA[<h3 id="单次构造"><a href="#单次构造" class="headerlink" title="单次构造"></a>单次构造</h3><p>这种方式打包环境和运行环境都在同一个 <code>Golang</code> 底层镜像中</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.17</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /build <span class="comment"># 工作目录</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> . ./ <span class="comment"># 复制文件到工作目录</span></span></span><br><span class="line"><span class="keyword">ENV</span> GO111MODULE=on \ <span class="comment"># 设置Go Module模式，并修改代理</span></span><br><span class="line">    GOPROXY=https://goproxy.cn</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go mod download <span class="comment"># 下载go.mod里面所用到的包</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -o hejiusha . <span class="comment"># 编译</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8888</span> <span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">"./hejiusha"</span>] <span class="comment"># 运行</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="多段构造"><a href="#多段构造" class="headerlink" title="多段构造"></a>多段构造</h3><p>这种方式可以把编译环境和运行环境进行分割，极大的减小了运行镜像的大小</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#----------build----------#</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.17</span>-alpine AS builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /build <span class="comment"># 工作目录</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> . ./ <span class="comment"># 复制文件到工作目录</span></span></span><br><span class="line"><span class="keyword">ENV</span> GO111MODULE=on \ <span class="comment"># 设置Go Module模式，并修改代理</span></span><br><span class="line">    GOPROXY=https://goproxy.cn</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go mod download <span class="comment"># 下载go.mod里面所用到的包</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -o hejiusha . <span class="comment"># 编译</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------run----------#</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:latest <span class="comment"># 运行环境换为alpine</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /build/ <span class="comment"># 采用相同的目录作为工作目录</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /build . <span class="comment"># 把golang镜像中编译好的二进制文件复制到运行镜像中</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8888</span> <span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">"./hejiusha"</span>] <span class="comment"># 运行</span></span></span><br></pre></td></tr></tbody></table></figure><hr><p>俗世洪流，站得住脚已是千辛万苦，想要出人头地，恐怕比登天还难。</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 重试机制框架 tenacity 使用</title>
      <link href="/2022/python-retry-tenacity/"/>
      <url>/2022/python-retry-tenacity/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>最近在做监控 <code>Spring Boot /actuator/health</code> 的时候，总是会出现一些莫名其妙的网络超时中断，于是想到了用重试机制来进行重试请求。</p><p>下面看看 <code>Python</code> 的第三方库 <code>Tenacity</code></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Tenacity</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> tenacity <span class="keyword">import</span> retry, stop_after_attempt, wait_fixed</span><br><span class="line"></span><br><span class="line"><span class="comment"># reraise 表示是否抛出原异常，默认为 False</span></span><br><span class="line"><span class="comment"># stop_after_attempt 表示最大尝试次数</span></span><br><span class="line"><span class="comment"># wait_fixed 表示等待时间</span></span><br><span class="line"><span class="meta">@retry(<span class="params">reraise=<span class="literal">True</span>, stop=stop_after_attempt(<span class="params"><span class="number">2</span></span>), wait=wait_fixed(<span class="params"><span class="number">2</span></span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Start Try "</span> + <span class="built_in">str</span>(main.retry.statistics[<span class="string">"attempt_number"</span>]))</span><br><span class="line">    resp = requests.get(<span class="string">"https://httpstat.us/200?sleep=5000"</span>, timeout=<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(resp.status_code)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(e))</span><br></pre></td></tr></tbody></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Start Try 1</span><br><span class="line">Start Try 2</span><br><span class="line">HTTPSConnectionPool(host='httpstat.us', port=443): Read timed out. (read timeout=3)</span><br></pre></td></tr></tbody></table></figure><p>上面示例中，设定超时为 <code>3s</code> 请求却 <code>sleep=5000</code> 此请求必然会超时</p><p><code>tenacity</code> 只要遇见 <code>raise</code> 就会触发重试，上面代码中 <code>requests</code> 底层已经 <code>raise</code>，所以即使 <code>main</code> 函数中没有 <code>raise</code> 依然会重试</p><p><a href="https://tenacity.readthedocs.io/en/latest/">参考文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tenacity </tag>
            
            <tag> retry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python sanic celery example</title>
      <link href="/2022/python-sanic-celery/"/>
      <url>/2022/python-sanic-celery/</url>
      
        <content type="html"><![CDATA[<h3 id="Celery"><a href="#Celery" class="headerlink" title="Celery"></a>Celery</h3><p><code>Celery</code> 是一个基于 <code>Python</code> 开发的分布式异步消息任务队列，通过它可以轻松的实现任务的异步处理</p><p>看看如何 <code>Celery</code> 跟 <code>Sanic</code> 一起使用</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用的组件</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sanic==21.12.1</span><br><span class="line">celery==5.2.3</span><br><span class="line">redis==4.1.4</span><br><span class="line">flower==1.0.0</span><br></pre></td></tr></tbody></table></figure><p><code>tasks/task.py</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">REDIS_URI = <span class="string">"127.0.0.1"</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br><span class="line">REDIS_DB = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">app = Celery(</span><br><span class="line">    <span class="string">"tasks"</span>,</span><br><span class="line">    broker=<span class="string">f"redis://<span class="subst">{REDIS_URI}</span>:<span class="subst">{REDIS_PORT}</span>/<span class="subst">{REDIS_DB}</span>"</span>,</span><br><span class="line">    backend=<span class="string">f"redis://<span class="subst">{REDIS_URI}</span>:<span class="subst">{REDIS_PORT}</span>/<span class="subst">{REDIS_DB}</span>"</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_task</span>(<span class="params">name</span>):</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, {}!"</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><code>server.py</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tasks.task <span class="keyword">import</span> run_task</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">"MyHelloWorldApp"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">"/start_task"</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">start_task</span>(<span class="params">request</span>):</span><br><span class="line">    result = run_task.delay(<span class="string">"jakehu"</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">"Task started."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, debug=<span class="literal">True</span>, auto_reload=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><p><code>worker.py</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tasks.task <span class="keyword">import</span> app</span><br></pre></td></tr></tbody></table></figure><p>运行 <code>worker</code> 进程</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A worker:app worker --loglevel=info --concurrency=1</span><br></pre></td></tr></tbody></table></figure><h3 id="Flower"><a href="#Flower" class="headerlink" title="Flower"></a>Flower</h3><p><code>Flower</code> 是基于 web 的监控和管理 <code>Celery</code> 的工具</p><p>使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery --broker=redis://127.0.0.1:6379/0 flower --port=5566</span><br></pre></td></tr></tbody></table></figure><p><a href="https://docs.celeryproject.org/en/stable/">Celery 参考文档</a><br><a href="https://flower.readthedocs.io/en/latest/">Flower 参考文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqlalchemy Date Format</title>
      <link href="/2022/sqlalchemy-date-format/"/>
      <url>/2022/sqlalchemy-date-format/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>当使用 <code>Sqlalchemy</code> 查询数据通过 <code>ujson</code> 等 <code>json</code> 工具 <code>dumps</code> 时会报以下错误</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: datetime.datetime(2022, 2, 20, 14, 17, 23) is not JSON serializable</span><br></pre></td></tr></tbody></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>可以通过在 <code>SQL</code> 查询的时候先行进行格式化</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>(</span><br><span class="line">    order.c.id,</span><br><span class="line">    func.date_format(order.c.time, "%Y-%m-%d %H:%i:%s"),</span><br><span class="line">)</span><br><span class="line">.select_from(<span class="keyword">order</span>)</span><br><span class="line">.<span class="keyword">where</span>(</span><br><span class="line">    order.c.uid <span class="operator">=</span><span class="operator">=</span> <span class="number">1</span>,</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sqlalchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab Docker Update</title>
      <link href="/2022/gitlab-docker-update/"/>
      <url>/2022/gitlab-docker-update/</url>
      
        <content type="html"><![CDATA[<h3 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h3><p>升级前明确升级路线<br><a href="https://docs.gitlab.com/ee/update/#upgrade-paths">参考</a>  </p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>利用 <code>gitlab-backup</code> 命令进行备份</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -t &lt;container name&gt; gitlab-backup create</span><br></pre></td></tr></tbody></table></figure><p>复制备份至宿主机</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/gitlab/backups</span><br><span class="line">docker cp &lt;container name&gt;:/var/opt/gitlab/backups/xxx_gitlab_backup.tar .</span><br></pre></td></tr></tbody></table></figure><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>停止现有容器</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;container name&gt;</span><br></pre></td></tr></tbody></table></figure><p>删除现有容器</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm &lt;container name&gt;</span><br></pre></td></tr></tbody></table></figure><p>拉取新的容器镜像</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce:13.12.15-ce.0</span><br></pre></td></tr></tbody></table></figure><p>启动新的容器</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f gitlab.yml up -d</span><br></pre></td></tr></tbody></table></figure><p><code>docker-compose</code> 配置如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  image: 'gitlab/gitlab-ce:13.12.15-ce.0'</span><br><span class="line">  restart: always</span><br><span class="line">  hostname: 'git.xxx.com'</span><br><span class="line">  environment:</span><br><span class="line">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">      gitlab_rails['gitlab_shell_ssh_port'] = 2224</span><br><span class="line">  ports:</span><br><span class="line">    - '8081:80'</span><br><span class="line">    - '2224:22'</span><br><span class="line">  volumes:</span><br><span class="line">    - '/opt/gitlab/config:/etc/gitlab'</span><br><span class="line">    - '/opt/gitlab/logs:/var/log/gitlab'</span><br><span class="line">    - '/opt/gitlab/data:/var/opt/gitlab'</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka3.0 之 Raft 模式初体验 (单机版)</title>
      <link href="/2022/kafka-raft/"/>
      <url>/2022/kafka-raft/</url>
      
        <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://dlcdn.apache.org/kafka/3.0.0/kafka_2.13-3.0.0.tgz  </span><br><span class="line">tar -xzf kafka_2.13-3.0.0.tgz  </span><br><span class="line">cd kafka_2.13-3.0.0</span><br></pre></td></tr></tbody></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>配置参数前假设我们的节点为：<code>10.200.128.106</code>  </p><p>配置文件路径：<code>config/kraft/server.properties</code></p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 节点角色</span></span><br><span class="line"><span class="attr">process.roles</span>=broker,controller</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点的ID，唯一</span></span><br><span class="line"><span class="attr">node.id</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接的集群地址字符串，每个服务器一样，单机就是本机</span></span><br><span class="line"><span class="attr">controller.quorum.voters</span>=<span class="number">1</span>@<span class="number">10.200</span>.<span class="number">128.106</span>:<span class="number">9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IP:Port，每个服务器不一样</span></span><br><span class="line"><span class="attr">listeners</span>=PLAINTEXT://<span class="number">10.200</span>.<span class="number">128.106</span>:<span class="number">9092</span>,CONTROLLER://<span class="number">10.200</span>.<span class="number">128.106</span>:<span class="number">9093</span></span><br><span class="line"><span class="attr">inter.broker.listener.name</span>=PLAINTEXT</span><br><span class="line"></span><br><span class="line"><span class="comment"># IP:Port，每个服务器不一样</span></span><br><span class="line"><span class="attr">advertised.listeners</span>=PLAINTEXT://<span class="number">10.200</span>.<span class="number">128.106</span>:<span class="number">9092</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志目录</span></span><br><span class="line"><span class="attr">log.dirs</span>=/tmp/kraft-combined-logs</span><br></pre></td></tr></tbody></table></figure><p>还有很多参数就不一一列举了</p><h4 id="生成集群ID"><a href="#生成集群ID" class="headerlink" title="生成集群ID"></a>生成集群 ID</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># bin/kafka-storage.sh random-uuid</span><br><span class="line">VV7Jb8bWT-Oz_F99BNXvAQ</span><br></pre></td></tr></tbody></table></figure><h4 id="格式化日志目录"><a href="#格式化日志目录" class="headerlink" title="格式化日志目录"></a>格式化日志目录</h4><p>如果是集群应在每台机器上运行格式化命令，并且应该使用同一集群 ID</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># bin/kafka-storage.sh format -t VV7Jb8bWT-Oz_F99BNXvAQ -c ./config/kraft/server.properties</span><br><span class="line">Formatting /tmp/kraft-combined-logs</span><br></pre></td></tr></tbody></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh ./config/kraft/server.properties</span><br></pre></td></tr></tbody></table></figure><p>也可以加上 <code>-daemon</code> 实现后台守护</p><h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-stop.sh stop</span><br></pre></td></tr></tbody></table></figure><h4 id="创建Topics"><a href="#创建Topics" class="headerlink" title="创建Topics"></a>创建 Topics</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># bin/kafka-topics.sh --create --partitions 1 --replication-factor 1 --topic topic-name --bootstrap-server 10.200.128.106:9092</span><br><span class="line">Created topic topic-name.</span><br></pre></td></tr></tbody></table></figure><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --topic topic-name --bootstrap-server 10.200.128.106:9092</span><br><span class="line">&gt;test1</span><br><span class="line">&gt;test2</span><br><span class="line">&gt;test3</span><br></pre></td></tr></tbody></table></figure><p>可以按 <code>Ctrl+C</code> 结束生产者进程</p><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># bin/kafka-console-consumer.sh --topic topic-name --from-beginning --bootstrap-server 10.200.128.106:9092</span><br><span class="line">test1</span><br><span class="line">test2</span><br><span class="line">test3</span><br></pre></td></tr></tbody></table></figure><p>可以按 <code>Ctrl+C</code> 结束消费者进程</p><!-- https://juejin.cn/post/7030974149115772964 -->]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php composer certificate verify failed</title>
      <link href="/2022/php-composer-error/"/>
      <url>/2022/php-composer-error/</url>
      
        <content type="html"><![CDATA[<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Composer\Downloader\TransportException]</span><br><span class="line">The "https://packagist.phpcomposer.com/packages.json" file could not be downloaded: SSL operation failed with code 1. OpenSSL Error messages:</span><br><span class="line">error:14090086:SSL routines:ssl3_get_server_certificate:certificate verify failed</span><br><span class="line">Failed to enable crypto</span><br><span class="line">failed to open stream: operation failed</span><br></pre></td></tr></tbody></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>把 <code>composer.lock</code> 文件删除，重新执行 <code>composer install</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 远程执行动态加载环境变量</title>
      <link href="/2022/python-reload-env/"/>
      <url>/2022/python-reload-env/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>利用 <code>Puppet</code> 做远程脚本执行的时候，发现 <code>Python</code> 脚本无法获取到环境变量</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在执行脚本前去获取到环境变量，这样就可以获取到环境变量了，或者重写 <code>os.environ</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_env</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        source_profile_cmd = <span class="string">"source /etc/profile &amp;&amp; env"</span></span><br><span class="line">        status, out = commands.getstatusoutput(source_profile_cmd)</span><br><span class="line">        envs = {}</span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> out.split(<span class="string">"\n"</span>):</span><br><span class="line">            env = info.split(<span class="string">"="</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(env) == <span class="number">2</span>:</span><br><span class="line">                envs[env[<span class="number">0</span>]] = env[<span class="number">1</span>]</span><br><span class="line">                <span class="comment"># os.environ[env[0]] = env[1]</span></span><br><span class="line">        <span class="keyword">return</span> envs</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> {}</span><br><span class="line">        </span><br><span class="line">get_env()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 下 Sed 参数 i 出现 invalid command code</title>
      <link href="/2022/mac-sed-error/"/>
      <url>/2022/mac-sed-error/</url>
      
        <content type="html"><![CDATA[<p>很少在 <code>Mac</code> 上调试 <code>Shell</code>，今天在 <code>Mac</code> 调试 <code>Shell</code> 的时候发现 <code>sed</code> 的用法还有点不一样，报错：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed: 1: "02.data.sql": invalid command code .</span><br></pre></td></tr></tbody></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在 <code>-i</code> 后面增加<code>''</code> 变成 <code>-i ''</code> 即可</p><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">public_domain=<span class="string">"auth.xxx.com"</span></span><br><span class="line">private_domain=<span class="string">"authconsole.xxx.com"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="subst">$(sed -i '' s/ztsg.xxx.com/${public_domain}/ 02.data.sql)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"public_domain update success"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="subst">$(sed -i '' s/ztsgconsole.xxx.com/${private_domain}/ 02.data.sql)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"private_domain update success"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">public_domain=<span class="string">"auth.xxx.com"</span></span><br><span class="line">private_domain=<span class="string">"authconsole.xxx.com"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="subst">$(sed -i s/ztsg.xxx.com/${public_domain}/ 02.data.sql)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"public_domain update success"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="subst">$(sed -i s/ztsgconsole.xxx.com/${private_domain}/ 02.data.sql)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"private_domain update success"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure><p><code>Mac</code> 和 <code>Linux</code> 下分别用以上两种写法就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> sed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把 VsCode 打造成 Shell IDE 不可缺少的几个插件</title>
      <link href="/2021/vscode-shell/"/>
      <url>/2021/vscode-shell/</url>
      
        <content type="html"><![CDATA[<p>说到写 <code>Shell</code> 第一反应肯定都是 <code>Vim</code>，接下来我们看看如何通过 <code>VsCode</code> 的插件把 <code>VsCode</code> 打造成一个 <code>Shell IDE</code></p><h3 id="shellman"><a href="#shellman" class="headerlink" title="shellman"></a>shellman</h3><p>说到 <code>IDE</code> 最起码的需要自动提示和补全，这就需要 <code>shellman</code> 效果如下：<br><img src="https://img.jakehu.me/2021/12/27/bt2nnr.png"></p><h3 id="ShellCheck"><a href="#ShellCheck" class="headerlink" title="ShellCheck"></a>ShellCheck</h3><p>有了提示和自动补全，还需要校验我们写得代码是否优雅，这就需要 <code>ShellCheck</code> 语法检验，效果如下：<br><img src="https://img.jakehu.me/2021/12/27/ZhIH0i.png"></p><p>而且 <code>shellcheck</code> 和 <code>shellman</code> 是兼容的<br><code>shellcheck compatible (99.99%).</code></p><h3 id="shell-format"><a href="#shell-format" class="headerlink" title="shell-format"></a>shell-format</h3><p>最后就是格式化插件 <code>shell-format</code>，写完代码风格还是需要格式化一下的</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 框架项目路由规划</title>
      <link href="/2021/gin-router/"/>
      <url>/2021/gin-router/</url>
      
        <content type="html"><![CDATA[<p>在用 <code>Python</code> 或 <code>Nodejs</code> 做项目的时候我喜欢把项目的路由分文件存放在 <code>routers</code> 文件夹下，然后在启动文件夹中加载，这样即简洁也好维护，试试如何在 <code>Gin</code> 中实现</p><h3 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r := gin.Default()</span><br><span class="line">routers.Router(r) <span class="comment">// 路由</span></span><br><span class="line">r.Run(<span class="string">":8888"</span>)</span><br></pre></td></tr></tbody></table></figure><p>就 <code>3</code> 行代码，<code>Router</code> 方法用来加载所有的路由，接下来看 <code>Router</code> 方法具体实现</p><h3 id="routers-router-go"><a href="#routers-router-go" class="headerlink" title="routers/router.go"></a>routers/router.go</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Router</span><span class="params">(e *gin.Engine)</span></span> {</span><br><span class="line"><span class="comment">// V1版本</span></span><br><span class="line">v1 := e.Group(<span class="string">"/v1"</span>)</span><br><span class="line">{</span><br><span class="line">RouterUser(v1)</span><br><span class="line"><span class="comment">// 其他模块路由</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// V2版本</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>Router</code> 方法主要是去把当前<code>包</code>下的其他模块的路由加载进来，这里使用了<code>路由组</code>，如果不需要<code>路由组</code>的话去掉即可，接来下看看 <code>RouterUser</code> 方法具体实现</p><h3 id="routers-user-go"><a href="#routers-user-go" class="headerlink" title="routers/user.go"></a>routers/user.go</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RouterUser</span><span class="params">(e *gin.RouterGroup)</span></span> {</span><br><span class="line">e.GET(<span class="string">"/user/list"</span>, controllers.UserList)</span><br><span class="line">e.POST(<span class="string">"/user/add"</span>, controllers.UserAdd)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用<code>路由组</code>接收的参数是 <code>RouterGroup</code> 不使用<code>路由组</code>接收的参数是 <code>Engine</code>，这里需要注意一下</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>最后规划下来的目录如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── app</span><br><span class="line">│&nbsp;&nbsp; └── controllers</span><br><span class="line">│&nbsp;&nbsp;     └── user.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go</span><br><span class="line">└── routers</span><br><span class="line"> &nbsp;&nbsp; ├── router.go</span><br><span class="line"> &nbsp;&nbsp; └── user.go</span><br></pre></td></tr></tbody></table></figure><p>这样规划的话，就只需要维护 <code>router.go</code> 和其他的对应模块自己的路由规则，<code>main.go</code> 也就会变得非常的简洁</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
            <tag> Router </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 保留字符查询如：*、$、: 等</title>
      <link href="/2021/es-reserved-characters/"/>
      <url>/2021/es-reserved-characters/</url>
      
        <content type="html"><![CDATA[<p>一个非常简单的需求，需要在 <code>ES</code> 中去匹配 <code>IPV6</code> 的 <code>2409:8a10:*</code> 段的数据，看看如何查询</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET logstash-nginx-*/doc/_search</span><br><span class="line">{</span><br><span class="line">  "_source": "remote_ip",</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "must": [</span><br><span class="line">        {</span><br><span class="line">          "query_string": {</span><br><span class="line">            "fields": [</span><br><span class="line">              "remote_ip.keyword"</span><br><span class="line">            ],</span><br><span class="line">            "query": """2409\:8a10\:*""",</span><br><span class="line">            "analyzer": "keyword",</span><br><span class="line">            "analyze_wildcard": true</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      "filter": {</span><br><span class="line">        "range": {</span><br><span class="line">          "@timestamp": {</span><br><span class="line">            "gte": "2021-12-14T09:54:00.000000+0800",</span><br><span class="line">            "lt": "2021-12-16T09:55:00.000000+0800"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里的重点是 <code>"""2409\:8a10\:*"""</code> 也可以写成 <code>"2409\\:8a10\\:*"</code>，其他的符号也可按此类推即可</p><p>最后效果：<br><img src="https://img.jakehu.me/2021/12/16/hc6IYv.png"></p><hr><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html">ES 相关参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 框架中设置热加载 Hot Reload</title>
      <link href="/2021/gin-hot-reload/"/>
      <url>/2021/gin-hot-reload/</url>
      
        <content type="html"><![CDATA[<p>在 <code>Python</code> 中需要热加载是非常简单的，以 <code>Sanic</code> 为例只需要设置 <code>auto_reload=True</code>，但是在 <code>Gin</code> 中没有内置相应的功能，这里我们可以利用 <code>Go</code> 中的一些其他包实现，即更改源码，保存后，自动触发更新，浏览器上刷新即可。免去了杀进程、重新启动之苦</p><h4 id="Fresh"><a href="#Fresh" class="headerlink" title="Fresh"></a>Fresh</h4><p>试了下 <code>github.com/gravityblast/fresh</code> 还觉得不错<br>安装：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/pilu/fresh</span><br></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fresh</span><br></pre></td></tr></tbody></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>记录一下其他实现框架<br>Air：<code>https://github.com/cosmtrek/air</code><br>Bee：<code>https://github.com/beego/bee</code><br>Realize：<code>https://github.com/oxequa/realize</code><br>Gin：<code>https://github.com/codegangsta/gin</code><br>gowatch：<code>https://github.com/silenceper/gowatch</code></p><hr><p>题外话：<br>在安装非项目使用的包时如：<code>fresh</code>，最好是不要在项目根目录下进行 <code>go get</code> 或者会被写入到项目的 <code>go.mod</code> 中</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gin </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Supervisor 守护 Haproxy</title>
      <link href="/2021/supervisor-haproxy/"/>
      <url>/2021/supervisor-haproxy/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>最近需要实现通过 <code>Supervisor</code> 来守护 <code>Haproxy</code>，折腾了半天记录下实现配置</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[program:haproxy]</span><br><span class="line">command=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -Ds</span><br><span class="line">process_name=haproxy</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startretries=1</span><br></pre></td></tr></tbody></table></figure><p>这里的重点是 <code>-p /run/haproxy.pid</code> 必须要指定 <code>pid</code> 的路径，要不然没法获取到 <code>program</code> 状态</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> haproxy </tag>
            
            <tag> supervisor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO 语言学习笔记</title>
      <link href="/2021/go-study-notes/"/>
      <url>/2021/go-study-notes/</url>
      
        <content type="html"><![CDATA[<h4 id="类型"><a href="#类型" class="headerlink" title="类型?"></a>类型？</h4><p><code>type</code> 定义的<code>结构体</code>和<code>接口</code>都是<code>类型</code></p><h4 id="导出名"><a href="#导出名" class="headerlink" title="导出名"></a>导出名</h4><p>在 <code>Go</code> 中，如果一个名字以大写字母开头，那么它就是已导出的，在导入一个包时，你只能引用其中已导出的名字。任何<code>未导出</code>的名字在该包外均无法访问<br>类似其他语言 <code>Public</code> 与 <code>Private</code> 修饰符</p><h4 id="命名返回值"><a href="#命名返回值" class="headerlink" title="命名返回值"></a>命名返回值</h4><p><code>Go</code> 的返回值可被命名，它们会被视作定义在函数顶部的变量。返回值的名称应当具有一定的意义，它可以作为文档使用。没有参数的 <code>return</code> 语句返回已命名的返回值。也就是<code>直接</code>返回</p><h4 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h4><p>函数中，简洁赋值语句<code>:=</code> 可在类型明确的地方代替 <code>var</code> 声明<br>函数外的每个语句都必须以关键字开始（<code>var</code>, <code>func</code> 等等），因此 <code>:=</code> 结构不能在函数外使用</p><h4 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h4><p>没有明确初始值的变量声明会被赋予它们的<code>零值</code>，<code>0</code>、<code>false</code>、<code>""（空字符串）</code></p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>使用 <code>const</code> 关键字声明，常量不能用<code>:=</code> 语法声明</p><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p><code>defer</code> 语句会将函数推迟到外层函数返回之后执行，推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用<br>推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照<code>后进先出</code>的顺序调用<strong>可以看做是倒序执行</strong></p><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><p>指针保存了值的内存地址</p><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>它会选择一个半开区间，包括第一个元素，但排除最后一个元素<br>切片并不存储任何数据，它只是<strong>描述了底层数组中的一段</strong>。更改切片的元素会修改其底层数组中对应的元素。与它共享底层数组的切片都会观测到这些修改</p><h4 id="匿名函数与闭包"><a href="#匿名函数与闭包" class="headerlink" title="匿名函数与闭包"></a>匿名函数与闭包</h4><p>有了匿名函数，就可以在函数中再定义函数（函数嵌套），定义的这个匿名函数，也可以称为内部函数。更重要的是，在函数内定义的内部函数，可以使用外部函数的变量等，这种方式也称为闭包</p><h4 id="方法与函数"><a href="#方法与函数" class="headerlink" title="方法与函数"></a>方法与函数</h4><p>方法就是一类带特殊的<strong>接收者</strong>参数的函数<br>接收者的类型定义和方法声明必须在同一包内；不能为内建类型声明方法</p><h4 id="选择值或指针作为接收者"><a href="#选择值或指针作为接收者" class="headerlink" title="选择值或指针作为接收者"></a>选择值或指针作为接收者</h4><p>使用指针接收者的原因有二：<br>首先，方法能够修改其接收者指向的值。<br>其次，这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样做会更加高效<br>通常来说，所有给定类型的方法都应该有值或指针接收者，但并不应该二者混用</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p><strong>接口类型</strong>是由一组方法签名定义的集合<br>类型通过实现一个接口的所有方法来实现该接口。既然无需专门显式声明，也就没有 “implements” 关键字<br>隐式接口从接口的实现中解耦了定义，这样接口的实现可以出现在任何包中，无需提前准备<br>因此，也就无需在每一个实现上增加新的接口名称，这样同时也鼓励了明确的接口定义</p><hr><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python pip 利用国内 pypi 源进行加速</title>
      <link href="/2021/python-pip-pypi/"/>
      <url>/2021/python-pip-pypi/</url>
      
        <content type="html"><![CDATA[<p>国内的 <code>PYPI</code> 源也挺多的，经过实际使用下来，还是觉得华为的 <code>PYPI</code> 源包的版本最为齐全，推荐用华为的源进行加速</p><h4 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h4><p>运行以下命令使用华为源：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt --trusted-host https://repo.huaweicloud.com -i https://repo.huaweicloud.com/repository/pypi/simple</span><br></pre></td></tr></tbody></table></figure><p>或者</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --trusted-host https://repo.huaweicloud.com -i https://repo.huaweicloud.com/repository/pypi/simple sanic</span><br></pre></td></tr></tbody></table></figure><p>通过上面的方式安装单个包</p><h4 id="设为默认"><a href="#设为默认" class="headerlink" title="设为默认"></a>设为默认</h4><p><code>Pip</code> 的配置文件为用户根目录下的：<code>~/.pip/pip.conf</code>（<code>Windows</code> 路径为：<code>C:\Users\&lt;UserName&gt;\pip\pip.ini</code>）, 您可以配置如下内容：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://repo.huaweicloud.com/repository/pypi/simple</span><br><span class="line">trusted-host = repo.huaweicloud.com</span><br><span class="line">timeout = 120</span><br></pre></td></tr></tbody></table></figure><hr><p>其他国内镜像源：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">阿里云：http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">中国科技大学：https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">豆瓣(douban)：http://pypi.douban.com/simple/</span><br><span class="line">清华大学：https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">中国科学技术大学：http://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pypi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alpine 修改为国内源进行加速</title>
      <link href="/2021/alpine-mirrors/"/>
      <url>/2021/alpine-mirrors/</url>
      
        <content type="html"><![CDATA[<p>个人推荐使用华为的 <code>Alpine</code> 源，通过我的测试华为的源最为齐全</p><h4 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/dl-cdn.alpinelinux.org/repo.huaweicloud.com/g' /etc/apk/repositories</span><br></pre></td></tr></tbody></table></figure><h4 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories</span><br></pre></td></tr></tbody></table></figure><h4 id="科大"><a href="#科大" class="headerlink" title="科大"></a>科大</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories</span><br></pre></td></tr></tbody></table></figure><h4 id="清华"><a href="#清华" class="headerlink" title="清华"></a>清华</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories</span><br></pre></td></tr></tbody></table></figure><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN sed -i 's/dl-cdn.alpinelinux.org/repo.huaweicloud.com/g' /etc/apk/repositories</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alpine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把 Sanic 部署到 Docker 中并用 Supervisor 来守护</title>
      <link href="/2021/sanic-docker-supervisor/"/>
      <url>/2021/sanic-docker-supervisor/</url>
      
        <content type="html"><![CDATA[<p>最近开发 <code>Python</code> 一直在用 <code>Sanic</code>，感觉还不错；看看如何将 <code>Sanic</code> 部署到 <code>Docker</code> 中并用 <code>Supervisor</code> 来守护</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>这里利用 <code>Python 3.9</code> 来构建基础镜像</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">'s/dl-cdn.alpinelinux.org/repo.huaweicloud.com/g'</span> /etc/apk/repositories</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apk add --no-cache build-base \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apk add --no-cache libffi-dev</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /usr/src/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /usr/src/app/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./supervisor/supervisord.conf /etc/supervisord.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/src/app</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONPATH /usr/src/app</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip3 install supervisor \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; pip3 install -r requirements.txt --trusted-host https://repo.huaweicloud.com -i https://repo.huaweicloud.com/repository/pypi/simple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">"supervisord"</span>, <span class="string">"-c"</span>, <span class="string">"/etc/supervisord.conf"</span>]</span></span><br></pre></td></tr></tbody></table></figure><p>这里利用华为的 <code>alpine</code> 源和 <code>pypi</code> 源</p><h3 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h3><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[unix_http_server]</span></span><br><span class="line"><span class="attr">file</span>=/var/run/supervisor.sock</span><br><span class="line"></span><br><span class="line"><span class="section">[supervisord]</span></span><br><span class="line"><span class="attr">logfile</span>=/var/log/supervisord.log</span><br><span class="line"><span class="attr">logfile_maxbytes</span>=<span class="number">50</span>MB</span><br><span class="line"><span class="attr">logfile_backups</span>=<span class="number">10</span></span><br><span class="line"><span class="attr">loglevel</span>=info</span><br><span class="line"><span class="attr">pidfile</span>=/var/run/supervisord.pid</span><br><span class="line"><span class="attr">nodaemon</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">silent</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">minfds</span>=<span class="number">1024</span></span><br><span class="line"><span class="attr">minprocs</span>=<span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="section">[rpcinterface:supervisor]</span></span><br><span class="line"><span class="attr">supervisor.rpcinterface_factory</span> = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line"><span class="section">[supervisorctl]</span></span><br><span class="line"><span class="attr">serverurl</span>=unix:///var/run/supervisor.sock</span><br><span class="line"></span><br><span class="line"><span class="section">[program:sanic]</span></span><br><span class="line"><span class="attr">user</span> = root</span><br><span class="line"><span class="attr">directory</span>=/usr/src/app</span><br><span class="line"><span class="attr">command</span>=sanic server.app --host=<span class="number">0.0</span>.<span class="number">0.0</span> --port=<span class="number">8888</span> --workers=<span class="number">4</span></span><br><span class="line"><span class="attr">stdout_logfile_backups</span>=<span class="number">20</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">50</span>MB</span><br><span class="line"><span class="attr">stdout_logfile</span> = /var/log/sanic.log</span><br><span class="line"><span class="attr">stderr_logfile</span> = /var/log/sanic.err</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p><a href="http://supervisord.org/configuration.html">Supervisor 配置参考</a></p><hr><p><strong>题外话：</strong></p><p>容器运行 <code>Supervisor</code> 记得设置 <code>nodaemon=true</code>，或则会出现 <code>Unlinking stale socket /var/run/supervisor.sock</code></p><p>因为 <code>Supervisor</code> 默认是 <code>deamon</code> 模式，启动命令结束后 <code>Supervisor</code> 会在后台运行，而容器运行启动命令返回 <code>0</code> 后自己关闭了，导致一直出现无法运行的现象</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sanic </tag>
            
            <tag> Supervisor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pip 安装 Python 模块常见报错处理</title>
      <link href="/2021/pip-error/"/>
      <url>/2021/pip-error/</url>
      
        <content type="html"><![CDATA[<h4 id="错误-修复"><a href="#错误-修复" class="headerlink" title="错误/修复"></a>错误 / 修复</h4><p>此错误是利用 <code>python:3.9-alpine</code> 在打包 <code>Docker</code> 镜像时遇到的</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c/_cffi_backend.c:15:10: fatal error: ffi.h: No such file or directory</span><br><span class="line">   15 | #include &lt;ffi.h&gt;</span><br><span class="line">      |          ^~~~~~~</span><br><span class="line">compilation terminated.</span><br><span class="line">error: command '/usr/bin/gcc' failed with exit code 1</span><br></pre></td></tr></tbody></table></figure><p>修复</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add --no-cache libffi-dev</span><br></pre></td></tr></tbody></table></figure><p>在 <code>Ubuntu</code> 和 <code>Centos</code> 中应该</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libffi-dev</span><br><span class="line"></span><br><span class="line">yum install libffi-devel</span><br></pre></td></tr></tbody></table></figure><h4 id="错误-修复-1"><a href="#错误-修复-1" class="headerlink" title="错误/修复"></a>错误 / 修复</h4><p>错误：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='files.pythonhosted.org', port=443): Read timed out.</span><br></pre></td></tr></tbody></table></figure><p>修复：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --default-timeout=1000 --no-cache-dir -r requirements.txt</span><br></pre></td></tr></tbody></table></figure><p>或者是利用国内的 <code>pypi</code> 源</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 防注入正则表达式与实现过滤</title>
      <link href="/2021/sql-injection/"/>
      <url>/2021/sql-injection/</url>
      
        <content type="html"><![CDATA[<h3 id="SQL防注入"><a href="#SQL防注入" class="headerlink" title="SQL防注入"></a>SQL 防注入</h3><p>一般在项目中我们不太会去注意 <code>SQL</code> 注入的问题，因为我们会使用 <code>ORM</code>，而 <code>ORM</code> 在实现的过程中也会帮我做 <code>SQL</code> 注入过滤；但有的时候 <code>ORM</code> 没法满足我们的需求，这时可能就会手撸原生 <code>SQL</code> 来执行</p><p><strong>注意！！极其不建议使用拼接 <code>sql</code> 语句，这样很容易引起 <code>sql</code> 注入！！</strong></p><p>如果必须要自己拼接 <code>sql</code> 语句，请使用 <code>mysql.escape</code> 方法；或者利用正则来对输入参数进行过滤。以 <code>Python为</code>例利用 <code>re.compile</code> 生成正则表达式，然后利用 <code>re.search</code> 进行判断，实现如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.<span class="built_in">compile</span>(</span><br><span class="line">    <span class="string">r"(%27)|(\')|(\-\-)|(%23)|(#)|"</span>  <span class="comment"># Regex for detection of SQL meta-characters</span></span><br><span class="line">    <span class="string">r"\w*((%27)|(\'))\s+((%6F)|o|(%4F))((%72)|r|(%52))\s*|"</span>  <span class="comment"># Modified regex for detection of SQL meta-characters eg: ' or 1 = 1' detect word 'or',</span></span><br><span class="line">    <span class="string">r"((%3D)|(=))[^\n]*((%27)|(\')|(\-\-)|(%3B)|(;))"</span>  <span class="comment"># Regex for typical SQL Injection attack eg: '= 1 --'</span></span><br><span class="line">    <span class="string">r"((%27)|(\'))union|"</span>  <span class="comment"># Regex for detecting SQL Injection with the UNION keyword</span></span><br><span class="line">    <span class="string">r"((%27)|(\'))select|"</span>  <span class="comment"># Regex for detecting SQL Injection with the UNION keyword</span></span><br><span class="line">    <span class="string">r"((%27)|(\'))insert|"</span>  <span class="comment"># Regex for detecting SQL Injection with the UNION keyword</span></span><br><span class="line">    <span class="string">r"((%27)|(\'))update|"</span>  <span class="comment"># Regex for detecting SQL Injection with the UNION keyword</span></span><br><span class="line">    <span class="string">r"((%27)|(\'))drop"</span>,  <span class="comment"># Regex for detecting SQL Injection with the UNION keyword</span></span><br><span class="line">    re.IGNORECASE,</span><br><span class="line">)</span><br><span class="line">r = pattern.search(<span class="string">"' OR 1 -- -"</span>)</span><br><span class="line"><span class="keyword">if</span> r:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure><p>也有一种直接简单粗暴的方法，那就是直接过滤关键字：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pattern = <span class="string">r"\b(exec|insert|union|select|drop|grant|alter|delete|update|count|chr|mid|truncate|delclare)\b|(;)"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>常用 <code>SQL</code> 注入 <code>payload</code></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 通用SQL注入payload</span></span><br><span class="line"></span><br><span class="line"><span class="string">' or '</span></span><br><span class="line"><span class="comment">-- or # </span></span><br><span class="line"><span class="string">' OR '</span><span class="number">1</span></span><br><span class="line"><span class="string">' OR 1 -- -</span></span><br><span class="line"><span class="string">OR "" = "</span></span><br><span class="line"><span class="string">" OR 1 = 1 -- -"</span></span><br><span class="line"><span class="string">'</span> <span class="keyword">OR</span> <span class="string">''</span> <span class="operator">=</span> <span class="string">'</span></span><br><span class="line"><span class="string">'</span><span class="operator">=</span><span class="string">'</span></span><br><span class="line"><span class="string">'</span><span class="keyword">LIKE</span><span class="string">'</span></span><br><span class="line"><span class="string">'</span><span class="operator">=</span><span class="number">0</span><span class="comment">--+</span></span><br><span class="line"><span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="string">' OR '</span>x<span class="string">'='</span>x</span><br><span class="line"><span class="string">' AND id IS NULL; --</span></span><br><span class="line"><span class="string">'''''''''''''</span><span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="string">'2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">--- 基于时间的payload</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,(select * from (select(sleep(10)))a)</span></span><br><span class="line"><span class="string">%2c(select%20*%20from%20(select(sleep(10)))a)</span></span><br><span class="line"><span class="string">'</span>;WAITFOR DELAY <span class="string">'0:0:30'</span><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- 基于通用错误的payload</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br><span class="line"><span class="keyword">OR</span> x<span class="operator">=</span>y#</span><br><span class="line"><span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span><span class="comment">-- </span></span><br><span class="line"><span class="keyword">OR</span> x<span class="operator">=</span>x<span class="comment">-- </span></span><br><span class="line"><span class="keyword">OR</span> <span class="number">3409</span><span class="operator">=</span><span class="number">3409</span> <span class="keyword">AND</span> (<span class="string">'pytW'</span> <span class="keyword">LIKE</span> <span class="string">'pytW</span></span><br><span class="line"><span class="string">HAVING 1=1</span></span><br><span class="line"><span class="string">HAVING 1=1#</span></span><br><span class="line"><span class="string">HAVING 1=0-- </span></span><br><span class="line"><span class="string">AND 1=1-- </span></span><br><span class="line"><span class="string">AND 1=1 AND '</span><span class="operator">%</span><span class="string">'='</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> <span class="number">1</span><span class="operator">=</span><span class="number">0</span><span class="comment">--</span></span><br><span class="line"><span class="operator">%</span><span class="string">' AND 8310=8310 AND '</span><span class="operator">%</span><span class="string">'='</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- 基于认证的payload</span></span><br><span class="line"></span><br><span class="line"><span class="string">' or ''-'</span></span><br><span class="line"><span class="string">' or '' '</span></span><br><span class="line"><span class="string">' or ''&amp;'</span></span><br><span class="line"><span class="string">' or ''^'</span></span><br><span class="line"><span class="string">' or ''*'</span></span><br><span class="line"><span class="keyword">or</span> <span class="literal">true</span><span class="comment">--</span></span><br><span class="line">" or true--</span><br><span class="line">' or true--</span><br><span class="line">") <span class="keyword">or</span> <span class="literal">true</span><span class="comment">--</span></span><br><span class="line"><span class="string">') or true--</span></span><br><span class="line"><span class="string">admin'</span>) <span class="keyword">or</span> (<span class="string">'1'</span><span class="operator">=</span><span class="string">'1'</span><span class="comment">--</span></span><br><span class="line">admin<span class="string">') or ('</span><span class="number">1</span><span class="string">'='</span><span class="number">1</span><span class="string">'#</span></span><br><span class="line"><span class="string">admin'</span>) <span class="keyword">or</span> (<span class="string">'1'</span><span class="operator">=</span><span class="string">'1'</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- Order by和UNION的payload</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span><span class="string">' ORDER BY 1--+</span></span><br><span class="line"><span class="string">1'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2</span><span class="comment">--+</span></span><br><span class="line"><span class="number">1</span><span class="string">' ORDER BY 3--+</span></span><br><span class="line"><span class="string">1'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span>,<span class="number">2</span><span class="comment">--+</span></span><br><span class="line"><span class="number">1</span><span class="string">' ORDER BY 1,2,3--+</span></span><br><span class="line"><span class="string">1'</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="number">1</span>,<span class="number">2</span>,<span class="comment">--+</span></span><br><span class="line"><span class="number">1</span><span class="string">' GROUP BY 1,2,3--+</span></span><br><span class="line"><span class="string">'</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> columnnames <span class="keyword">having</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">--</span></span><br><span class="line"><span class="number">-1</span><span class="string">' UNION SELECT 1,2,3--+</span></span><br><span class="line"><span class="string">'</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="built_in">sum</span>(columnname ) <span class="keyword">from</span> tablename <span class="comment">--</span></span><br><span class="line"><span class="number">-1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">INTO</span> @,@</span><br><span class="line"><span class="number">-1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">INTO</span> @,@,@</span><br><span class="line"><span class="number">1</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Users) <span class="operator">=</span> <span class="number">1</span> </span><br><span class="line"><span class="string">' AND MID(VERSION(),1,1) = '</span><span class="number">5</span><span class="string">';</span></span><br><span class="line"><span class="string">'</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="built_in">min</span>(name) <span class="keyword">from</span> sysobjects <span class="keyword">where</span> xtype <span class="operator">=</span> <span class="string">'U'</span> <span class="keyword">and</span> name <span class="operator">&gt;</span> <span class="string">'.'</span>) <span class="comment">--</span></span><br></pre></td></tr></tbody></table></figure><hr><p><a href="https://github.com/logstash-plugins/logstash-patterns-core/blob/main/patterns/ecs-v1/grok-patterns">常用正则表达式参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 调用 Webservice 并解析 Xml</title>
      <link href="/2021/python-webservice/"/>
      <url>/2021/python-webservice/</url>
      
        <content type="html"><![CDATA[<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><code>Python</code> 中的 <code>Webservice</code> 客户端 <code>suds</code> 常用的有两个包</p><p><a href="https://github.com/cackharot/suds-py3">suds-py3</a></p><p><a href="https://github.com/suds-community/suds">suds</a></p><p>目前选择的是 <code>suds</code>，安装</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install suds</span><br></pre></td></tr></tbody></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>具体实现如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> suds.client <span class="keyword">import</span> Client</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://172.19.7.7/PSIGW/PeopleSoftServiceListeningConnector/PSFT_HR/CST_INF_SERVICE.13.wsdl"</span></span><br><span class="line">client = Client(url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(client)</span><br><span class="line"></span><br><span class="line">result = client.service.CST_INF_JOBCODE_OUT(</span><br><span class="line">    BATCH_NUM=<span class="string">"xxx"</span>,</span><br><span class="line">    IFAC_CODE=<span class="string">"xxx"</span>,</span><br><span class="line">    REQUEST_DATA=<span class="string">"&lt;![CDATA[&lt;ROOT&gt;&lt;CST_PAGENUMBER&gt;1&lt;/CST_PAGENUMBER&gt;&lt;CST_PAGESIZE&gt;300&lt;/CST_PAGESIZE&gt;&lt;RUN_TYPE&gt;ALL&lt;/RUN_TYPE&gt;&lt;TOKENID&gt;xxx&lt;/TOKENID&gt;&lt;SYSTEM&gt;xxx&lt;/SYSTEM&gt;&lt;/ROOT&gt;]]&gt;"</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">root = ET.fromstring(result[<span class="string">"RETURN_DATA"</span>])</span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> root:</span><br><span class="line">    <span class="built_in">print</span>(child[<span class="number">2</span>].text)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>先看看看 <code>client</code> 中的方法</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Suds ( https://fedorahosted.org/suds/ )  version: 1.0.0</span><br><span class="line"></span><br><span class="line">Service ( CST_INF_SERVICE ) tns="http://xmlns.oracle.com/Enterprise/Tools/services/CST_INF_SERVICE.13"</span><br><span class="line">   Prefixes (2)</span><br><span class="line">      ns0 = "http://xmlns.oracle.com/Enterprise/Tools/schemas/CST_INF_REQ.V1"</span><br><span class="line">      ns1 = "http://xmlns.oracle.com/Enterprise/Tools/schemas/CST_INF_RSP.V1"</span><br><span class="line">   Ports (1):</span><br><span class="line">      (CST_INF_SERVICE_Port)</span><br><span class="line">         Methods (1):</span><br><span class="line">            CST_INF_JOBCODE_OUT(xs:string BATCH_NUM, xs:string IFAC_CODE, xs:string REQUEST_DATA)</span><br><span class="line">         Types (2):</span><br><span class="line">            ns0:REQUEST</span><br><span class="line">            ns1:RESPONSE</span><br></pre></td></tr></tbody></table></figure><p>如上所示 <code>CST_INF_JOBCODE_OUT</code> 方法有 <code>3</code> 个参数而且都是 <code>string</code> 类型，这里重点说说 <code>REQUEST_DATA</code>，原生请求 <code>Xml</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:erp</span>=<span class="string">"http://xmlns.oracle.com/Enterprise/Tools/schemas/CST_INF_R</span></span></span><br><span class="line"><span class="string"><span class="tag">EQ.V1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Header</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">erp:REQUEST</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">erp:BATCH_NUM</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">erp:BATCH_NUM</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">erp:IFAC_CODE</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">erp:IFAC_CODE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">erp:REQUEST_DATA</span>&gt;</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line">&lt;ROOT&gt;</span><br><span class="line">&lt;CST_PAGENUMBER&gt;100&lt;/CST_PAGENUMBER&gt;</span><br><span class="line">&lt;CST_PAGESIZE&gt;1&lt;/CST_PAGESIZE&gt;</span><br><span class="line">&lt;RUN_TYPE&gt;ALL&lt;/RUN_TYPE&gt;</span><br><span class="line">&lt;TOKENID&gt;xxx&lt;/TOKENID&gt;</span><br><span class="line">&lt;SYSTEM&gt;xxx&lt;/SYSTEM&gt;</span><br><span class="line">&lt;/ROOT&gt;]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">erp:REQUEST_DATA</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">erp:REQUEST</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>对于 <code>REQUEST_DATA</code> 中的 <code>CDATA</code> 包裹部分应该选择原样传入</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">&lt;ROOT&gt;</span><br><span class="line">&lt;CST_PAGENUMBER&gt;100&lt;/CST_PAGENUMBER&gt;</span><br><span class="line">&lt;CST_PAGESIZE&gt;1&lt;/CST_PAGESIZE&gt;</span><br><span class="line">&lt;RUN_TYPE&gt;ALL&lt;/RUN_TYPE&gt;</span><br><span class="line">&lt;TOKENID&gt;xxx&lt;/TOKENID&gt;</span><br><span class="line">&lt;SYSTEM&gt;xxx&lt;/SYSTEM&gt;</span><br><span class="line">&lt;/ROOT&gt;]]&gt;</span><br></pre></td></tr></tbody></table></figure><p>最后是对 <code>xml</code> 的解析可以利用 <code>ElementTree</code>，具体可以参考</p><p><a href="https://docs.python.org/3/library/xml.etree.elementtree.html#module-xml.etree.ElementTree">ElementTree</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Webservice </tag>
            
            <tag> Xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 或者 NodeJs 中将 Bytes 格式化成 KB、MB、GB、TB</title>
      <link href="/2021/vue-nodejs-bytes-format/"/>
      <url>/2021/vue-nodejs-bytes-format/</url>
      
        <content type="html"><![CDATA[<p>自适应将 <code>Bytes</code> 格式化为可读性更高的单位</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">formatSize(bytes) {</span><br><span class="line">    const sizes = ["Bytes", "KB", "MB", "GB", "TB"];</span><br><span class="line">    if (bytes == 0) {</span><br><span class="line">    return bytes + " " + sizes[0];</span><br><span class="line">    }</span><br><span class="line">    let flag = "";</span><br><span class="line">    if (bytes &lt; 0) {</span><br><span class="line">    bytes = Math.abs(bytes);</span><br><span class="line">    flag = "-";</span><br><span class="line">    }</span><br><span class="line">    const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));</span><br><span class="line">    if (i == 0) {</span><br><span class="line">    return bytes + " " + sizes[i];</span><br><span class="line">    }</span><br><span class="line">    return flag + (bytes / Math.pow(1024, i)).toFixed(4) + " " + sizes[i];</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>效果图如下：<br><img src="https://img.jakehu.me/2021/12/01/FJyKB0.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Orm Sqlalchemy Core Use Example</title>
      <link href="/2021/python-sqlalchemy/"/>
      <url>/2021/python-sqlalchemy/</url>
      
        <content type="html"><![CDATA[<h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select(func.count())</span><br><span class="line">.select_from(table)</span><br><span class="line">.where(</span><br><span class="line">    table.c.status == <span class="number">1</span>,</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h4 id="count-if"><a href="#count-if" class="headerlink" title="count if"></a>count if</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func.COUNT(</span><br><span class="line">    func.IF(</span><br><span class="line">        user.c.province == <span class="string">"重庆"</span>,</span><br><span class="line">        <span class="literal">True</span>,</span><br><span class="line">        <span class="literal">None</span>,</span><br><span class="line">    )</span><br><span class="line">).label(<span class="string">"province"</span>),</span><br></pre></td></tr></tbody></table></figure><h4 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select([<span class="string">"*"</span>])</span><br><span class="line">.select_from(table1)</span><br><span class="line">.where(</span><br><span class="line">    table1.c.status == <span class="number">1</span>,</span><br><span class="line">    exists()</span><br><span class="line">    .where(</span><br><span class="line">        table1.c.<span class="built_in">id</span> == table2.c.table1_id,</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>如果要使用 <code>not exists</code> 只需要在 <code>exists()</code> 前加上 <code>~</code> 变成 <code>~exists()</code></p><h4 id="动态条件"><a href="#动态条件" class="headerlink" title="动态条件"></a>动态条件</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conditions = []</span><br><span class="line">conditions.append(user.c.sex == <span class="number">1</span>)</span><br><span class="line">select([<span class="string">"*"</span>]).select_from(user).where(and_(*conditions))</span><br></pre></td></tr></tbody></table></figure><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user.update()</span><br><span class="line">.where(</span><br><span class="line">    user.c.<span class="built_in">id</span> == <span class="number">1</span></span><br><span class="line">)</span><br><span class="line">.values(score=user.c.score + <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="order-by"><a href="#order-by" class="headerlink" title="order_by"></a>order_by</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  升序</span></span><br><span class="line">.order_by(user.c.<span class="built_in">id</span>)</span><br><span class="line"><span class="comment">#  降序</span></span><br><span class="line">.order_by(user.c.<span class="built_in">id</span>.desc())</span><br></pre></td></tr></tbody></table></figure><hr><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> sqlalchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode 中 Go 开发环境搭建与设置</title>
      <link href="/2021/vscode-go-settings/"/>
      <url>/2021/vscode-go-settings/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p><code>GO</code> 的环境安装可以使用 <code>brew</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install go</span><br></pre></td></tr></tbody></table></figure><p>接下来只需要配置一下对应的环境信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=/Users/jakehu/Documents/go</span><br><span class="line">export GOBIN=$GOPATH/bin</span><br><span class="line">export PATH=$PATH:$GOBIN</span><br><span class="line">export GOPROXY=https://goproxy.cn,direct</span><br><span class="line">export GO111MODULE=on</span><br></pre></td></tr></tbody></table></figure><h3 id="VSCODE"><a href="#VSCODE" class="headerlink" title="VSCODE"></a>VSCODE</h3><p>利用 <code>goimports</code> 格式化 <code>import</code> 排序使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install -v golang.org/x/tools/cmd/goimports@latest</span><br></pre></td></tr></tbody></table></figure><p>利用 <code>golangci-lint</code> 做静态代码检查</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install -v github.com/golangci/golangci-lint/cmd/golangci-lint@latest</span><br></pre></td></tr></tbody></table></figure><p><code>vscode</code> 配置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// GO</span><br><span class="line">"go.toolsManagement.autoUpdate": true,</span><br><span class="line">"go.useLanguageServer": true,</span><br><span class="line">"gopls": {</span><br><span class="line">    "experimentalWorkspaceModule": true,</span><br><span class="line">},</span><br><span class="line">"go.autocompleteUnimportedPackages": true,</span><br><span class="line">"go.formatTool": "gofmt",</span><br><span class="line">"go.lintTool": "golangci-lint",</span><br><span class="line">"go.lintOnSave": "workspace",</span><br><span class="line">// GO</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Curator 来管理 Elasticsearch 的索引</title>
      <link href="/2021/elasticsearch-curator/"/>
      <url>/2021/elasticsearch-curator/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Curator</code> 是 <code>Elastic</code> 官方发布的一个管理 <code>Elasticsearch</code> 索引的工具，可以完成许多索引生命周期的管理工作，例如清理创建时间超过 7 天的索引、每天定时备份指定的索引、定时将索引从热节点迁移至冷节点等等。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="PIP"><a href="#PIP" class="headerlink" title="PIP"></a>PIP</h4><p>如果没有安装 <code>pip</code> 先安装 <code>pip</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></tbody></table></figure><p>利用阿里的 <code>epel</code> 源</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install python-pip</span><br></pre></td></tr></tbody></table></figure><h4 id="Curator"><a href="#Curator" class="headerlink" title="Curator"></a>Curator</h4><p><code>Curator</code> 本身是基于 <code>Python</code> 实现，所以可以使用 <code>pip</code> 安装</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install elasticsearch-curator</span><br></pre></td></tr></tbody></table></figure><p>升级</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U elasticsearch-curator</span><br></pre></td></tr></tbody></table></figure><p>查看版本</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># curator --version</span><br><span class="line">curator, version 5.8.4</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>新建配置文件 <code>curator.yml</code>，具体格式可以参考官方默认的配置文件</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">client:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9200</span></span><br><span class="line">  <span class="attr">url_prefix:</span></span><br><span class="line">  <span class="attr">use_ssl:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">certificate:</span></span><br><span class="line">  <span class="attr">client_cert:</span></span><br><span class="line">  <span class="attr">client_key:</span></span><br><span class="line">  <span class="attr">ssl_no_validate:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">elastic</span> <span class="comment"># elastic用户</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">password</span> <span class="comment"># elastic密码</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">master_only:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">loglevel:</span> <span class="string">INFO</span></span><br><span class="line">  <span class="attr">logfile:</span></span><br><span class="line">  <span class="attr">logformat:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">blacklist:</span> [<span class="string">'elasticsearch'</span>, <span class="string">'urllib3'</span>]</span><br></pre></td></tr></tbody></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>新建执行动作文件 <code>delete_indices.yml</code>，比如我执行<code>删除7天前的索引</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">actions:</span></span><br><span class="line">  <span class="attr">1:</span></span><br><span class="line">    <span class="attr">action:</span> <span class="string">delete_indices</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">"delete the index 7 days ago"</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">filtertype:</span> <span class="string">pattern</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">prefix</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">filebeat-nginx-error-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">filtertype:</span> <span class="string">age</span></span><br><span class="line">      <span class="attr">source:</span> <span class="string">name</span></span><br><span class="line">      <span class="attr">direction:</span> <span class="string">older</span></span><br><span class="line">      <span class="attr">timestring:</span> <span class="string">'%Y.%m.%d'</span></span><br><span class="line">      <span class="attr">unit:</span> <span class="string">days</span></span><br><span class="line">      <span class="attr">unit_count:</span> <span class="number">7</span></span><br></pre></td></tr></tbody></table></figure><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curator --config /etc/curator/config.yml /etc/curator/action/delete_indices.yml</span><br></pre></td></tr></tbody></table></figure><p>执行结果如下：<br><img src="https://img.jakehu.me/2021/11/05/9LIl87.png"></p><hr><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Curator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode 中用 flake8 和 black 来检测和格式化 Python</title>
      <link href="/2021/vscode-python-flake8-black/"/>
      <url>/2021/vscode-python-flake8-black/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>全局安装 <code>flake8</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/python3 -m pip install -U flake8</span><br></pre></td></tr></tbody></table></figure><p>全局安装 <code>black</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/python3 -m pip install -U black</span><br></pre></td></tr></tbody></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"python.languageServer"</span><span class="punctuation">:</span> <span class="string">"Pylance"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"python.linting.flake8Enabled"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"python.formatting.provider"</span><span class="punctuation">:</span> <span class="string">"black"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"python.linting.pylintEnabled"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 关闭pylint工具</span></span><br><span class="line"><span class="attr">"python.formatting.blackPath"</span><span class="punctuation">:</span> <span class="string">"/usr/local/bin/black"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"python.linting.flake8Path"</span><span class="punctuation">:</span> <span class="string">"/usr/local/bin/flake8"</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure><p><code>flake8</code> 和 <code>black</code> 可选参数：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"python.linting.flake8Args"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">"--max-line-length=248"</span><span class="punctuation">,</span> <span class="comment">// 设置单行最长字符限制</span></span><br><span class="line">    <span class="string">"--ignore=W191, E266, W504"</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"python.formatting.blackArgs"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">"--line-length=128"</span> <span class="comment">// 格式化时单行最长长度</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure><hr><p>排序 <code>import</code> 语句</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/python3 -m pip install -U isort</span><br></pre></td></tr></tbody></table></figure><p>配置</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"[python]"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"editor.codeActionsOnSave"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"source.organizeImports"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure><p>也可以配置用于全局</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"editor.codeActionsOnSave": {</span><br><span class="line">    "source.organizeImports": true</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flake8 </tag>
            
            <tag> black </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 将 UTC 时间转换为北京时间</title>
      <link href="/2021/python-utc-to-beijing/"/>
      <url>/2021/python-utc-to-beijing/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>在一些软件中如 <code>ES</code>，时间格式都是 <code>UTC</code> 时间格式。记一记如何将 <code>UTC</code> 时间格式转换为本地<code>北京时间</code>格式。</p><p>原理很简单：<code>将UTC转化为datetime时间格式-&gt;将转化的datetime时间加8小时-&gt;格式化为想要的格式</code></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">UTC转北京时间</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">utc_format</span>(<span class="params">utc_time, utc_time_format=<span class="string">'%Y-%m-%dT%H:%M:%S.000Z'</span></span>):</span><br><span class="line">    utc_datetime = datetime.datetime.strptime(utc_time, utc_time_format)</span><br><span class="line">    local_datetime = utc_datetime + datetime.timedelta(hours=<span class="number">8</span>)</span><br><span class="line">    local_time_format = <span class="string">"%Y-%m-%d %H:%M:%S"</span></span><br><span class="line">    local_time = local_datetime.strftime(local_time_format)</span><br><span class="line">    <span class="keyword">return</span> local_time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(utc_format(utc_time=<span class="string">"2021-10-26T09:34:31.000Z"</span>))</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Time </tag>
            
            <tag> UTC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单机版 Elasticsearch&amp;Kibana&amp;Filebeat 安装与配置</title>
      <link href="/2021/install-efk/"/>
      <url>/2021/install-efk/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>ELK</code> 对于日志管理来说毫无疑问是最好的选择，但有的时候觉得 <code>Logstash</code> 比较的笨重，相反 <code>Filebeat</code> 也不失为一个好的选择。</p><p>此次安装的版本为 <code>7.15.0</code></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>对于几个组件的安装都是非常的简单，可以直接利用官方打好的包就好</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html">Elasticsearch 安装文档</a></p><p><a href="https://www.elastic.co/guide/en/kibana/current/install.html">Kibana 安装文档</a></p><p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-installation-configuration.html">Filebeat 安装文档</a></p><p>安装时建议通过 RPM 包安装，这样能固定版本减少一些兼容性问题如：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-7.15.0-x86_64.rpm</span><br><span class="line">shasum -a 512 kibana-7.15.0-x86_64.rpm</span><br><span class="line">sudo rpm --install kibana-7.15.0-x86_64.rpm</span><br></pre></td></tr></tbody></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4><p>如果只是单机版的话 <code>Elasticsearch</code> 配置倒是不用过多修改，接下来配置一下 <code>Elasticsearch</code> 开启密码访问就可以了</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-passwords.html">设置密码文档</a></p><p><a href="http://www.chaiguanxin.com/articles/2019/06/10/1560143174513.html">安全配置参考</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.enabled: true # 普通的安全设置</span><br></pre></td></tr></tbody></table></figure><p>最后再通过下面命令设置各个用户的密码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto</span><br></pre></td></tr></tbody></table></figure><p>上面命令会设置各个内置用户的密码</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html">内置用户文档</a></p><h4 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h4><p><code>Kibana</code> 只需要配置如下几个项目即可</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601 # 端口</span><br><span class="line">server.host: "0.0.0.0" # 允许远程连接</span><br><span class="line">elasticsearch.hosts: ["http://localhost:9200"] # ES的地址</span><br><span class="line">elasticsearch.username: "kibana_system" # 上面设置的用户和密码</span><br><span class="line">elasticsearch.password: "password"</span><br><span class="line">i18n.locale: "zh-CN" # 页面支持中文</span><br></pre></td></tr></tbody></table></figure><h4 id="Filebeat"><a href="#Filebeat" class="headerlink" title="Filebeat"></a>Filebeat</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">output.elasticsearch:</span><br><span class="line">  # Array of hosts to connect to.</span><br><span class="line">  hosts: ["localhost:9200"]</span><br><span class="line">  username: "elastic"</span><br><span class="line">  password: "elastic"</span><br><span class="line">  index: "filebeat-%{+yyyy.MM.dd}"</span><br><span class="line">  indices:</span><br><span class="line">    - index: "filebeat-nginx-access-%{+yyyy.MM.dd}"</span><br><span class="line">      when.equals:</span><br><span class="line">        fields.type: nginx.access</span><br><span class="line">    - index: "filebeat-nginx-error-%{+yyyy.MM.dd}"</span><br><span class="line">      when.equals:</span><br><span class="line">        fields.type: nginx.error</span><br><span class="line"></span><br><span class="line">setup.ilm.enabled: false # 索引生命周期</span><br><span class="line">setup.ilm.check_exists: false</span><br><span class="line">setup.template.enabled: true # 索引模版</span><br><span class="line">setup.template.name: "filebeat"</span><br><span class="line">setup.template.pattern: "filebeat-*"</span><br></pre></td></tr></tbody></table></figure><p>对于 <code>Filebeat</code> 的设置，这里的 <code>username</code> 需要用 <code>elastic</code> 用户。如果用 <code>beats_system</code> 用户的话会提示 <code>403</code> 无权限。</p><p>具体可以参考：<a href="https://discuss.elastic.co/t/security-error-with-beats-system-account-and-filebeat-with-system-module/146822">Security error with beats_system account and Filebeat with system module</a></p><h4 id="Filebeat-Module"><a href="#Filebeat-Module" class="headerlink" title="Filebeat Module"></a>Filebeat Module</h4><p>以 <code>nginx</code> 为例打开 <code>nginx.access</code> 和 <code>nginx.error</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/filebeat/modules.d/nginx.yml</span><br><span class="line"></span><br><span class="line">  access:</span><br><span class="line">    enabled: true</span><br><span class="line">    var.paths: ["/var/log/nginx/access.log"]</span><br><span class="line">    input:</span><br><span class="line">      fields:</span><br><span class="line">        type: nginx.access</span><br><span class="line"></span><br><span class="line">  error:</span><br><span class="line">    enabled: true</span><br><span class="line">    var.paths: ["/var/log/nginx/error.log"]</span><br><span class="line">    input:</span><br><span class="line">      fields:</span><br><span class="line">        type: nginx.error</span><br></pre></td></tr></tbody></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>进入 <code>Kibana</code> 管理页面，新建索引<br><code>Management-&gt;Stack Management-&gt;索引模式-&gt;创建索引模式</code></p><h4 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h4><p>配置到<code>索引</code>时就已经可以在 <code>Kibana</code> 中看到有 <code>nginx</code> 默认的日志进来，但如果我们有自定义的日志格式，就需要用到 <code>Pipeline</code></p><p><code>Pipeline</code> 所存放的位置 <code>/usr/share/filebeat/module/nginx/access/ingest/pipeline.yml</code></p><p>也可通过开发工具查询 <code>GET _ingest/pipeline/filebeat-7.15.0-nginx-access-pipeline</code></p><p><a href="http://grokdebug.herokuapp.com/">Grok Debugger</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Kibana </tag>
            
            <tag> Filebeat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 分布式锁在 Python 中的客户端 Aioredlock</title>
      <link href="/2021/redis-distributed-lock/"/>
      <url>/2021/redis-distributed-lock/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近遇到一个需求，每 <code>60S</code> 刷新数据库数据到 <code>Redis</code> 缓存中，但应用又不止一个进程。此需求中对<code>原子性</code>并无太大的要求，只是如果每次只有一个进程执行，那么数据库的压力就会小很多。</p><p>于是想到用分布式锁来解决这个问题，最终选择了通过 <code>Redis</code> 来实现。</p><p>关于 <code>Redis</code> 实现分布式锁可以查看下面的文章:<br><a href="https://xiaomi-info.github.io/2019/12/17/redis-distributed-lock/">分布式锁的实现之 redis 篇</a></p><h4 id="Aioredlock"><a href="#Aioredlock" class="headerlink" title="Aioredlock"></a>Aioredlock</h4><p>在众多的官方推荐的分布式锁客户端中，我选择了 <code>Aioredlock</code></p><p><a href="https://redis.io/topics/distlock">Distributed locks with Redis</a></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">aioredlock</span>():</span><br><span class="line">    <span class="comment"># retry_count 重试次数，这里配置为1，杜绝进程重复去获取</span></span><br><span class="line">    lock_manager = Aioredlock([{<span class="string">'host'</span>: <span class="string">'localhost'</span>, <span class="string">'port'</span>: <span class="number">6379</span>, <span class="string">'db'</span>: <span class="number">1</span>}],retry_count=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每秒钟去检测锁的状态，如果锁被其他进程占用就跳过</span></span><br><span class="line">        <span class="comment"># lock_timeout 锁的时间为 65S，相当于进程拿到锁后最大65秒后释放</span></span><br><span class="line">        <span class="comment"># 业务逻辑执行 小于 65秒，业务逻辑执行完后当即释放锁</span></span><br><span class="line">        <span class="comment"># 每60秒执行一次 sleep 59s即可，因为检测已经sleep了1s</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">await</span> lock_manager.is_locked(<span class="string">"_ztsg_auto_generate_code"</span>):</span><br><span class="line">            <span class="comment">#logger.info('The resource is already acquired')</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> <span class="keyword">await</span> lock_manager.lock(<span class="string">"_ztsg_auto_generate_code"</span>, lock_timeout=<span class="number">65</span>) <span class="keyword">as</span> lock:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">assert</span> lock.valid <span class="keyword">is</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">assert</span> <span class="keyword">await</span> lock_manager.is_locked(<span class="string">"_ztsg_auto_generate_code"</span>) <span class="keyword">is</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 每60s钟运行一次任务</span></span><br><span class="line">                <span class="keyword">await</span> asyncio.sleep(<span class="number">59</span>)</span><br><span class="line"></span><br><span class="line">                logger.info(<span class="string">'Start Tick! The time is '</span>+<span class="built_in">str</span>(os.getpid())+<span class="string">': %s'</span> % datetime.now())</span><br><span class="line">                <span class="comment"># 业务代码</span></span><br><span class="line">                logger.info(<span class="string">'Stop Tick! The time is '</span>+<span class="built_in">str</span>(os.getpid())+<span class="string">': %s'</span> % datetime.now())</span><br><span class="line">        <span class="keyword">except</span> LockAcquiringError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'Something happened during normal operation. We just log it.'</span>)</span><br><span class="line">        <span class="keyword">except</span> LockError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'Something is really wrong and we prefer to raise the exception'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'Something else went wrong'</span>)</span><br></pre></td></tr></tbody></table></figure><p>通过上面代码就能实现，需求所要求</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Distributed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sanic 框架中 Tortoise Orm 时区设置</title>
      <link href="/2021/tortoise-orm-timezone/"/>
      <url>/2021/tortoise-orm-timezone/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>在使用 <code>Tortoise Orm</code> 的过程中发现数据库自动插入、更新的时间是 <code>UTC</code> 时区时间，通过官网文档发现可以在连接时对时区进行设置</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>通过连接配置来修改时区，默认情况下的连接配置</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">register_tortoise(</span><br><span class="line">    app, db_url=db_url, modules={<span class="string">"models"</span>: [<span class="string">"app.models"</span>]}, generate_schemas=<span class="literal">False</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>如果需要修改配置，则不能用 <code>db_url</code> 模式连接需改为 <code>config</code> 模式连接，配置如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">register_tortoise(</span><br><span class="line">    app,</span><br><span class="line">    config={</span><br><span class="line">        <span class="string">'connections'</span>: {</span><br><span class="line">            <span class="string">'default'</span>: db_url</span><br><span class="line">        },</span><br><span class="line">        <span class="string">'apps'</span>: {</span><br><span class="line">            <span class="string">'models'</span>: {</span><br><span class="line">                <span class="string">"models"</span>: [<span class="string">"app.models"</span>],</span><br><span class="line">                <span class="string">'default_connection'</span>: <span class="string">'default'</span>,</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"use_tz"</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">"timezone"</span>: <span class="string">"Asia/Shanghai"</span>,</span><br><span class="line">    },</span><br><span class="line">    generate_schemas=<span class="literal">False</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>通过以上配置就能将数据库时区设置为上海时区</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sanic </tag>
            
            <tag> Tortoise Orm </tag>
            
            <tag> Timezone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 实现 AES 对称加密</title>
      <link href="/2021/aes-cbc-ocb/"/>
      <url>/2021/aes-cbc-ocb/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>当原子系统很多 (非微服务)，而且各个原子系统之间需要相互调用，这时就需要保证两个系统之间的认证、以及数据加密。</p><p>这个时候就需要用到对称加解密了</p><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>对于如何选择合适的加密算法，可以参考一下下面这篇文章</p><p><a href="https://cn.waldorf-am-see.org/660267-how-to-choose-an-aes-TCMYWA">如何选择 AES 加密模式（CBC ECB CTR OCB CFB）？</a></p><p>最后我选择了两种方式分别来测试和实现 <code>CBC</code>、<code>OCB</code></p><p>另外 <code>pycrypto</code> 已经不再安全，建议使用 <code>pycryptodome</code>，它是 <code>pycrypto</code> 的分支，在安全性方面有较大提升。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodome</span><br></pre></td></tr></tbody></table></figure><h3 id="CBC"><a href="#CBC" class="headerlink" title="CBC"></a>CBC</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AesCbc</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="variable language_">self</span>.bs = AES.block_size</span><br><span class="line">        <span class="variable language_">self</span>.key = key</span><br><span class="line">        <span class="variable language_">self</span>.mode = AES.MODE_CBC</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, data</span>):</span><br><span class="line">        cipher = AES.new(<span class="variable language_">self</span>.key, <span class="variable language_">self</span>.mode)</span><br><span class="line">        ct_bytes = cipher.encrypt(pad(data, <span class="variable language_">self</span>.bs))</span><br><span class="line">        iv = b64encode(cipher.iv).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        ct = b64encode(ct_bytes).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">return</span> json.dumps({<span class="string">'iv'</span>: iv, <span class="string">'ciphertext'</span>: ct})</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, json_input</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            b64 = json.loads(json_input)</span><br><span class="line">            iv = b64decode(b64[<span class="string">'iv'</span>])</span><br><span class="line">            ct = b64decode(b64[<span class="string">'ciphertext'</span>])</span><br><span class="line">            cipher = AES.new(<span class="variable language_">self</span>.key, <span class="variable language_">self</span>.mode, iv)</span><br><span class="line">            plaintext = unpad(cipher.decrypt(ct), <span class="variable language_">self</span>.bs)</span><br><span class="line">            <span class="keyword">return</span> plaintext.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">except</span> (ValueError, KeyError) <span class="keyword">as</span> err:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Incorrect decryption "</span>, err)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    data = <span class="string">"需要加密的数据"</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    key = get_random_bytes(<span class="number">16</span>)  <span class="comment"># Bytes</span></span><br><span class="line"></span><br><span class="line">    aes_cipher = AesCbc(key)</span><br><span class="line"></span><br><span class="line">    encrypt_reuslt = aes_cipher.encrypt(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"密文: "</span>, encrypt_reuslt)</span><br><span class="line"></span><br><span class="line">    plaintext = aes_cipher.decrypt(encrypt_reuslt)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"原文: "</span>, plaintext)</span><br></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">密文:  {"iv": "K8xL41sI3UoXaeWohUuZEA==", "ciphertext": "fLGcOq43vTZc9x3HX8Q9Nv82cwVT6WNTj5mcpuPEckw="}</span><br><span class="line">原文:  需要加密的数据</span><br></pre></td></tr></tbody></table></figure><h3 id="OCB"><a href="#OCB" class="headerlink" title="OCB"></a>OCB</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AesOcb</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="variable language_">self</span>.bs = AES.block_size</span><br><span class="line">        <span class="variable language_">self</span>.key = key</span><br><span class="line">        <span class="variable language_">self</span>.mode = AES.MODE_OCB</span><br><span class="line">        <span class="variable language_">self</span>.json_k = [<span class="string">'nonce'</span>, <span class="string">'header'</span>, <span class="string">'ciphertext'</span>, <span class="string">'tag'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, header, data</span>):</span><br><span class="line">        header = header</span><br><span class="line">        cipher = AES.new(<span class="variable language_">self</span>.key, <span class="variable language_">self</span>.mode)</span><br><span class="line">        cipher.update(header)</span><br><span class="line">        ciphertext, tag = cipher.encrypt_and_digest(data)</span><br><span class="line">        json_v = [b64encode(x).decode(<span class="string">'utf-8'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [cipher.nonce, header, ciphertext, tag]]</span><br><span class="line">        <span class="keyword">return</span> json.dumps(<span class="built_in">dict</span>(<span class="built_in">zip</span>(<span class="variable language_">self</span>.json_k, json_v)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, json_input</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            b64 = json.loads(json_input)</span><br><span class="line">            jv = {k: b64decode(b64[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="variable language_">self</span>.json_k}</span><br><span class="line">            cipher = AES.new(<span class="variable language_">self</span>.key, <span class="variable language_">self</span>.mode, nonce=jv[<span class="string">'nonce'</span>])</span><br><span class="line">            cipher.update(jv[<span class="string">'header'</span>])</span><br><span class="line">            plaintext = cipher.decrypt_and_verify(jv[<span class="string">'ciphertext'</span>], jv[<span class="string">'tag'</span>])</span><br><span class="line">            <span class="keyword">return</span> plaintext.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">except</span> (ValueError, KeyError) <span class="keyword">as</span> err:</span><br><span class="line">            <span class="comment"># 解密错误</span></span><br><span class="line">            <span class="built_in">print</span>(err)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    data = <span class="string">"需要加密的数据"</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    key = get_random_bytes(<span class="number">16</span>)  <span class="comment"># Bytes</span></span><br><span class="line">    header = <span class="string">b'header'</span></span><br><span class="line"></span><br><span class="line">    aes_cipher = AesOcb(key)</span><br><span class="line"></span><br><span class="line">    encrypt_reuslt = aes_cipher.encrypt(header, data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"密文: "</span>, encrypt_reuslt)</span><br><span class="line"></span><br><span class="line">    plaintext = aes_cipher.decrypt(encrypt_reuslt)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"原文: "</span>, plaintext)</span><br></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">密文:  {"nonce": "9Wd6sA1QGSdjXHu1zACA", "header": "aGVhZGVy", "ciphertext": "tyaCFrLuriy6F3xJqs0CehNWe3g7", "tag": "IqDrP9zX00aZMRe7DuCRzQ=="}</span><br><span class="line">原文:  需要加密的数据</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sanic 实现简单的 API 接口签名认证</title>
      <link href="/2021/api-signature/"/>
      <url>/2021/api-signature/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>API 为什么需要设计签名验证？为了有一定的数据抓取防御能力。<br>需要考虑的点：</p><blockquote><p>请求参数是否已被篡改<br>请求来源是否合法<br>请求是否具有唯一性</p></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>参数签名方式：它要求客户端按照约定好的算法生成签名字符串，作为请求的一部分像接口请求，服务端验算签名即可知是否合法。</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">key = <span class="string">"xxx"</span> <span class="comment"># 密钥，由服务端颁发</span></span><br><span class="line"></span><br><span class="line">client = <span class="string">"local"</span> <span class="comment"># 客户端</span></span><br><span class="line">server = <span class="string">"kafka"</span> <span class="comment"># 服务端</span></span><br><span class="line">env = <span class="string">"test"</span> <span class="comment"># 环境</span></span><br><span class="line">timestamp = <span class="built_in">str</span>(time.time())[:<span class="number">10</span>] <span class="comment"># 时间</span></span><br><span class="line">sign_str = client+server+env+timestamp+key</span><br><span class="line">sign = hashlib.md5(sign_str.encode(encoding=<span class="string">'utf-8'</span>)).hexdigest() <span class="comment"># md5</span></span><br><span class="line"></span><br><span class="line">headers = <span class="built_in">dict</span>(client=client, server=server, env=env, timestamp=timestamp, sign=sign)</span><br><span class="line"></span><br><span class="line">r1 = requests.get(<span class="string">"https://www.xxx.com/hello"</span>, headers=headers)</span><br></pre></td></tr></tbody></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">"My Hello, world app"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">"/hello"</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line">      key = <span class="string">"xxx"</span>  <span class="comment"># 密钥</span></span><br><span class="line"></span><br><span class="line">      client = request.headers.get(<span class="string">"client"</span>)</span><br><span class="line">      server = request.headers.get(<span class="string">"server"</span>)</span><br><span class="line">      env = request.headers.get(<span class="string">"env"</span>)</span><br><span class="line">      timestamp = request.headers.get(<span class="string">"timestamp"</span>)</span><br><span class="line">      sign = request.headers.get(<span class="string">"sign"</span>)</span><br><span class="line"></span><br><span class="line">      _sign_str = client+server+env+timestamp+key</span><br><span class="line">      _sign = hashlib.md5(_sign_str.encode(encoding=<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> sign==_sign:</span><br><span class="line">            <span class="keyword">return</span> json(<span class="built_in">list</span>(request.headers.items()))</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">"验证失败"</span>)</span><br><span class="line">app.run(host=<span class="string">'0.0.0.0'</span>,debug=<span class="literal">True</span>,auto_reload=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> sign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探 Github Actions 推送 Docker 镜像到 Docker Hub</title>
      <link href="/2021/github-actions-push-docker-images/"/>
      <url>/2021/github-actions-push-docker-images/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>目前 <code>Docker Hub</code> 上普通用户已经不能自动构建了，于是想通过 <code>Github Actions</code> 来实现打包并推送到 <code>Docker Hub</code></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>第一步先在项目下建一个 <code>yml</code> 文件，路径：<code>.github/workflows/push2hub.yml</code></p><p>内容如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">name: Publish Docker image</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line">jobs:</span><br><span class="line">  push_to_registry:</span><br><span class="line">    name: Push Docker image to Docker Hub</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Check out the repo</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">      - name: Log in to Docker Hub</span><br><span class="line">        uses: docker/login-action@v1</span><br><span class="line">        with:</span><br><span class="line">          username: ${{ secrets.DOCKER_USERNAME }}</span><br><span class="line">          password: ${{ secrets.DOCKER_PASSWORD }}</span><br><span class="line">      - name: Push to Docker Hub</span><br><span class="line">        uses: docker/build-push-action@v2</span><br><span class="line">        with:</span><br><span class="line">          push: true</span><br><span class="line">          tags: jakehu/scripts:latest</span><br></pre></td></tr></tbody></table></figure><p>上面 <code>Yaml</code> 的功能是，在每一次推送到 <code>Master</code> 分支上的时候，就将项目推送到 <code>Docker Hub</code> 上的 <code>jakehu</code> 用户下的 <code>scripts</code> 仓库里的 <code>latest Tag</code> 上</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>第二步需要在 <code>github</code> 上设置 <code>DOCKER_USERNAME</code> 和 <code>DOCKER_PASSWORD</code> 两个变量<br><img src="https://img.jakehu.me/2021/09/01/UMJEbb.png" alt="UMJEbb"></p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>第三步只需要对 <code>Master</code> 分支进行推送即可，然后我们就能在 <code>Actions</code> 里面看到对应的流水线信息<br><img src="https://img.jakehu.me/2021/09/01/kCVfE8.png" alt="kCVfE8"></p><hr><p><a href="https://docs.github.com/cn/actions">Github Actions 文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 的替代品 Rocky Linux</title>
      <link href="/2021/centos-displacement/"/>
      <url>/2021/centos-displacement/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><code>CentOS 8</code> 今年开始已经停止维护了，难道就没有可以免费使用的 <code>RHEL</code> 了？</p><p>答案是否定的</p><h4 id="Rocky-Linux"><a href="#Rocky-Linux" class="headerlink" title="Rocky Linux"></a>Rocky Linux</h4><p><code>Rocky Linux</code> 是由 <code>CentOS</code> 项目的创始人 <code>Gregory Kurtzer</code> 领导构建的，他与原来的 <code>Centos</code> 一样位于 <code>RHEL</code> 下游。</p><p>如图所示：</p><p><img src="https://img.jakehu.me/2021/08/30/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png"></p><p>微软、谷歌、亚马逊等公有云都已经接入，希望国内的公有云也能尽快的接入</p><p><a href="https://rockylinux.org/zh-cn/">Rocky Linux 官网</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sanic 下最好用 ORM 之 databases </title>
      <link href="/2021/sanic-database/"/>
      <url>/2021/sanic-database/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>在使用 <code>Sanic</code> 的过程中对 <code>ORM</code> 的选择可谓是痛苦的，用过官方推荐的 <code>Tortoise ORM</code>，也用过 <code>SQLAlchemy</code></p><p>比起使用 <code>ORM</code> 我更喜欢原生 <code>SQL</code>，当我看见 <code>databases</code> 的时候我发现它满足了的我所有要求，支持异步驱动 <code>aiomysql</code>，支持原生 <code>SQL</code> 写法，还封装进了 <code>SQLAlchemy</code>，只要你想你也可以把 <code>databases</code> 当作 <code>SQLAlchemy</code> 使用</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装 <code>databases</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install databases</span><br></pre></td></tr></tbody></table></figure><p>安装数据库驱动</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install aiomysql</span><br></pre></td></tr></tbody></table></figure><p>在安装 <code>databases</code> 的时候会自动的安装 <code>SQLAlchemy</code> 目前已经支持 <code>1.4</code> 版本</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>利用监听器去控制数据库的连接和断开，并将句柄放入到应用上下文中 <code>app.ctx.db</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">./server.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> databases <span class="keyword">import</span> Database</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">'jakehu'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库</span></span><br><span class="line">database = Database(<span class="string">'mysql://localhost/example'</span>)</span><br><span class="line"><span class="comment"># 服务开启之前</span></span><br><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">"before_server_start"</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">startup_db</span>(<span class="params">app, loop</span>):</span><br><span class="line">    <span class="keyword">await</span> database.connect()</span><br><span class="line"><span class="comment"># 服务结束之后</span></span><br><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">"after_server_stop"</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">shutdown_db</span>(<span class="params">app, loop</span>):</span><br><span class="line">    <span class="keyword">await</span> database.disconnect()</span><br><span class="line">app.ctx.db = database</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">"/"</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">foo_handler</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">"Hello World!"</span>)</span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">'0.0.0.0'</span>, debug=<span class="literal">True</span>, auto_reload=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>最后看如何在函数中使用，利用应用上下文中的句柄进行操作，最后在利用<code>_mapping</code> 属性进行转换</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">"/"</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">foo_handler</span>(<span class="params">request</span>):</span><br><span class="line">    database= request.app.ctx.db</span><br><span class="line">    query = <span class="string">"SELECT * FROM table"</span></span><br><span class="line">    rows = <span class="keyword">await</span> database.fetch_all(query=query)</span><br><span class="line">    result = [<span class="built_in">dict</span>(row._mapping) <span class="keyword">for</span> row <span class="keyword">in</span> rows]</span><br><span class="line">    <span class="keyword">return</span> json(result)</span><br></pre></td></tr></tbody></table></figure><hr><p>关于如何将 <code>sqlalchemy.engine.row.Row</code> 转化为 <code>dict</code> 可以参考</p><p><a href="https://github.com/encode/databases/issues/375">示例</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag>  ORM </tag>
            
            <tag> Sanic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>像 npm 那样使用 pip 自动生成 requirements.txt 文件</title>
      <link href="/2021/pip-install-package/"/>
      <url>/2021/pip-install-package/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>希望能像 <code>npm install</code> 那样自动的将安装的包加入到 <code>requirements.txt</code> 文件中，但是同时又不希望把子依赖加入其中</p><p>虽然我们能通过 <code>pip freeze &gt; requirements.txt</code> 将依赖导出，但是这样导出的依赖，会把包的其他子依赖也导出，导致重新安装的时候总是提示包的版本不对</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>通过 <code>bash</code> 的 <code>alias</code> 或者函数来解决，在<code>.zshrc</code> 中添加以下函数</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> pip-install {</span><br><span class="line">    pip install <span class="variable">$1</span> &amp;&amp; pip freeze | grep -w <span class="string">"<span class="variable">${1}</span>="</span> &gt;&gt; requirements.txt</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip-install sanic</span><br></pre></td></tr></tbody></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> requirements.txt</span><br><span class="line">sanic==21.6.2</span><br></pre></td></tr></tbody></table></figure><p>从上面文件可以看出 <code>requirements.txt</code> 中并没有 <code>sanic</code> 的其他子依赖，至于 <code>sanic</code> 的其他子依赖会在安装 <code>sanic</code> 时自动安装就不用管它了</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>最后我们在其他地方使用项目的时候只需要安装 <code>requirements.txt</code> 中的包就行了</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 下 Lua 框架 Lapis 运行环境搭建</title>
      <link href="/2021/Lapis-Install/"/>
      <url>/2021/Lapis-Install/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在 <code>Mac</code> 系统中，如果利用 <code>Homebrew</code> 安装 <code>LuaRocks</code>，默认只会安装最新版本的 <code>Lua</code>。鉴于 <code>lapis</code> 与 <code>luajit</code> 都只兼容 <code>lua@5.1</code> 版本，所以就需要自行安装 <code>lua@5.1</code>。</p><h4 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h4><p>第一步：利用 <code>Homebrew</code> 安装 <code>luarocks</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install luarocks</span><br></pre></td></tr></tbody></table></figure><p>第二步：利用 <code>Homebrew</code> 安装 <code>lua@5.1</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install lua@5.1</span><br></pre></td></tr></tbody></table></figure><p>第三步：查看 <code>lua@5.1</code> 的安装目录</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew info lua@5.1</span><br><span class="line"></span><br><span class="line">/usr/local/Cellar/lua@5.1/5.1.5_8</span><br></pre></td></tr></tbody></table></figure><p>第四步：利用参数 <code>--lua-dir</code> 以及 <code>--lua-version</code> 使用 <code>5.1</code> 版本，两个参数可以同时设置，也可以只设置一个</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">luarocks --lua-dir=/usr/local/Cellar/lua@5.1/5.1.5_8 --lua-version=5.1 install lapis</span><br><span class="line"></span><br><span class="line">luarocks --lua-version=5.1 install lapis</span><br></pre></td></tr></tbody></table></figure><p>通过上面设置就能兼容不同版本的 <code>Lua</code></p><h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><p>安装 <code>luaossl</code> 时出现以下错误：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Installing https://luarocks.org/luaossl-20200709-0.src.rock</span><br><span class="line"></span><br><span class="line">Error: Failed installing dependency: https://luarocks.org/luaossl-20200709-0.src.rock - Could not find header file for CRYPTO</span><br><span class="line">  No file openssl/crypto.h in /usr/local/include</span><br><span class="line">  No file openssl/crypto.h in /usr/include</span><br><span class="line">  No file openssl/crypto.h in /include</span><br><span class="line">You may have to install CRYPTO in your system and/or pass CRYPTO_DIR or CRYPTO_INCDIR to the luarocks command.</span><br><span class="line">Example: luarocks install luaossl CRYPTO_DIR=/usr/local</span><br></pre></td></tr></tbody></table></figure><p>解决如下：<br>设置 <code>OPENSSL_DIR</code> 以及 <code>CRYPTO_DIR</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">luarocks --lua-version=5.1 OPENSSL_DIR=/usr/local/Cellar/openssl@1.1/1.1.1k/ CRYPTO_DIR=/usr/local/Cellar/openssl@1.1/1.1.1k/ install lapis</span><br></pre></td></tr></tbody></table></figure><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>配置 <code>LUA_PATH</code> 和 <code>LUA_CPATH</code> 以及 <code>PATH</code>，在终端中输入</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">luarocks --lua-version=5.1 path --bin</span><br></pre></td></tr></tbody></table></figure><p>取得 <code>LUA_PATH</code> 和 <code>LUA_CPATH</code> 写入到 <code>~/.zshrc</code> 中</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LUA_PATH=''</span><br><span class="line">export LUA_CPATH=''</span><br></pre></td></tr></tbody></table></figure><p>最后再将<code>.luarocks/bin</code> 导入 <code>PATH</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH="$HOME/.luarocks/bin:$PATH"</span><br></pre></td></tr></tbody></table></figure><hr><p>如果不做上面操作就会出现下面错误</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua entry thread aborted: runtime error: content_by_lua(nginx.conf.compiled:22):2: module 'lapis' not found:</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LuaRocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 之 Sanic 实现上传文件功能</title>
      <link href="/2021/sanic-upload/"/>
      <url>/2021/sanic-upload/</url>
      
        <content type="html"><![CDATA[<p> <code>Python</code> 框架 <code>Sanic</code> 实现文件上传功能</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>判断允许上传的类型，同时利用 <code>UUID</code> 生成新的文件名存储到对应的文件夹中</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/upload"</span>, methods=[<span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">request</span>):</span><br><span class="line">    allow_type = [<span class="string">'.jpg'</span>, <span class="string">'.png'</span>, <span class="string">'.gif'</span>] <span class="comment"># 允许上传的类型</span></span><br><span class="line">    file = request.files.get(<span class="string">'file'</span>)</span><br><span class="line">    <span class="built_in">type</span> = os.path.splitext(file.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>[<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> allow_type:</span><br><span class="line">        <span class="keyword">return</span> json({<span class="string">"code"</span>: -<span class="number">1</span>, <span class="string">"msg"</span>: <span class="string">"只允许上传.jpg.png.gif类型文件"</span>})</span><br><span class="line"></span><br><span class="line">    name = <span class="built_in">str</span>(uuid4())+<span class="built_in">type</span>[<span class="number">1</span>]</span><br><span class="line">    path = <span class="string">"/user/data/web/upload"</span> <span class="comment"># 这里注意path是绝对路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(path+<span class="string">"/"</span>+name, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">await</span> f.write(file.body)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> json({<span class="string">"code"</span>: <span class="number">0</span>, <span class="string">"msg"</span>: <span class="string">"上传成功"</span>, <span class="string">"data"</span>: {</span><br><span class="line">        <span class="string">"name"</span>: name,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"/upload/"</span>+name</span><br><span class="line">    }})</span><br></pre></td></tr></tbody></table></figure><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p>可以利用 <code>Postman</code> 上传测试，需要注意的是 <code>header</code> 头中的 <code>Content-Type:multipart/form-data; </code>必须设置<br><img src="https://img.jakehu.me/2021/08/11/5Pk0TS.png"></p><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>需要访问上传过后的文件，这就需要用到 <code>Sanic</code> 静态文件代理</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">"/user/data/web/upload"</span> <span class="comment"># 这里注意path是绝对路径</span></span><br><span class="line">app.static(<span class="string">"/upload"</span>, path)</span><br></pre></td></tr></tbody></table></figure><p>最后访问路径为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.域名.com/upload/uuid.png</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pyhton </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sanic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>果然，和 Next 相配的还是 Utterances</title>
      <link href="/2021/next-utterances/"/>
      <url>/2021/next-utterances/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>从用 <code>Hexo</code> 和 <code>Next</code> 开始都不知道换了多少次评论系统了，最开始的多说，后来的 <code>Valine</code>，再后来的 <code>Disqus</code>。换来换去最后还是决定用 <code>utterances</code> 吧</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="utterances"><a href="#utterances" class="headerlink" title="utterances"></a>utterances</h4><p>第一步只需要访问：<code>https://github.com/apps/utterances</code> 进行安装<br><img src="https://img.jakehu.me/2021/08/04/fmY9GN.png"><br>第二步选择存放 <code>issues</code> 的项目，可以跟 <code>Github pages</code> 放在同一个项目<br><img src="https://img.jakehu.me/2021/08/04/xx3Lxj.png"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">utterances:</span><br><span class="line">  enable: true</span><br><span class="line">  repo: jakehu/jakehu.github.io</span><br><span class="line">  issue_term: pathname</span><br><span class="line">  theme: github-light</span><br></pre></td></tr></tbody></table></figure><p>最后只需要在主题配置文件中进行如上配置即可</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记如何在 Tortoise Orm 中使用 Mysql 之 Json 查询</title>
      <link href="/2021/tortoise-orm-json/"/>
      <url>/2021/tortoise-orm-json/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>在设计数据库的时候有一个 <code>IP</code> 字段，是用来存多个 <code>IP</code> 地址。于是设计成了 <code>Json</code> 类型，记一下如何在 <code>Tortoise Orm</code> 中使用 <code>JSON_CONTAINS</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tortoise <span class="keyword">import</span> Model, fields</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ag_ip_group</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="built_in">id</span> = fields.IntField(pk=<span class="literal">True</span>)</span><br><span class="line">    uuid = fields.UUIDField(default=uuid4)</span><br><span class="line">    name = fields.CharField(<span class="number">64</span>)</span><br><span class="line">    ip = fields.JSONField()</span><br><span class="line">    remark = fields.CharField(<span class="number">64</span>,default=<span class="string">'_'</span>)</span><br><span class="line">    status = fields.IntField(default=<span class="number">1</span>)</span><br><span class="line">    created_time = fields.DatetimeField(null=<span class="literal">True</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_time = fields.DatetimeField(null=<span class="literal">True</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(<span class="variable language_">self</span>.<span class="built_in">id</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tortoise.functions <span class="keyword">import</span> Function</span><br><span class="line"><span class="keyword">from</span> pypika <span class="keyword">import</span> CustomFunction</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JsonContains</span>(<span class="title class_ inherited__">Function</span>):</span><br><span class="line">    database_func = CustomFunction(<span class="string">"JSON_CONTAINS"</span>, [<span class="string">"field"</span>, <span class="string">"value"</span>])</span><br></pre></td></tr></tbody></table></figure><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">filter</span> = {}</span><br><span class="line">annotate = {}</span><br><span class="line">annotate[<span class="string">'json_len'</span>] = JsonContains(<span class="string">'ip'</span>, <span class="string">'"'</span>+row[<span class="string">'ip'</span>]+<span class="string">'"'</span>)</span><br><span class="line"><span class="built_in">filter</span>[<span class="string">'json_len__gt'</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="variable language_">self</span>.model.<span class="built_in">all</span>().annotate(**annotate).<span class="built_in">filter</span>(**<span class="built_in">filter</span>).limit(limit).offset(offset).values()</span><br></pre></td></tr></tbody></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>其他的 <code>Json</code> 函数也可自行扩展，这里我们再扩展一种 <code>Json</code> 模糊查询，即：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> json_extract(field, <span class="string">'$'</span>) <span class="keyword">LIKE</span> <span class="string">'%value%'</span></span><br></pre></td></tr></tbody></table></figure><p>实现如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JsonExtract</span>(<span class="title class_ inherited__">Function</span>):</span><br><span class="line">    database_func = CustomFunction(<span class="string">"JSON_EXTRACT"</span>, [<span class="string">"field"</span>, <span class="string">'value'</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">filter</span> = {}</span><br><span class="line">annotate = {}</span><br><span class="line">annotate[<span class="string">'json_str'</span>] = JsonExtract(<span class="string">'ip'</span>,<span class="string">'$'</span>)</span><br><span class="line"><span class="built_in">filter</span>[<span class="string">'json_str__icontains'</span>] = row[<span class="string">'ip'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="variable language_">self</span>.model.<span class="built_in">all</span>().annotate(**annotate).<span class="built_in">filter</span>(**<span class="built_in">filter</span>).limit(limit).offset(offset).values()</span><br></pre></td></tr></tbody></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在 <code>JSONField</code> 类型字段中使用 <code>encoder</code> 更改 <code>json.dumps()</code> 参数 <code>ensure_ascii=False</code>，实现也非常的简单</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">field = fields.JSONField(encoder=<span class="keyword">lambda</span> x: json.dumps(x,ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></tbody></table></figure><hr><p>锦城虽云乐，不如早还家</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tortoise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 pyOpenSSL 解析证书的正确姿势</title>
      <link href="/2021/pyOpenSSL-parse/"/>
      <url>/2021/pyOpenSSL-parse/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>需求很简单，通过域名证书的私钥分析证书的 <code>DNS</code> 域名以及有效期</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>分析后决定用 <code>pyOpenSSL</code> 来实现，具体代码如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> OpenSSL <span class="keyword">import</span> crypto</span><br><span class="line"><span class="keyword">from</span> dateutil <span class="keyword">import</span> parser</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ssl</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, certificate</span>):</span><br><span class="line">        res = {</span><br><span class="line">            <span class="string">"domain"</span>: []</span><br><span class="line">        }</span><br><span class="line">        cert = crypto.load_certificate(crypto.FILETYPE_PEM, certificate)</span><br><span class="line">        <span class="comment"># 有效期</span></span><br><span class="line">        datetime_struct_start = parser.parse(cert.get_notBefore().decode(<span class="string">"UTF-8"</span>))</span><br><span class="line">        datetime_struct_end = parser.parse(cert.get_notAfter().decode(<span class="string">"UTF-8"</span>))</span><br><span class="line">        res[<span class="string">'start_time'</span>] = datetime_struct_start.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">        res[<span class="string">'end_time'</span>] = datetime_struct_end.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">        <span class="comment"># 扩展</span></span><br><span class="line">        count = cert.get_extension_count()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">            crt = cert.get_extension(i)</span><br><span class="line">            name = <span class="built_in">str</span>(crt.get_short_name(), encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">            <span class="keyword">if</span> name == <span class="string">"subjectAltName"</span>:</span><br><span class="line">                _<span class="built_in">list</span> = <span class="built_in">str</span>(crt).split(<span class="string">','</span>)</span><br><span class="line">                _it = <span class="built_in">iter</span>(_<span class="built_in">list</span>)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> _it:</span><br><span class="line">                    res[<span class="string">"domain"</span>].append(x.strip().replace(<span class="string">"DNS:"</span>, <span class="string">""</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    _certificate=<span class="string">"""证书私钥"""</span></span><br><span class="line">    ssl = Ssl()</span><br><span class="line">    <span class="built_in">print</span>(ssl.parse(_certificate))</span><br><span class="line">    <span class="comment"># {'domain': ['*.jakehu.me', 'jakehu.me'], 'start_time': '2021-07-12 18:01:16', 'end_time': '2021-10-10 18:01:15'}</span></span><br></pre></td></tr></tbody></table></figure><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>通过 <code>get_subject()</code> 和 <code>get_issuer()</code> 获取证书的其他信息</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">subject = cert.get_subject()</span><br><span class="line">issuer = cert.get_issuer()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"证书版本:"</span>, cert.get_version() + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"证书序列号:"</span>, <span class="built_in">hex</span>(cert.get_serial_number()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"证书中使用的签名算法:"</span>, cert.get_signature_algorithm().decode(<span class="string">"UTF-8"</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"颁发者:"</span>, issuer.commonName)</span><br><span class="line">datetime_struct = parser.parse(cert.get_notBefore().decode(<span class="string">"UTF-8"</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"有效期从:"</span>, datetime_struct.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>))</span><br><span class="line">datetime_struct= parser.parse(cert.get_notAfter().decode(<span class="string">"UTF-8"</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"到:"</span>, datetime_struct.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"证书是否已经过期:"</span>, cert.has_expired())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"公钥长度"</span>, cert.get_pubkey().bits())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"公钥:\n"</span>, crypto.dump_publickey(crypto.FILETYPE_PEM, cert.get_pubkey()).decode(<span class="string">"utf-8"</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"主体信息:"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"CN:通用名称  OU:机构单元名称"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"O:机构名  L:地理位置"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"S:州/省名  C:国名"</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> issuer.get_components():</span><br><span class="line">    <span class="built_in">print</span>(item[<span class="number">0</span>].decode(<span class="string">"utf-8"</span>), <span class="string">"  ——  "</span>, item[<span class="number">1</span>].decode(<span class="string">"utf-8"</span>))</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 框架 Sanic 应用上下文的使用</title>
      <link href="/2021/sanic-ctx/"/>
      <url>/2021/sanic-ctx/</url>
      
        <content type="html"><![CDATA[<h4 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h4><p>初次接触 <code>Sanic</code> 框架，在使用的过程中，并没有在文档中发现如何使用应用上下文</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>通过 <code>issues</code> 咨询后记录如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">'jakehu'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用上下文</span></span><br><span class="line">app.ctx.db = <span class="string">"msyql://..."</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">"/"</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 使用应用上下文</span></span><br><span class="line">    <span class="built_in">print</span>(request.app.ctx)</span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">"Hello, world."</span>)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>,auto_reload=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><p><a href="https://github.com/sanic-org/sanic/issues/2152">参考</a></p><hr><p>题外话：<br>申明全局的 Json 序列化函数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> orjson <span class="keyword">import</span> dumps</span><br><span class="line">app = Sanic(<span class="string">'jakehu'</span>, dumps=dumps)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> sanic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew 完全卸载软件 And 依赖包</title>
      <link href="/2021/homebrew-uninstall/"/>
      <url>/2021/homebrew-uninstall/</url>
      
        <content type="html"><![CDATA[<h4 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h4><p>鉴于 <code>brew uninstall</code> 只会卸载软件包本身而不会卸载其依赖包，所以我们用 <code>homebrew-rmtree</code> 来解决完全卸载</p><p><a href="https://github.com/beeftornado/homebrew-rmtree">homebrew-rmtree</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>brew tap beeftornado/rmtree</code></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew rmtree pyenv-virtualenv</span><br><span class="line">brew cleanup</span><br></pre></td></tr></tbody></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">brew rmtree pyenv-virtualenv</span><br><span class="line">==&gt; Examining installed formulae required by pyenv-virtualenv...</span><br><span class="line"> |  3 / 5</span><br><span class="line"></span><br><span class="line">Can safely be removed</span><br><span class="line">----------------------</span><br><span class="line">pyenv-virtualenv</span><br><span class="line">pyenv</span><br><span class="line">autoconf</span><br><span class="line">pkg-config</span><br><span class="line"></span><br><span class="line">Proceed?[y/N]: y</span><br><span class="line">==&gt; Cleaning up packages safe to remove</span><br><span class="line"></span><br><span class="line">Uninstalling /usr/local/Cellar/pyenv-virtualenv/1.1.5... (22 files, 65.4KB)</span><br><span class="line">Uninstalling /usr/local/Cellar/pyenv/2.0.0... (756 files, 2.6MB)</span><br><span class="line">Removing: /usr/local/Cellar/autoconf/2.69... (67 files, 3.0MB)</span><br><span class="line">Uninstalling /usr/local/Cellar/autoconf/2.71... (71 files, 3.2MB)</span><br><span class="line">Uninstalling /usr/local/Cellar/pkg-config/0.29.2_3... (11 files, 623.7KB)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Homebrew </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 多版本与虚拟环境管理之 pyenv</title>
      <link href="/2021/pyenv/"/>
      <url>/2021/pyenv/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><code>pyenv</code> 是 <code>Python</code> 版本管理工具。<code>pyenv</code> 可以改变全局的 <code>Python</code> 版本，在系统中安装多个版本 <code>Python</code>，设置目录级别的 <code>Python</code> 版本，还能创建和管理 <code>virtual python environments</code></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>利用 <code>pyenv-installer</code> 安装</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://pyenv.run | bash</span><br></pre></td></tr></tbody></table></figure><p>安装后会自动安装如下插件<br><code>pyenv-doctor pyenv-installer pyenv-update pyenv-virtualenv pyenv-which-ext python-build</code><br>在 <code>~/.zshrc</code> 中添加如下配置</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PYENV_ROOT="$HOME/.pyenv"</span><br><span class="line">export PATH="$PYENV_ROOT/bin:$PATH"</span><br><span class="line">eval "$(pyenv init --path)"</span><br></pre></td></tr></tbody></table></figure><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看可以安装的包和版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyenv install -l</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装3.9.5</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyenv install 3.9.5</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建可执行文件的shims</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyenv <span class="built_in">rehash</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已安装的版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyenv versions</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置全局的Python版本，版本号写入 ~/.pyenv/version</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyenv global 3.9.5</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置本地的Python版本，版本号写入前目录下的 .python-version</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyenv <span class="built_in">local</span> 3.9.5</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载python版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyenv uninstall {版本号}</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有虚拟环境</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyenv virtualenvs</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个3.9.5版本的虚拟环境</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyenv virtualenv 3.9.5 V395</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活虚拟环境</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyenv activate V395</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭虚拟环境</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyenv deactivate V395</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除虚拟环境</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyenv uninstall V395</span></span><br></pre></td></tr></tbody></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>比如我们现在有一个场景，为 <code>sanic</code> 项目创建一个虚拟环境<br><strong>第一步：</strong><br>我们需要安装需要的 <code>Python</code> 版本比如 <code>3.9.5</code><br><code>pyenv install 3.9.5</code><br><strong>第二步：</strong><br>创建一个 3.9.5 版本的虚拟环境<br><code>pyenv virtualenv 3.9.5 sanic</code><br><strong>第三步：</strong><br>去到 <code>sanic</code> 项目目录<br><code>pyenv local sanic</code><br><strong>第四步</strong><br>取消设定<br><code>pyenv local --unset</code><br><strong>第五步</strong><br>导出 <code>requirements.txt</code><br><code>pip freeze &gt; requirements.txt</code></p><hr><p>到这里就可以在 <code>sanic</code> 项目下愉快的玩耍了</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>试一试，MySQL 计算相邻两行某列差值</title>
      <link href="/2021/mysql-adjoin-diff/"/>
      <url>/2021/mysql-adjoin-diff/</url>
      
        <content type="html"><![CDATA[<h4 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h4><p>当我们需要统计累积量的时候就需要计算<code>同一业务</code>以及<code>相邻</code>两行的<code>差值</code></p><h4 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h4><p>接下来我们模拟一个业务，就是统计每天数据表的行数增加量。首先我们需要每天将当天表的数据行数写入到数据库</p><p>表结构如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `table_logs` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `table_name` <span class="type">char</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'_'</span> COMMENT <span class="string">'table_name'</span>,</span><br><span class="line">  `row_num` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">'行数'</span>,</span><br><span class="line">  `created_at` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">current_timestamp</span>() COMMENT <span class="string">'创建时间'</span>,</span><br><span class="line">  `updated_at` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">current_timestamp</span>() <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">current_timestamp</span>(),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `uuid` (`uuid`),</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></tbody></table></figure><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>方法：<code>t1.rownum = t2.rownum - 1</code></p><p>代码：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        (<span class="variable">@rownum</span> :<span class="operator">=</span> <span class="variable">@rownum</span> <span class="operator">+</span> <span class="number">1</span>) <span class="keyword">AS</span> rownum,</span><br><span class="line">        `id`,</span><br><span class="line">        `table_name`,</span><br><span class="line">        `row_num`</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        table_logs,</span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="variable">@rownum</span> :<span class="operator">=</span> <span class="number">0</span>) t</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">       `table_name` <span class="keyword">desc</span>, `id` <span class="keyword">desc</span></span><br><span class="line">  ) <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        (<span class="variable">@INDEX</span> :<span class="operator">=</span> <span class="variable">@INDEX</span> <span class="operator">+</span> <span class="number">1</span>) <span class="keyword">AS</span> rownum,</span><br><span class="line">        `id`,</span><br><span class="line">        `table_name`,</span><br><span class="line">        `row_num`</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        table_logs,</span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="variable">@rownum</span> :<span class="operator">=</span> <span class="number">0</span>) t</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">       `table_name` <span class="keyword">desc</span>, `id` <span class="keyword">desc</span></span><br><span class="line"> ) <span class="keyword">as</span> t2 <span class="keyword">on</span> t1.rownum <span class="operator">=</span> t2.rownum <span class="operator">-</span> <span class="number">1</span> <span class="keyword">and</span> t1.table_name <span class="operator">=</span> t2.table_name</span><br></pre></td></tr></tbody></table></figure><hr><p>最后只需要将 <code>t1.row_num-t2.row_num</code> 就可以实现我们的需求</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 之 Json 序列化报错 XXX is not JSON serializable</title>
      <link href="/2021/python-serializable/"/>
      <url>/2021/python-serializable/</url>
      
        <content type="html"><![CDATA[<h4 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h4><p>在 <code>Python</code> 中使用 <code>json.dumps</code> 时出现 <code>xxx is not JSON serializable</code></p><h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Object of type Decimal is not JSON serializable</span><br></pre></td></tr></tbody></table></figure><h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Object of type datetime is not JSON serializable</span><br></pre></td></tr></tbody></table></figure><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line">import decimal</span><br><span class="line"></span><br><span class="line">class JSONEncoder(json.JSONEncoder):</span><br><span class="line">    def default(self, obj):</span><br><span class="line">        if isinstance(obj, decimal.Decimal):</span><br><span class="line">            return float(obj)</span><br><span class="line">        if isinstance(obj, datetime.datetime):</span><br><span class="line">            return obj.strftime('%Y-%m-%d %H:%M:%S')</span><br><span class="line">        if isinstance(obj, date):</span><br><span class="line">            return obj.strftime("%Y-%m-%d")</span><br><span class="line">        return json.JSONEncoder.default(self, obj)</span><br><span class="line">      </span><br><span class="line">json.dumps(data, cls=JSONEncoder)</span><br></pre></td></tr></tbody></table></figure><hr><p><code>JSONEncoder</code> 中的类型可以扩展，加上自己需要的类型即可</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Element 之 Table 多选翻页以及清空选择</title>
      <link href="/2021/element-table-selection/"/>
      <url>/2021/element-table-selection/</url>
      
        <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>在 <code>Vue</code> 中需要对 <code>Table</code> 数据进行多选，且翻页时需要对前一页选中进行保留</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag"><span class="attr">:data</span>=<span class="string">"data"</span> <span class="attr">border</span> <span class="attr">highlight-current-row</span> </span></span><br><span class="line"><span class="tag">@<span class="attr">selection-change</span>=<span class="string">"handleSelectionChange"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:row-key</span>=<span class="string">"getRowKeys"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">ref</span>=<span class="string">"selectionTable"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">"selection"</span> <span class="attr">:reserve-selection</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当选择时调用</span></span><br><span class="line"><span class="title function_">handleSelectionChange</span>(<span class="params">val</span>) {</span><br><span class="line">    <span class="comment">// 业务处理</span></span><br><span class="line">},</span><br><span class="line"><span class="title function_">getRowKeys</span>(<span class="params">row</span>) {</span><br><span class="line">    <span class="keyword">return</span> row.<span class="property">id</span>; <span class="comment">// 重点是id不能重复</span></span><br><span class="line">},</span><br><span class="line"><span class="comment">// 清除所选，视情况在所需要的地方调用即可</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">selectionTable</span>.<span class="title function_">clearSelection</span>();</span><br></pre></td></tr></tbody></table></figure><hr><p>重点是<code>:row-key</code> 不能重复，也就是 <code>getRowKeys</code> 中的 <code>ID</code> 不能重复</p>]]></content>
      
      
      
        <tags>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Element 之 Table 一键展开与一键折叠</title>
      <link href="/2021/element-table/"/>
      <url>/2021/element-table/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>业务需求，在 <code>Vue</code> 表格中需要是实现一件展开与一键折叠</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"handleExpand"</span>&gt;</span>{{expandText}}<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">ref</span>=<span class="string">"multipleTable"</span> <span class="attr">:data</span>=<span class="string">"data"</span> <span class="attr">border</span> <span class="attr">highlight-current-row</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">isExpand</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">expandText</span>:<span class="string">"一键展开"</span>,</span><br><span class="line">        };</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">methods</span>: {</span><br><span class="line">        <span class="title function_">handleExpand</span>(<span class="params"></span>) {</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isExpand</span> = !<span class="variable language_">this</span>.<span class="property">isExpand</span></span><br><span class="line">            <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> {</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">forArr</span>(<span class="variable language_">this</span>.<span class="property">data</span>, <span class="variable language_">this</span>.<span class="property">isExpand</span>)</span><br><span class="line">            })</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isExpand</span> === <span class="literal">true</span>) {</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">expandText</span> = <span class="string">'一键折叠'</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isExpand</span> === <span class="literal">false</span>) {</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">expandText</span> = <span class="string">'一键展开'</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="title function_">forArr</span>(<span class="params">arr, isExpand</span>) {</span><br><span class="line">            arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">i</span> =&gt;</span> {</span><br><span class="line">                <span class="comment">// 用于可展开表格与树形表格，切换某一行的展开状态，如果使用了第二个参数，则是设置这一行展开与否（expanded 为 true 则展开）</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">multipleTable</span>.<span class="title function_">toggleRowExpansion</span>(i, isExpand)</span><br><span class="line">                <span class="keyword">if</span> (i.<span class="property">children</span>) {</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">forArr</span>(i.<span class="property">children</span>, isExpand)</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        },</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img.jakehu.me/2021/04/27/68KLN2.png"><br><img src="https://img.jakehu.me/2021/04/27/fGU2Av.png"></p><hr><p>在 <code>Vue</code> 中通过 <code>Key</code> 值的改变进行新的渲染，如<code>:key="变量名"</code> 通过修改变量的值可以重新渲染组件</p>]]></content>
      
      
      
        <tags>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些常用的 Linux 或 Shell 命令或其他配置</title>
      <link href="/2021/Linux-shell-setting/"/>
      <url>/2021/Linux-shell-setting/</url>
      
        <content type="html"><![CDATA[<h3 id="grep过滤注释行和空白行"><a href="#grep过滤注释行和空白行" class="headerlink" title="grep过滤注释行和空白行"></a>grep 过滤注释行和空白行</h3><p><code>cat /etc/kibana/kibana.yml | grep "^\s*[^# \t].*$"</code></p><h3 id="grep查看非系统进程"><a href="#grep查看非系统进程" class="headerlink" title="grep查看非系统进程"></a>grep 查看非系统进程</h3><p><code>ps -ef | grep -v ]$</code></p><h3 id="Bash脚本错误处理"><a href="#Bash脚本错误处理" class="headerlink" title="Bash脚本错误处理"></a>Bash 脚本错误处理</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 写法一</span><br><span class="line">set -euxo pipefail</span><br><span class="line"></span><br><span class="line"># 写法二</span><br><span class="line">set -eux</span><br><span class="line">set -o pipefail</span><br></pre></td></tr></tbody></table></figure><p><a href="http://www.ruanyifeng.com/blog/2017/11/bash-set.html">参考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用群晖自带的 Nginx 做反向代理</title>
      <link href="/2021/synology-nginx/"/>
      <url>/2021/synology-nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p><code>bitwarden_rs</code> 一直是安装在群晖上的 <code>Docker</code> 中的，对外访问也是通过群晖<code>应用门户程序-&gt;反向代理</code>反向代理加路由器端口转发</p><p>但是有一个问题，就是群晖 <code>UI</code> 界面的反代没有办法编辑配置，也就没有办法利用 <code>bitwarden_rs</code> 的 <code>WebSocket</code> 自动推送更新</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>想到的解决方案有两个，第一是通过 <code>Docker</code> 再装一个 <code>Nginx</code> 来做反代，第二是通过群晖自身的 <code>Nginx</code> 来做反代；最后选择了通过自身 <code>Nginx</code> 来做反代</p><h4 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx 配置</h4><p><code>/usr/syno/etc/certificate/system/default/</code> 为群晖<code>安全性-&gt;证书</code>上传的默认证书的存储位置</p><p><code>8888、3012</code> 端口为 <code>bitwarden_rs</code> 的 <code>80、3012</code> 映射到群晖对应的端口</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    listen [::]:443 ssl http2;</span><br><span class="line">    server_name xxx.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /usr/syno/etc/certificate/system/default/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /usr/syno/etc/certificate/system/default/privkey.pem;</span><br><span class="line"></span><br><span class="line">    #ssl_session_cache   shared:SSL:50m;</span><br><span class="line">    ssl_session_timeout 4h;</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">    if ($scheme = http) {</span><br><span class="line">        return 301 https://$host$request_uri;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location / {</span><br><span class="line">        proxy_pass http://127.0.0.1:8888;</span><br><span class="line">        proxy_set_header Host $host:$server_port;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_redirect http:// https://;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    # bw WebSockets</span><br><span class="line">    location /notifications/hub {</span><br><span class="line">        proxy_pass http://127.0.0.1:3012;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection "upgrade";</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    # bw WebSockets</span><br><span class="line">    location /notifications/hub/negotiate {</span><br><span class="line">        proxy_pass http://127.0.0.1:8888;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    error_page 403 404 500 502 503 504 @error_page;</span><br><span class="line"></span><br><span class="line">    location @error_page {</span><br><span class="line">        root /usr/syno/share/nginx;</span><br><span class="line">        rewrite (.*) /error.html break;</span><br><span class="line">        allow all;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>将配置文件链接到 <code>/etc/nginx/sites-enabled/</code><br><code>ln -s /volume1/docker/nginx/xxx.com.conf /etc/nginx/sites-enabled/</code></p><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><p>最后只需要重启 <code>Nginx</code> 即可<br><code>sudo synoservicecfg --restart nginx</code></p><hr><p>题外话：</p><p>利用第三方 FFMPEG 解码器让群晖的 Video Station 完美支持 DTS、EAC3、TrueHD</p><p><a href="https://wp.gxnas.com/7561.html">参考 01</a><br><a href="https://www.itxiaoniao.net/archives/393/">参考 02</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> bitwarden </tag>
            
            <tag> synology </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SmartGit 之 20 版本以后破解方法</title>
      <link href="/2021/smartgit/"/>
      <url>/2021/smartgit/</url>
      
        <content type="html"><![CDATA[<p>这里指的破解之法为无限期使用 <code>30</code> 天试用期</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>卸载重装</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>对于 Mac 系统删除以下两个文件即可</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/Library/Preferences/SmartGit/20.2/preferences.yml</span><br><span class="line">~/Library/Preferences/SmartGit/20.2/license</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> smartgit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommandLineTools xcrun: error</title>
      <link href="/2021/xcrun-error/"/>
      <url>/2021/xcrun-error/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>每次 <code>Mac</code> 大的版本更新后 <code>Git</code> 都用不了</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ git</span><br><span class="line">xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</span><br></pre></td></tr></tbody></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>前往官网下载新的 <code>Command_Line_Tools_for_Xcode</code> 安装即可</p><p><a href="https://developer.apple.com/download/more/">下载地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ModuleNotFoundError: No module named &#39;Crypto&#39;</title>
      <link href="/2021/module-crypto/"/>
      <url>/2021/module-crypto/</url>
      
        <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Cipher import PKCS1_v1_5</span><br><span class="line">from Crypto.PublicKey import RSA</span><br></pre></td></tr></tbody></table></figure><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/Users/jakehu/Documents/Web/python-usability-cli/app.py", line 13, in &lt;module&gt;</span><br><span class="line">    from libs import cmdb, esutil, mysqlutil, redisutil, sendmsg</span><br><span class="line">  File "/Users/jakehu/Documents/Web/python-usability-cli/libs/sendmsg.py", line 14, in &lt;module&gt;</span><br><span class="line">    from Crypto.Cipher import PKCS1_v1_5</span><br><span class="line">ModuleNotFoundError: No module named 'Crypto'</span><br></pre></td></tr></tbody></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 uninstall crypto</span><br><span class="line">pip3 uninstall pycrypto</span><br><span class="line">pip3 install pycrypto</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 之 Requests 参数格式</title>
      <link href="/2021/requests-data/"/>
      <url>/2021/requests-data/</url>
      
        <content type="html"><![CDATA[<h3 id="x-www-form-urlencoded"><a href="#x-www-form-urlencoded" class="headerlink" title="x-www-form-urlencoded"></a>x-www-form-urlencoded</h3><p>当 <code>requests</code> 的 <code>content-typ</code> 为 <code>"content-type": "application/x-www-form-urlencoded; charset=UTF-8",</code> 时请求参数当如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = requests.post(</span><br><span class="line">    url,</span><br><span class="line">    headers=headers,</span><br><span class="line">    data=data</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>当 <code>requests</code> 的 <code>content-typ</code> 为 <code>"Content-Type": "application/json;charset=UTF-8",</code> 时请求参数当如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = requests.post(</span><br><span class="line">    url,</span><br><span class="line">    headers=headers,</span><br><span class="line">    data=json.dumps(data)</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><hr><p><code>x-www-form-urlencoded</code> 时应该为一个字典，<code>json</code> 时应该为一个 <code>json</code> 字符串</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在群晖上利用 VMM 玩转旁路由之 LEDE</title>
      <link href="/2021/synology-lede-after/"/>
      <url>/2021/synology-lede-after/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p><code>19</code> 年的时候准备用群晖来做软路由，由于双网卡配置失败遂放弃</p><p><a href="https://www.jakehu.me/2019/synology-lede/">在群晖上利用 Virtual Machine Manager 玩转软路由之 LEDE</a></p><p>因为把 <code>AC86U</code> 和 <code>AC66UB1</code> 都刷回了官方固件 <code>386</code>，所以就需要一个旁路由。既然单网卡的群晖做不了软路由，那就用来做旁路有吧</p><h3 id="LEDE"><a href="#LEDE" class="headerlink" title="LEDE"></a>LEDE</h3><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h4><p>在 <code>K</code> 站下载硬盘镜像后上传至 <code>VMM</code></p><p>镜像下载地址：<a href="https://fw.koolcenter.com/LEDE_X64_fw867/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BD%AC%E7%9B%98%E6%88%96PE%E4%B8%8B%E5%86%99%E7%9B%98%E4%B8%93%E7%94%A8/">koolcenter.com</a></p><p>找到名为 <code>openwrt-koolshare-mod-v2.36-r14941-67f6fa0a30-x86-64-generic-squashfs-combined.vmdk</code> 的虚拟机磁盘，下载后上传至 <code>VMM</code><br><img src="https://img.jakehu.me/2021/01/27/mImYwQ.png"></p><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><p>网络这里我们直接使用 <code>Default VM Network</code> 即可</p><h4 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h4><h5 id="导入虚拟机"><a href="#导入虚拟机" class="headerlink" title="导入虚拟机"></a>导入虚拟机</h5><p>通过之前下载的虚拟机磁盘导入虚拟机<br><img src="https://img.jakehu.me/2021/01/27/UFdqGu.png"><br><img src="https://img.jakehu.me/2021/01/27/ZtgZZ4.png"><br><img src="https://img.jakehu.me/2021/01/27/dvRr37.png"></p><h5 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h5><p><img src="https://img.jakehu.me/2021/01/27/33YymW.png"></p><h5 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h5><p><img src="https://img.jakehu.me/2021/01/27/H59XK8.png"></p><h5 id="开机-1"><a href="#开机-1" class="headerlink" title="开机"></a>开机</h5><p><img src="https://img.jakehu.me/2021/01/27/Mdnx9p.png"></p><h5 id="修改IP"><a href="#修改IP" class="headerlink" title="修改IP"></a>修改 IP</h5><p>通过 <code>VMM -&gt; 虚拟机 -&gt; 连接</code>进入虚拟机<br><img src="https://img.jakehu.me/2021/01/27/dfTcOk.png"><br>通过命令 <code>vi /etc/config/network</code> 来修改网络 IP 地址<br><img src="https://img.jakehu.me/2021/01/27/w5p9JD.png"><br>最后通过命令 <code>/etc/init.d/network restart</code> 来重启网络，或则 <code>reboot</code> 重启虚拟机</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>关于 <code>LEDE</code> 的配置可以看看下面这篇文章</p><p><a href="https://post.smzdm.com/p/apze08d7/">LEDE 配置</a></p><p>最后需要在路由器上修改路由器的网关和 <code>DNS</code><br><img src="https://img.jakehu.me/2021/01/27/PnFcOe.png"><br>到这里 <code>LEDE</code> 旁路由的配置就完成了</p>]]></content>
      
      
      
        <tags>
            
            <tag> lede </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么？ADGuard Home 客户端无法显示对应的设备？</title>
      <link href="/2021/adguardhome-client/"/>
      <url>/2021/adguardhome-client/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>由于我的 <code>ADGuard Home</code> 是安装在群晖的 <code>Docker</code> 中的，对外服务是在路由器上设置的 <code>DNS</code>，<code>DNS</code> 请求如下</p><p><code>client-&gt;路由器-&gt;群晖-&gt;Docker-&gt;ADGuard Home</code></p><p>所以 <code>ADGuard Home</code> 的客户端列表只是显示了群晖 <code>Docker</code> 的网关地 <code>172.17.0.1</code>，没有显示具体的客户端 <code>IP</code> 地址，导致有很多请求都不知道是从哪个客户端发起的</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>解决的办法就是将 <code>ADGuard Home</code> 所在的容器暴露到局域网中来，这就需要 <code>Docker</code> 的 <code>Macvlan</code> 网络实现方式</p><p>对于 <code>Docker</code> 的 <code>3</code> 种网络实现 <code>Host</code>、<code>Bridge</code>、<code>Macvlan</code> 可以参考这里</p><p><a href="https://cloud.tencent.com/developer/news/563351">参考文档</a></p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>开启 <code>Open vSwitch</code>，<code>Open vSwitch</code> 的作用是开启虚拟网络交换机，通过软件实现交换机的作用</p><p><code>控制面板-&gt;网络-&gt;网络界面-&gt;管理-&gt;Open vSwitch设置-&gt;启用Open vSwitch</code></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>创建 <code>Macvlan</code> 模式网络，<code>SSH</code> 到群晖上</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d macvlan --subnet=192.168.50.0/24 --gateway=192.168.50.1 --ip-range=192.168.50.100/31 -o parent=ovs_eth0 macvlan</span><br></pre></td></tr></tbody></table></figure><p><code>192.168.50.0/24</code> 是路由器中 <code>DHCP</code> 的网段</p><p><code>192.168.50.1</code> 是路由器管理 <code>IP</code></p><p><code>192.168.50.100/31</code> 是 <code>Docker</code> 可用 IP，此段为 <code>100</code>、<code>101</code> 可用</p><p><code>ovs_eth0</code> 是群晖的网卡名称，可用 <code>ip addr</code> 查看</p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>将 <code>ADGuard Home</code> 容器分配到 <code>Macvlan</code> 网络下</p><p><code>Docker-&gt;网络-&gt;macvlan-&gt;管理-&gt;新增</code></p><p>当然你也可以选择通过 Docker 命令的模式来创建容器指定网络</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --network macvlan --ip=192.168.50.50 --name nginx nginx</span><br></pre></td></tr></tbody></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>本来是 <code>Bridge</code> 下的一个 <code>Frp</code> 容器提供穿透服务，由于 <code>Macvlan</code> 下容器无法与宿主机通信，所以 <code>ADGuard Home</code> 管理平台也就无法穿透出外网</p><p>解决方案就是将 <code>ADGuard Home</code> 容器同时加入 <code>Bridge</code> 和 <code>Macvlan</code> 网络下，<code>Bridge</code> 映射端口到宿主机进行穿透，而 <code>Macvlan</code> 下的 <code>IP</code> 用来提供 <code>DNS</code> 服务</p><hr><p>大功告成</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>将路由器上的 V2ray 客户端迁移到群晖 Docker 中</title>
      <link href="/2021/docker-v2ray/"/>
      <url>/2021/docker-v2ray/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>之前一直是用华硕 <code>AC86U</code> 做 <code>v2ray</code> 做客户端，最近也想把它迁移到群晖中去，然后把路由器刷回官方固件</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>因为是容器安装这里就一笔带过，官方容器镜像</p><p><a href="https://hub.docker.com/r/v2fly/v2fly-core">v2fly-core</a></p><p>需要注意的就一点，在<code>高级设置 -&gt; 网络 -&gt; 使用与Docker Host相同的网络</code>这里需要打勾</p><p>再一个就是配置文件 <code>config.json</code> 所在的文件夹必须挂载到 <code>/etc/v2ray</code> 下</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>我电脑使用的是 <code>V2rayU</code> 客户端，直接配置导出即可使用。将 <code>inbounds</code> 中的 <code>listen</code> 改为 <code>"listen": "0.0.0.0",</code></p><p>最后需要将 <code>geoip.dat</code> 和 <code>geosite.dat</code> 规则文件跟配置文件放在一起</p><p><a href="https://github.com/Loyalsoldier/v2ray-rules-dat">文件下载</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>socks5:群晖IP:1080</code></p><p><code>http:群晖IP:1087</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Adguard Home 自用规则备份</title>
      <link href="/2021/adguard-home-rules/"/>
      <url>/2021/adguard-home-rules/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>由于我是在群晖安装的，安装比较简单，直接镜像 <code>adguard/adguardhome</code> 拉起来即可。</p><p>注意数据盘和端口就好</p><p>管理端口：<code>3000:3000</code>，另外 <code>upd</code> 和 <code>tcp</code> 端口：<code>53:53</code></p><p>数据文件：<code>/opt/adguardhome/work</code><br>配置文件：<code>/opt/adguardhome/conf</code></p><h3 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">filters:</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://gitee.com/xinggsf/Adblock-Rule/raw/master/rule.txt</span><br><span class="line">  name: 乘风 广告过滤规则</span><br><span class="line">  id: 1610615684</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://gitee.com/xinggsf/Adblock-Rule/raw/master/mv.txt</span><br><span class="line">  name: 乘风 视频广告过滤规则</span><br><span class="line">  id: 1610615685</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://anti-ad.net/easylist.txt</span><br><span class="line">  name: anti-AD</span><br><span class="line">  id: 1610615686</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://banbendalao.coding.net/p/adgk/d/ADgk/git/raw/master/ADgk.txt</span><br><span class="line">  name: adgk手机去广告规则</span><br><span class="line">  id: 1610615687</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://raw.githubusercontent.com/VeleSila/yhosts/master/hosts.txt</span><br><span class="line">  name: yhosts</span><br><span class="line">  id: 1610615689</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://easylist-downloads.adblockplus.org/easylistchina.txt</span><br><span class="line">  name: easylistchina</span><br><span class="line">  id: 1610615690</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://easylist-downloads.adblockplus.org/easyprivacy.txt</span><br><span class="line">  name: easyprivacy</span><br><span class="line">  id: 1610615691</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://easylist-downloads.adblockplus.org/easylist.txt</span><br><span class="line">  name: easylist</span><br><span class="line">  id: 1610615692</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://raw.githubusercontent.com/jdlingyu/ad-wars/master/hosts</span><br><span class="line">  name: 大圣净化</span><br><span class="line">  id: 1610615704</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://gitee.com/xinggsf/Adblock-Rule/raw/master/ublock-dynamic-rule.txt</span><br><span class="line">  name: 乘风 uBlock Origin过滤规则</span><br><span class="line">  id: 1610713745</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://gitee.com/cjx82630/cjxlist/raw/master/cjxlist.txt</span><br><span class="line">  name: cjxlist</span><br><span class="line">  id: 1610713749</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://gitee.com/cjx82630/cjxlist/raw/master/cjx-annoyance.txt</span><br><span class="line">  name: cjxlist cjx-annoyance</span><br><span class="line">  id: 1610713750</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://gitee.com/cjx82630/cjxlist/raw/master/cjx-ublock.txt</span><br><span class="line">  name: cjxlist cjx-ublock</span><br><span class="line">  id: 1610713751</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://gitee.com/cjx82630/cjxlist/raw/master/chinese.txt</span><br><span class="line">  name: cjxlist chinese</span><br><span class="line">  id: 1610713752</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://gitee.com/halflife/list/raw/master/ad.txt</span><br><span class="line">  name: halflife ad</span><br><span class="line">  id: 1610713753</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://gitee.com/halflife/list/raw/master/ad-edentw.txt</span><br><span class="line">  name: halflife ad-edentw</span><br><span class="line">  id: 1610713754</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&amp;showintro=1&amp;mimetype=plaintext</span><br><span class="line">  name: yoyo</span><br><span class="line">  id: 1610713767</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://cdn.jsdelivr.net/gh/AdguardTeam/AdGuardSDNSFilter@master/Filters/rules.txt</span><br><span class="line">  name: AdGuardSDNSFilter(默认)</span><br><span class="line">  id: 1611042639</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://cdn.jsdelivr.net/gh/AdAway/adaway.github.io@master/hosts.txt</span><br><span class="line">  name: AdAway</span><br><span class="line">  id: 1611042640</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://cdn.jsdelivr.net/gh/lhbill/xiaomiad@master/xiaomi.txt</span><br><span class="line">  name: 小米盒子广告</span><br><span class="line">  id: 1611042641</span><br><span class="line">- enabled: true</span><br><span class="line">  url: https://cdn.jsdelivr.net/gh/neoFelhz/neohosts@gh-pages/full/hosts.txt</span><br><span class="line">  name: neohosts</span><br><span class="line">  id: 1611042642</span><br></pre></td></tr></tbody></table></figure><p>适合懒人直接拷贝</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac 下 Iterm2 配置的一些问题</title>
      <link href="/2021/mac-iterm/"/>
      <url>/2021/mac-iterm/</url>
      
        <content type="html"><![CDATA[<h4 id="agnoster主题乱码"><a href="#agnoster主题乱码" class="headerlink" title="agnoster主题乱码"></a>agnoster 主题乱码</h4><p>原因：是缺少 <code>Menlo for Powerline</code> 字体</p><p>下载字体：<a href="https://github.com/abertsch/Menlo-for-Powerline">Menlo for Powerline</a></p><p>安装字体：<code>mv "Menlo for Powerline.ttf" ~/Library/Fonts</code></p><p>配置：<code>Text-&gt;Font</code></p><h4 id="ls文件夹颜色"><a href="#ls文件夹颜色" class="headerlink" title="ls文件夹颜色"></a>ls 文件夹颜色</h4><p>配置：<code>Colors-&gt;Brighten bold text</code> 勾选掉之后</p><h4 id="rz-sz配置"><a href="#rz-sz配置" class="headerlink" title="rz/sz配置"></a>rz/sz 配置</h4><p><a href="https://github.com/aikuyun/iterm2-zmodem">参考文档</a></p><h4 id="zsh-autosuggestion颜色与底色相同"><a href="#zsh-autosuggestion颜色与底色相同" class="headerlink" title="zsh-autosuggestion颜色与底色相同"></a>zsh-autosuggestion 颜色与底色相同</h4><p>更改 <code>zsh-autosuggestion</code> 颜色，在<code>.zshrc</code> 最后加入 <code>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=5'</code>。</p><p><a href="https://github.com/zsh-users/zsh-autosuggestions/issues/12">参考文档</a></p><h4 id="隐藏用户名和主机名"><a href="#隐藏用户名和主机名" class="headerlink" title="隐藏用户名和主机名"></a>隐藏用户名和主机名</h4><p>在<code>.zshrc</code> 最后加入</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prompt_context() {}</span><br></pre></td></tr></tbody></table></figure><h4 id="只显示用户名"><a href="#只显示用户名" class="headerlink" title="只显示用户名"></a>只显示用户名</h4><p>在<code>.zshrc</code> 最后加入</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">prompt_context() {</span><br><span class="line">  if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then</span><br><span class="line">    prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"</span><br><span class="line">  fi</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="只显示主机名"><a href="#只显示主机名" class="headerlink" title="只显示主机名"></a>只显示主机名</h4><p>在<code>.zshrc</code> 最后加入</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prompt_context() {</span><br><span class="line">  if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then</span><br><span class="line">    prompt_segment black default "%(!.%{%F{yellow}%}.)$HOST"</span><br><span class="line">  fi</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><p>在<code>.zshrc</code> 最后加入</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prompt_context () {</span><br><span class="line">  prompt_segment black default "JakeHu@MBP";</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="powerlevel10k"><a href="#powerlevel10k" class="headerlink" title="powerlevel10k"></a>powerlevel10k</h4><p>重新配置 <code>p10k configure</code></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://zhuanlan.zhihu.com/p/66226220">案例一</a></p><p><a href="https://suixinblog.cn/2019/09/beautify-terminal.html">案例二</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AC86U 创建虚拟内存 U 盘读写速度不够？</title>
      <link href="/2021/ac86u-virtual-memory/"/>
      <url>/2021/ac86u-virtual-memory/</url>
      
        <content type="html"><![CDATA[<h4 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h4><p><code>AC86U</code> 升级固件后挂载虚拟内存总是提示读写速度不够，新固件的读取速度要求 <code>20M/s</code>，写入速度要求 <code>30M/s</code><br><img src="https://img.jakehu.me/20210106091033.png"></p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>修改参数限制</p><p><code>ssh</code> 登录到路由器，执行如下命令</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 修改写入速度限制，30替换为10</span><br><span class="line">sed -i 's/^W_LIMIT=30/W_LIMIT=10/' /koolshare/scripts/swap_make.sh</span><br><span class="line"></span><br><span class="line"># 修改读取速度限制，20替换为10</span><br><span class="line">sed -i 's/^R_LIMIT=20/R_LIMIT=10/' /koolshare/scripts/swap_make.sh</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>以上参数可以根据自己的实际情况进行调整</p><p>完成后重新进入管理界面挂载虚拟内存即可</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ac86u </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gogs 升级之殇</title>
      <link href="/2021/gogs-update/"/>
      <url>/2021/gogs-update/</url>
      
        <content type="html"><![CDATA[<h4 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h4><p>搭建在群晖上的 <code>gogs</code> 还是 <code>0.11.X</code> 最近心血来潮升级到了 <code>0.12.3</code> 没想到升级后却出现了权限的问题 <code>Permission denied</code> 具体报错如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Permission denied (publickey,keyboard-interactive).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>后查阅文档发现可能是目录权限问题，权限设置如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/data/git/.ssh/ 目录权限为0700</span></span><br><span class="line">chmod 0700 /data/git/.ssh/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/data/git/.ssh/authorized_keys 文件权限为0600</span></span><br><span class="line">chmod 0600 /data/git/.ssh/authorized_keys</span><br></pre></td></tr></tbody></table></figure><p>最后需要在后台重新生成 <code>/data/git/.ssh/authorized_keys</code> 文件</p><p><code>管理面板-&gt;管理员操作-&gt;重新生成 '.ssh/authorized_keys' 文件（警告：不是 Gogs 的密钥也会被删除）</code></p><hr><p>大功告成</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gogs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ldap 按分组控制权限并接入 Gogs 系统</title>
      <link href="/2020/openldap-gogs/"/>
      <url>/2020/openldap-gogs/</url>
      
        <content type="html"><![CDATA[<p>之前安装了 <code>openldap</code> 服务和 <code>lam</code> 管理平台，接下来我们看看如何在 <code>ldap</code> 中添加多个不同的组和用户来实现不同平台使用不同组下的用户登陆。</p><h4 id="创建Group"><a href="#创建Group" class="headerlink" title="创建Group"></a>创建 Group</h4><p>先创建一个组，如图：<br><img src="https://img.jakehu.me/20200520103212.png"></p><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><p>在刚才创建的组里创建用户，如图：<br><img src="https://img.jakehu.me/20200520103333.png"></p><h4 id="创建Group组"><a href="#创建Group组" class="headerlink" title="创建Group组"></a>创建 Group 组</h4><p>创建 <code>objectClass</code> 属性为 <code>groupOfUniqueNames</code> 的组 <code>gogs</code> 用于 <code>gogs</code> 登陆<br><img src="https://img.jakehu.me/20200520103558.png"><br>其中 <code>cn</code> 为组名，<code>uniqueMember</code> 为组下用户<br><img src="https://img.jakehu.me/20200520103755.png"><br><img src="https://img.jakehu.me/20200520103826.png"></p><h4 id="为Gogs添加认证源"><a href="#为Gogs添加认证源" class="headerlink" title="为Gogs添加认证源"></a>为 Gogs 添加认证源</h4><p><code>绑定DN</code>：<code>Ldap</code> 管理员的 <code>DN</code><br><code>绑定密码</code>：<code>Ldap</code> 管理员密码<br><code>用户搜索基准</code>：<code>ou=users,dc=jakehu,dc=me</code> 用户组<br><code>用户过滤规则</code>：<br><code>(&amp;(objectClass=inetOrgPerson)(memberOf=cn=gogs,ou=groups,dc=jakehu,dc=me)(cn=%s))</code><br>实现不同平台不同分组的重点就是 <code>memberOf</code><br><img src="https://img.jakehu.me/20200520104852.png"><br><img src="https://img.jakehu.me/20200520142815.png"></p><h4 id="更改认证源"><a href="#更改认证源" class="headerlink" title="更改认证源"></a>更改认证源</h4><p>如何将已经存在 <code>gogs</code> 用户改为 <code>ldap</code> 认证，如下图，更改用户的认证方式即可<br><img src="https://img.jakehu.me/20200520134423.png"></p><hr><p>题外话：禅道 (<code>zentao</code>) 接入 <code>Ldap</code> <a href="https://github.com/anjia0532/zentao-ldap">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> ldap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ldap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Docker 为自己打造一套 OpenLdap 认证系统</title>
      <link href="/2020/ldap-docker/"/>
      <url>/2020/ldap-docker/</url>
      
        <content type="html"><![CDATA[<h3 id="Ldap"><a href="#Ldap" class="headerlink" title="Ldap"></a>Ldap</h3><p>轻型目录访问协议（英文：<code>Lightweight Directory Access Protocol</code>，缩写：<code>LDAP</code>，<code>/ˈɛldæp/</code>）是一个开放的，中立的，工业标准的应用协议，通过 <code>IP</code> 协议提供访问控制和维护分布式信息的目录信息。</p><p>摘自维基百科，关于 <code>LDAP</code> 概念和原理可以看看这篇文章 <a href="https://www.cnblogs.com/wilburxu/p/9174353.html">LDAP 概念和原理介绍</a></p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull osixia/openldap:1.3.0</span><br></pre></td></tr></tbody></table></figure><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 389:389 --name openldap --restart=always \</span><br><span class="line">--env LDAP_ORGANISATION="jakehu" \</span><br><span class="line">--env LDAP_DOMAIN="jakehu.me" \</span><br><span class="line">--env LDAP_ADMIN_PASSWORD="jakehu" \</span><br><span class="line">--env LDAP_CONFIG_PASSWORD="jakehu" \</span><br><span class="line">--volume /data/database:/var/lib/ldap \</span><br><span class="line">--volume /data/config:/etc/ldap/slapd.d \</span><br><span class="line">--detach osixia/openldap:1.3.0</span><br></pre></td></tr></tbody></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>端口：默认服务端口使用 <code>389</code> 端口<br><code>LDAP_ORGANISATION</code>：机构组织<br><code>LDAP_DOMAIN</code>：域<br><code>LDAP_ADMIN_PASSWORD</code>：管理员 (<code>admin</code>) 密码<br><code>LDAP_CONFIG_PASSWORD</code>：配置管理密码<br><code>/etc/ldap/slapd.d</code>：配置文件<br><code>/var/lib/ldap</code>：后端数据，默认为 <code>mdb</code></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="镜像-1"><a href="#镜像-1" class="headerlink" title="镜像"></a>镜像</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ldapaccountmanager/lam:7.2.RC1</span><br></pre></td></tr></tbody></table></figure><h4 id="容器-1"><a href="#容器-1" class="headerlink" title="容器"></a>容器</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name ldapaccountmanager -p 9880:80 \</span><br><span class="line">--link openldap:openldap \</span><br><span class="line">--env LDAP_DOMAIN=jakehu.me \</span><br><span class="line">--env LAM_LANG=zh_CN \</span><br><span class="line">--env LDAP_SERVER=ldap://openldap:389 \</span><br><span class="line">--env LAM_PASSWORD=jakehu \</span><br><span class="line">--detach ldapaccountmanager/lam:7.2.RC1</span><br></pre></td></tr></tbody></table></figure><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p><code>LAM_LANG</code>：语言<br><code>LDAP_SERVER</code>：<code>Ldap</code> 服务器<br><code>LAM_PASSWORD</code>：<code>lam</code> 密码，默认用户名 <code>lam</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>接下来访问 <code>http://IP:9880</code> 就能看到下面画面<br><img src="https://img.jakehu.me/20200517183325.png"><br>点击 <code>LAM configuration</code> 进入配置界面<br><img src="https://img.jakehu.me/20200517183522.png"><br><img src="https://img.jakehu.me/20200517183558.png"><br>这里的密码，就是我们设置的 <code>LAM_PASSWORD</code><br><img src="https://img.jakehu.me/20200517183843.png"><br>另外设置的 <code>LDAP_SERVER</code> 和 <code>LDAP_DOMAIN</code> 都被体现出来了，最后在 <code>Account types</code> 中修改默认创建的两个组，这两个组会在首次登陆系统时提示创建<br><img src="https://img.jakehu.me/20200517184331.png"><br>然后登陆创建我们刚设置的两个组<br><img src="https://img.jakehu.me/20200517184454.png"><br>看下结构树，两个分组已经被创建了<br><img src="https://img.jakehu.me/20200517184617.png"><br>到此就已经完成 <code>docker</code> 版的 <code>openldap</code> 和 <code>lam</code> 的安装配置</p><hr><p>o – organization（组织 - 公司）<br>ou – organization unit（组织单元 - 部门）<br>c - countryName（国家）<br>dc - domainComponent（域名）<br>sn – suer name（真实名称）<br>cn - common name（常用名称）</p>]]></content>
      
      
      <categories>
          
          <category> ldap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ldap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不省心的 Openssh 和 Pip</title>
      <link href="/2020/openssh-pip/"/>
      <url>/2020/openssh-pip/</url>
      
        <content type="html"><![CDATA[<p><code>pip</code> 出现以下错误</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/local/bin/pip3", line 6, in &lt;module&gt;</span><br><span class="line">    from pip._internal.cli.main import main</span><br><span class="line">ModuleNotFoundError: No module named 'pip._internal.cli.main'</span><br></pre></td></tr></tbody></table></figure><p>经过排查应该是 <code>brew install openssh</code> 之后安装了 <code>python3.8</code> 的包导致的</p><h3 id="卸载Openssh"><a href="#卸载Openssh" class="headerlink" title="卸载Openssh"></a>卸载 Openssh</h3><p>利用 <code>rmtree</code> 卸载 <code>Openssh</code> 及其依赖</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap beeftornado/rmtree</span><br><span class="line">brew rmtree openssh</span><br></pre></td></tr></tbody></table></figure><h3 id="Pip修复"><a href="#Pip修复" class="headerlink" title="Pip修复"></a>Pip 修复</h3><p><code>python3 -m pip install --upgrade pip --user</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Docker+Python 对 Git 项目自动提交</title>
      <link href="/2020/git-auto-push/"/>
      <url>/2020/git-auto-push/</url>
      
        <content type="html"><![CDATA[<p>基于 Docker+Python 对 git 项目自动提交</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="第一个使用场景"><a href="#第一个使用场景" class="headerlink" title="第一个使用场景"></a>第一个使用场景</h4><p>自己本地有几个私有库，如 <code>hexo</code>、<code>资料记载</code>等… 这些个私有库有事没事就需要 <code>push</code> 更改，所以需要自动提交</p><h4 id="第二个使用场景"><a href="#第二个使用场景" class="headerlink" title="第二个使用场景"></a>第二个使用场景</h4><p><code>home-assistant</code> 安装在树莓派上，但是对于 <code>home-assistant</code> 的配置文件希望用 <code>git</code> 管理起来</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>以上两个使用场景其实都是需要外挂盘符来操作的，接下来编写 <code>docker-compose.yml</code> 文件</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">version: '2'</span><br><span class="line">services:</span><br><span class="line">  git-auto-push:</span><br><span class="line">    image: jakehu/git-auto-push:latest</span><br><span class="line">    container_name: git-auto-push</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - /Web/项目1:/opt/Web/项目1</span><br><span class="line">      - /Web/项目2:/opt/Web/项目2</span><br><span class="line">      - /Web/项目3:/opt/Web/项目3</span><br><span class="line">      - /you_dir/.ssh/:/root/.ssh/</span><br></pre></td></tr></tbody></table></figure><p><code>/opt/Web/</code> 勿修改，程序会自动读取 <code>/opt/Web/</code> 下一级目录作为需要监听的项目，<code>.ssh</code> 挂载进去主要是不用单独去配置 <code>ssh key</code></p><p>启动：<code>docker-compose up -d</code></p><hr><p><a href="https://github.com/jakehu/git-auto-push">Github 地址</a></p><p>参考：<a href="https://note.qidong.name/2018/01/gitpython/">GitPython 操作 Git</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些莫名奇妙的问题</title>
      <link href="/2020/some-problems/"/>
      <url>/2020/some-problems/</url>
      
        <content type="html"><![CDATA[<h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><p>在使用 <code>git clone</code> <code>gogs</code> 项目的时候出现错误 <code>fatal: unable to fork</code> ，原因是因为没有 <code>openssh</code>，解决：<code>brew install openssh</code></p><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><p>问题如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; node-gyp rebuild</span><br><span class="line">No receipt for 'com.apple.pkg.CLTools_Executables' found at '/'.</span><br><span class="line">No receipt for 'com.apple.pkg.DeveloperToolsCLILeo' found at '/'.</span><br><span class="line">No receipt for 'com.apple.pkg.DeveloperToolsCLI' found at '/'.</span><br><span class="line">gyp: No Xcode or CLT version detected!</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>尝试解决：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br><span class="line">xcode-select: error: command line tools are already installed, use "Software Update" to install updates</span><br></pre></td></tr></tbody></table></figure><p>尝试失败了，再次尝试解决：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf $(xcode-select -print-path)</span><br><span class="line">xcode-select --install</span><br></pre></td></tr></tbody></table></figure><p>先删除再重新安装问题解决，真是奇葩问题</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群晖中利用阿里镜像为 Docker 加速</title>
      <link href="/2020/synology-docker/"/>
      <url>/2020/synology-docker/</url>
      
        <content type="html"><![CDATA[<p>先来看看阿里对 <code>docker</code> 加速的步骤</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">{</span><br><span class="line">  "registry-mirrors": ["https://xxx.mirror.aliyuncs.com"]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></tbody></table></figure><p>接下来我们对群晖中 <code>Docker</code> 套件进行设置，配置文件如下，只需要将阿里加速地址设置在 <code>registry-mirrors</code> 即可</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 配置文件路径</span><br><span class="line"># /var/packages/Docker/etc/dockerd.json</span><br><span class="line">{</span><br><span class="line">   "data-root" : "/var/packages/Docker/target/docker",</span><br><span class="line">   "log-driver" : "db",</span><br><span class="line">   "registry-mirrors" : ["https://xxx.mirror.aliyuncs.com"],</span><br><span class="line">   "storage-driver" : "btrfs"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在群晖中对服务的管理可以用 <code>synoservice</code> 命令，利用下面命令重启 <code>Docker</code>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">synoservice --restart pkgctl-Docker</span><br></pre></td></tr></tbody></table></figure><p>这样就能重启 <code>Docker</code> 实现加速了，最后我们可以通过 <code>docker info</code> 来查看 <code>Registry Mirrors</code> 参数看是否设置正确</p><hr><p>另一种方式也可以通过网页端的套件中心对套件进行<code>停用</code>和<code>启用</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>家庭助理之 Home Assistant 初体验</title>
      <link href="/2020/home-assistant/"/>
      <url>/2020/home-assistant/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>其实安装挺简单的，因为家里有群晖，所以只需要在 <code>docker</code> 插件上进行安装即可</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><p>由于群晖中容器安装，所以需要设置 <code>http</code> 访问地址，不然会出现以下错误</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/local/lib/python3.7/site-packages/aiohttp/web_protocol.py", line 275, in data_received</span><br><span class="line">    messages, upgraded, tail = self._request_parser.feed_data(data)</span><br><span class="line">  File "aiohttp\_http_parser.pyx", line 523, in aiohttp._http_parser.HttpParser.feed_data</span><br><span class="line">aiohttp.http_exceptions.BadStatusLine: invalid HTTP method</span><br><span class="line">2020-05-01 16:19:34 ERROR (MainThread) [aiohttp.server] Error handling request</span><br></pre></td></tr></tbody></table></figure><p>配置如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http:</span></span><br><span class="line">    <span class="attr">base_url:</span> <span class="string">http://xx.xxx.com:8123</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><p>默认是用的 <code>sqlite</code> 数据库，如果数据量比较大的话建议可以用 <code>mysql</code> 配置如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">recorder:</span><br><span class="line">    db_url: mysql://user:password@SERVER_IP/DB_NAME?charset=utf8</span><br></pre></td></tr></tbody></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>对于 <code>docker</code> 安装的版本只有核心，并没有 <code>hass.io</code> 插件模块，对于这块可以看以下文章，不过官方好像已经放弃这种方式了：</p><p><a href="https://community.home-assistant.io/t/hass-io-via-docker/60720">Hass.io via Docker</a></p><hr><p>估计还是需要上树莓派才是王道</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智能家居 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 下 oh-my-zsh 之必备插件</title>
      <link href="/2020/zsh-plugins/"/>
      <url>/2020/zsh-plugins/</url>
      
        <content type="html"><![CDATA[<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p><code>autojump</code>：实现目录间快速跳转，想去哪个目录直接 <code>j</code>，不用再有事没事就 <code>cd</code> 了<br><code>zsh-autosuggestions</code>：输入命令时可提示自动补全以及之前的历史记录，然后按键盘<code>→</code>即可<br><code>zsh-syntax-highlighting</code>：日常用的命令会高亮显示，命令错误显示红色</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装前我们可以在配置文件中查看 <code>plugins</code> 目录如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Standard plugins can be found in ~/.oh-my-zsh/plugins/*</span><br><span class="line"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span><br></pre></td></tr></tbody></table></figure><p><code>autojump</code> 安装如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install autojump</span><br></pre></td></tr></tbody></table></figure><p><code>zsh-autosuggestions</code> 安装如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span><br></pre></td></tr></tbody></table></figure><p><code>zsh-syntax-highlighting</code> 安装如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></tbody></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">autojump</span><br><span class="line">zsh-autosuggestions</span><br><span class="line">zsh-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p><code> source .zshrc</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zsh </tag>
            
            <tag> oh-my-zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gogs 报 500 错误，Mysql 密码到期了？</title>
      <link href="/2020/mysql-password/"/>
      <url>/2020/mysql-password/</url>
      
        <content type="html"><![CDATA[<h4 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h4><p>自用代码管理 <code>gogs</code> 和对应的 <code>mysql</code> 都部署在家用群晖的 <code>Docker</code> 上，今早发现 <code>gogs</code> 报 <code>500</code> 错误无法访问，经过查询日志确定是 <code>mysql 5.7</code> 密码已过期，如下错误</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error 1862: Your password has expired. To log in you must change it using a client that supports expired passwords.</span><br></pre></td></tr></tbody></table></figure><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p><code>ssh</code> 登陆到群晖</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh admin@192.168.1.x -p xx22</span><br></pre></td></tr></tbody></table></figure><p>首先我们需要对群晖 <code>admin</code> 账户提权</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></tbody></table></figure><p>然后进入对应的 <code>docker</code> 容器并登陆到 <code>mysql</code> 客户端，这里说明一下客户端的密码是不会过期的</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql1 mysql -uroot -ppassword</span><br></pre></td></tr></tbody></table></figure><p>然后重置密码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password = password('newpassword');</span><br></pre></td></tr></tbody></table></figure><p>接下来刷新权限</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure><p>最后设置密码永不过期</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL default_password_lifetime = 0;</span><br></pre></td></tr></tbody></table></figure><p>到此问题就解决了，又可以愉快的访问 <code>gogs</code> 了</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑群晖 6.1.7 升级 6.2.2 失败之降级安装</title>
      <link href="/2019/synology-update/"/>
      <url>/2019/synology-update/</url>
      
        <content type="html"><![CDATA[<h4 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h4><p><code>6.2</code> 系列引导已经出了一年多了，最近想升级 <code>6.2</code> 试试，于是踩进了坑</p><p>当前配置：</p><ul><li>型号：<code>DS3615xs</code></li><li>系统：<code>6.1.7</code></li></ul><h4 id="踩坑步骤"><a href="#踩坑步骤" class="headerlink" title="踩坑步骤"></a>踩坑步骤</h4><ul><li>新做 <code>1号U盘（6.2引导盘）</code></li><li>拔出 <code>2号U盘（6.1.7引导盘）</code>换上 <code>1号U盘（6.2引导盘）</code></li><li>启动 - 联机 - 迁移（<code>6.2.2</code>）- 重启</li><li>做完上面步骤后开机找不到 <code>IP</code>（这里已经改 <code>BIOS</code> 传统启动方式了）</li><li>用原 <code>2号U盘（6.1.7引导盘）</code>重新引导</li><li>启动 - 联机 - 提示还原 - 还原 - 重启</li><li>做完上面步骤后又找不到 <code>IP</code> 了</li></ul><h4 id="降级处理"><a href="#降级处理" class="headerlink" title="降级处理"></a>降级处理</h4><ul><li>新做 <code>1号U盘（6.1.7引导盘）</code>型号为 <code>DS3617xs</code></li><li>启动 - 联机 - 全新安装（如果用迁移依然没法降级安装）- 重启</li></ul><p>做完以上步骤重启发现仅系统盘丢失，数据盘依然存在，如：<code>docker</code> 容器等</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://xpenology.com/forum/">XPEnology Community</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 群晖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 底层镜像之选择困难症</title>
      <link href="/2019/docker-image/"/>
      <url>/2019/docker-image/</url>
      
        <content type="html"><![CDATA[<h3 id="Scratch"><a href="#Scratch" class="headerlink" title="Scratch"></a>Scratch</h3><p><code>scratch</code> 是一个空镜像，只能用于构建其他镜像，比如你要运行一个包含所有依赖的二进制文件，如 <code>Golang</code> 程序，可以直接使用 <code>scratch</code> 作为基础镜像</p><h3 id="Busybox"><a href="#Busybox" class="headerlink" title="Busybox"></a>Busybox</h3><p><code>scratch</code> 是个空镜像，如果希望镜像里可以包含一些常用的 <code>Linux</code> 工具，<code>busybox</code> 镜像是个不错选择，镜像本身只有 <code>763KB</code>，非常便于构建小镜像</p><p><code>BusyBox</code> 是一个集成了一百多个最常用 <code>Linux</code> 命令和工具（如 <code>cat</code>、<code>echo</code>、<code>grep</code>、<code>mount</code>、<code>telnet</code> 等）的精简工具箱，它只需要<code>几百KB</code> 的大小，很方便进行各种快速验证，被誉为 <code>Linux 系统的瑞士军刀</code></p><p><code>BusyBox</code> 可运行于多款 <code>POSIX</code> 环境的操作系统中，如 <code>Linux</code>(包括 <code>Android</code>)、<code>Hurd</code>、<code>FreeBSD</code> 等</p><h3 id="Alpine"><a href="#Alpine" class="headerlink" title="Alpine"></a>Alpine</h3><p><code>Alpine</code> 采用了 <code>musl libc</code> 和 <code>busybox</code> 以减小系统的体积和运行时资源消耗，但功能上比 <code>busybox</code> 又完善的多，<code>Alpine</code> 还提供了自己的包管理工具 <code>apk</code>，可以通过 <a href="https://pkgs.alpinelinux.org/packages"><code>packages</code></a>网站上查询包信息，也可以直接通过 apk 命令直接查询和安装各种软件</p><p><code>Alpine Docker</code> 镜像也继承了 <code>Alpine Linux</code> 发行版的这些优势。相比于其他 <code>Docker</code> 镜像，它的容量非常小，仅仅只有 <code>5 MB</code> 左右（对比 <code>Ubuntu</code> 系列镜像接近 <code>200</code>MB），且拥有非常友好的包管理机制</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在群晖上利用 Virtual Machine Manager 玩转软路由之 LEDE</title>
      <link href="/2019/synology-lede/"/>
      <url>/2019/synology-lede/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>为什么要软路由？目前家里的拓扑是</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">公网 -&gt; 路由器 -&gt; NAS/BOOK/PHONE</span><br></pre></td></tr></tbody></table></figure><p>路由器负责了<code>拨号</code>、<code>科学上网</code>、<code>广告过滤</code>等</p><p>之前已经将 <code>Frp</code> 移到了 <code>NAS</code> 的 <code>Docker</code> 里面</p><p><a href="/2019/frp-onekey/">FRP 资源</a></p><p><a href="/2019/synology-frp-https/">FRP 教程</a></p><p>至于为什么要软路由原因：</p><ol><li><code>AC66U_B1</code> 时常不够稳定，将 <code>frp</code> 迁移至 <code>nas</code> 后深有感受</li><li><code>AC66U_B1</code> 固件中插件有限而且越来越不好用，所以更多的是想将路由上的功能转一部分到软路由上</li></ol><p>改造后拓扑为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">公网 -&gt; NAS软路由 -&gt; NAS/硬路由-&gt;BOOK/PHONE</span><br></pre></td></tr></tbody></table></figure><h3 id="硬件改造"><a href="#硬件改造" class="headerlink" title="硬件改造"></a>硬件改造</h3><p>改造前现有的硬件设备：</p><blockquote><p>机箱：乔思伯 V2<br>主板：华擎 N3150TM-ITX 主板<br>电源：绿巨能笔记本 DC 电源<br>硬盘：西部数据 (WD) 红盘 4TB * 2<br>内存：金士顿 DDR3L 4G</p></blockquote><p>改造前如图：<br><img src="https://img.jakehu.me/20190712105802.jpg"></p><p>改造部分为<code>更换机箱</code>以及<code>增加网卡</code></p><blockquote><p>机箱：金河田（Golden field）预见 N-1<br>网卡：EDUP EP-9602 PCI-E 千兆网卡</p></blockquote><p>改造后如图：<br><img src="https://img.jakehu.me/20190712110017.jpg"></p><h3 id="LEDE安装"><a href="#LEDE安装" class="headerlink" title="LEDE安装"></a>LEDE 安装</h3><h4 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h4><p>在 <a href="https://firmware.koolshare.cn/LEDE_X64_fw867/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BD%AC%E7%9B%98%E6%88%96PE%E4%B8%8B%E5%86%99%E7%9B%98%E4%B8%93%E7%94%A8/">https://firmware.koolshare.cn/LEDE_X64_fw867 / 虚拟机转盘或 PE 下写盘专用 /</a> 下载 <code>combined-squashfs.img.gz</code> 固件，解压后上传至群晖，如图：<br><img src="https://img.jakehu.me/20190712093324.png"></p><h4 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h4><p>好吧，被坑了，还一直没找到问题所在。</p><p>最开始上了 <code>EDUP EP-9602 PCI-E千兆网卡（RTL8111芯片）</code>，在群晖的网络界面能识别，在 <code>VMM</code> 网络界面添加虚拟交换机时无法识别；后面又换了 <code>LR-LINK 联瑞pciex1台式机千兆有线网卡intelI211芯片支持linux LREC9202CT</code> 还是无法识别；后来又换了<code>胜为（shengwei）PCI-E千兆网卡 以太网rj45台式机电脑10/100/1000自适应网卡 单口 带唤醒 PEC-2051</code> 还是无法识别</p><p>算了，不玩儿了</p><h3 id="终结"><a href="#终结" class="headerlink" title="终结"></a>终结</h3><p>网卡无法识别原因寻找中</p><p>未完待续…</p><hr><p>关于群晖部分问题可以看各位网友的总结：</p><p><a href="https://wp.gxnas.com/2450.html">黑群晖常见问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 群晖 </tag>
            
            <tag> lede </tag>
            
            <tag> Virtual Machine Manager </tag>
            
            <tag> 软路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将 KoolProxyR 规则转换为 KoolProxy 规则脚本</title>
      <link href="/2019/koolproxy-install/"/>
      <url>/2019/koolproxy-install/</url>
      
        <content type="html"><![CDATA[<h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3><blockquote><p>SSH 到路由器上<br>下载 KoolProxy 离线包</p></blockquote><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此为arm380下的包，版本为：3.8.4.1</span></span><br><span class="line">wget http://cdn.jakehu.me/koolproxy.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此为arm384下的包，版本为：3.8.4.1</span></span><br><span class="line">wget http://cdn.jakehu.me/koolproxy384.tar.gz</span><br></pre></td></tr></tbody></table></figure><blockquote><p>解压并安装</p></blockquote><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此为arm380下的包，版本为：3.8.4.1</span></span><br><span class="line">tar koolproxy.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此为arm384下的包，版本为：3.8.4.1</span></span><br><span class="line">tar koolproxy384.tar.gz</span><br><span class="line"></span><br><span class="line">sh koolproxy/install.sh</span><br></pre></td></tr></tbody></table></figure><h3 id="规则转换"><a href="#规则转换" class="headerlink" title="规则转换"></a>规则转换</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">安装WebShell</span><br><span class="line">复制下面的内容发送命令。</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /jffs/.koolshare/koolproxy/data/rules</span><br><span class="line"><span class="comment"># 删除旧版本规则文件</span></span><br><span class="line"><span class="built_in">rm</span> -rf koolproxy.txt</span><br><span class="line"><span class="built_in">rm</span> -rf daily.txt</span><br><span class="line"><span class="built_in">rm</span> -rf kp.dat</span><br><span class="line"><span class="comment"># 下载新版本规则文件</span></span><br><span class="line"></span><br><span class="line">wget -O daily.txt https://raw.githubusercontent.com/user1121114685/koolproxyR/master/koolproxyR/koolproxyR/data/rules/easylistchina.txt</span><br><span class="line">wget -O koolproxy.txt https://raw.githubusercontent.com/user1121114685/koolproxyR/master/koolproxyR/koolproxyR/data/rules/fanboy-annoyance.txt</span><br><span class="line"><span class="comment"># wget -O kp.dat https://raw.githubusercontent.com/user1121114685/koolproxyR/master/koolproxyR/koolproxyR/data/rules/kp.dat</span></span><br><span class="line">wget -O kp.dat https://raw.githubusercontent.com/user1121114685/koolproxyR_rule_list/master/kp.dat</span><br><span class="line"><span class="comment"># wget -O user.txt https://raw.githubusercontent.com/user1121114685/koolproxyR/master/koolproxyR/koolproxyR/data/rules/user.txt</span></span><br><span class="line">wget -O user.txt https://raw.githubusercontent.com/user1121114685/koolproxyR_rule_list/master/kpr_our_rule.txt</span><br><span class="line"><span class="comment"># 下载扩展规则合并</span></span><br><span class="line">wget -O koolproxy_tmp.txt https://raw.githubusercontent.com/user1121114685/koolproxyR/191c06c8d1f769f1b81c1437ad3b1271e0e58d7b/koolproxyR/koolproxyR/data/rules/kpr_video_list.txt</span><br><span class="line">wget -O daily_tmp.txt https://raw.githubusercontent.com/user1121114685/koolproxyR/master/koolproxyR/koolproxyR/data/rules/yhosts.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> koolproxy_tmp.txt &gt;&gt;koolproxy.txt</span><br><span class="line"><span class="built_in">cat</span> daily_tmp.txt &gt;&gt;daily.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 一点点清洁工作...</span><br><span class="line"><span class="built_in">rm</span> -rf koolproxy_tmp.txt</span><br><span class="line"><span class="built_in">rm</span> -rf daily_tmp.txt</span><br><span class="line"><span class="built_in">echo</span> koolproxy规则已替换完成，请重新启用koolproxy!</span><br></pre></td></tr></tbody></table></figure><h3 id="自动更新"><a href="#自动更新" class="headerlink" title="自动更新"></a>自动更新</h3><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><p>自动更新脚本如下：<br><code>/jffs/scripts/koolproxy.sh</code></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"开始转换koolproxyR规则"</span></span><br><span class="line"><span class="built_in">cd</span> /jffs/.koolshare/koolproxy/data/rules</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除旧版本规则文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第一步"</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"删除旧版本规则文件"</span></span><br><span class="line"><span class="built_in">rm</span> -rf koolproxy.txt</span><br><span class="line"><span class="built_in">rm</span> -rf daily.txt</span><br><span class="line"><span class="built_in">rm</span> -rf kp.dat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载新版本规则文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第二步"</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"下载新版本规则文件"</span></span><br><span class="line">wget -O daily.txt https://raw.githubusercontent.com/user1121114685/koolproxyR/master/koolproxyR/koolproxyR/data/rules/easylistchina.txt</span><br><span class="line">wget -O koolproxy.txt https://raw.githubusercontent.com/user1121114685/koolproxyR/master/koolproxyR/koolproxyR/data/rules/fanboy-annoyance.txt</span><br><span class="line"><span class="comment"># wget -O kp.dat https://raw.githubusercontent.com/user1121114685/koolproxyR/master/koolproxyR/koolproxyR/data/rules/kp.dat</span></span><br><span class="line">wget -O kp.dat https://raw.githubusercontent.com/user1121114685/koolproxyR_rule_list/master/kp.dat</span><br><span class="line"><span class="comment"># wget -O user.txt https://raw.githubusercontent.com/user1121114685/koolproxyR/master/koolproxyR/koolproxyR/data/rules/user.txt</span></span><br><span class="line">wget -O user.txt https://raw.githubusercontent.com/user1121114685/koolproxyR_rule_list/master/kpr_our_rule.txt</span><br><span class="line"><span class="comment"># 下载扩展规则合并</span></span><br><span class="line">wget -O koolproxy_tmp.txt https://raw.githubusercontent.com/user1121114685/koolproxyR/191c06c8d1f769f1b81c1437ad3b1271e0e58d7b/koolproxyR/koolproxyR/data/rules/kpr_video_list.txt</span><br><span class="line">wget -O daily_tmp.txt https://raw.githubusercontent.com/user1121114685/koolproxyR/master/koolproxyR/koolproxyR/data/rules/yhosts.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第三步"</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"合并规则"</span></span><br><span class="line"><span class="built_in">cat</span> koolproxy_tmp.txt &gt;&gt;koolproxy.txt</span><br><span class="line"><span class="built_in">cat</span> daily_tmp.txt &gt;&gt;daily.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第四步"</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"一点点清洁工作..."</span></span><br><span class="line"><span class="built_in">rm</span> -rf koolproxy_tmp.txt</span><br><span class="line"><span class="built_in">rm</span> -rf daily_tmp.txt</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"koolproxyR规则转换成功"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></tbody></table></figure><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tools-&gt;Scripts-&gt;定时任务</span><br></pre></td></tr></tbody></table></figure><hr><p>参考资料：<br><a href="https://github.com/koolproxy/merlin-koolproxy">arm380</a> <a href="https://github.com/koolshare/armsoft/tree/master/koolproxy">arm384</a> <a href="https://github.com/koolshare/rogsoft/tree/master/koolproxy">org</a> <a href="https://github.com/koolshare/ledesoft/tree/master/koolproxy">lede</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从发布 weixin js sdk 看如何将自己的包发布到 npmjs</title>
      <link href="/2019/weixin-js-sdk-npm/"/>
      <url>/2019/weixin-js-sdk-npm/</url>
      
        <content type="html"><![CDATA[<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>发布的命令很简单，但开始之前请前往 <code>npmjs.com</code> 注册一个账号</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p><code>npm init</code></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p><code>npm login</code></p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p><code>npm publish</code></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>包参考：<a href="https://www.npmjs.com/package/weixin-js-sdk-official">weixin-js-sdk-official</a></p><p>代码参考：<a href="https://github.com/jakehu/wechat-js-sdk">wechat-js-sdk</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> npmjs </tag>
            
            <tag> weixin </tag>
            
            <tag> sdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frps 一件脚本 &amp;&amp; Frpc Docker 镜像 &amp;&amp; Frps Docker 镜像</title>
      <link href="/2019/frp-onekey/"/>
      <url>/2019/frp-onekey/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>鉴于电信运营商对公网 <code>IP</code> 的<code>吝啬</code>之前一直使用 <code>frp</code> 对家里的 <code>Nas</code> 进行公网暴露，不过之前 <code>frpc</code> 一直是放在<code>路由器梅林</code>上的，这次将 <code>frpc</code> 移到了<code>群晖Docker</code> 里面，所以制作了下面一键安装脚本以及 <code>Docker</code> 镜像以供使用</p><h3 id="frps-onekey"><a href="#frps-onekey" class="headerlink" title="frps-onekey"></a>frps-onekey</h3><p>此脚本根据 <a href="https://github.com/clangcn/onekey-install-shell/tree/master/frps">clangcn/onekey-install-shell</a> 脚本制作，感谢 <code>Clang</code> 大大</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/jakehu/frp/master/frps-onekey/install-frps.sh -O ./install-frps.sh</span><br><span class="line"><span class="built_in">chmod</span> 700 ./install-frps.sh</span><br><span class="line">./install-frps.sh install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">./install-frps.sh uninstall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">./install-frps.sh update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理</span></span><br><span class="line">frps {start|stop|restart|status|config|version}</span><br></pre></td></tr></tbody></table></figure><h3 id="frpc-docker"><a href="#frpc-docker" class="headerlink" title="frpc-docker"></a>frpc-docker</h3><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用</span></span><br><span class="line">docker run -d --restart always -v /data/frpc.ini:/frp/frpc.ini jakehu/frpc-docker</span><br></pre></td></tr></tbody></table></figure><h3 id="frps-docker"><a href="#frps-docker" class="headerlink" title="frps-docker"></a>frps-docker</h3><h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用</span></span><br><span class="line">docker run -d --restart always -v /data/frps.ini:/frp/frps.ini jakehu/frps-docker</span><br></pre></td></tr></tbody></table></figure><hr><p>晓看天色暮看云，行也思君，坐也思君。</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何利用 Frp &amp; https 暴露你在内网的群晖</title>
      <link href="/2019/synology-frp-https/"/>
      <url>/2019/synology-frp-https/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>说说我目前的整个服务器的配置以及链路</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chrome -&gt; Frp服务器 -&gt; Frp客户端(内网ASUS路由器) -&gt; NAS(群晖)</span><br></pre></td></tr></tbody></table></figure><p>由于上 <code>https</code> 我想对整个 <code>frp</code> 放在群晖中去做一个映射，而不是放在路由器上</p><p>改造过后的链路为</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chrome -&gt; Frp服务器 -&gt; Frp客户端(群晖) -&gt; NAS(群晖) || 路由器</span><br></pre></td></tr></tbody></table></figure><h3 id="Frp服务器"><a href="#Frp服务器" class="headerlink" title="Frp服务器"></a>Frp 服务器</h3><p><code>Frp</code> 服务器的安装这里可以看我做的一键安装脚本</p><p><a href="https://github.com/jakehu/frp">Frps 一件脚本</a></p><h3 id="Https证书申请"><a href="#Https证书申请" class="headerlink" title="Https证书申请"></a>Https 证书申请</h3><p>可以是选择阿里云 <code>Symantec 免费版 SSL</code>，可以自行前往阿里云控制台申请</p><p>我这里是用的 <a href="https://www.sslforfree.com/">sslforfree</a> 在线申请的</p><p>当然也还可以通过其他的方式比如：<a href="https://github.com/Neilpang/acme.sh">acme.sh</a> 等</p><h3 id="Frp客户端"><a href="#Frp客户端" class="headerlink" title="Frp客户端"></a>Frp 客户端</h3><p>在群晖上 <code>Frp</code> 客户端可以用 <code>docker</code> 镜像，这里同样可以看我制作的镜像</p><p><a href="https://hub.docker.com/r/jakehu/frpc-docker">Frpc Docker 镜像</a></p><p>在安装好服务端和客户端后，我们下载证书上传到群晖服务器上，同时我们像下图一样挂载<code>配置文件</code>和<code>证书目录</code><br><img src="https://img.jakehu.me/20190627153942.png"></p><p>最后我们需要对 <code>https</code> 进行配置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 127.0.0.1</span><br><span class="line">server_port = 5443</span><br><span class="line"></span><br><span class="line">[test]</span><br><span class="line">type = https</span><br><span class="line">custom_domains = test.jakehu.me</span><br><span class="line">plugin = https2http</span><br><span class="line">plugin_local_addr = 192.168.1.1:80</span><br><span class="line"># HTTPS 证书相关的配置</span><br><span class="line">plugin_crt_path = /frp/certificate/certificate.crt</span><br><span class="line">plugin_key_path = /frp/certificate/private.key</span><br><span class="line">plugin_host_header_rewrite = 192.168.1.1</span><br></pre></td></tr></tbody></table></figure><hr><p>到此告一段落，完美适应！</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frp </tag>
            
            <tag> 群晖 </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 GitLab Runner For Java</title>
      <link href="/2019/GitLab-Java-Runner/"/>
      <url>/2019/GitLab-Java-Runner/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>之前在使用 <code>gitlab runner</code> 时大多使用 <code>docker</code> 方式进行 <code>CI</code>，但是对于 <code>Java and Maven</code> 每次都需要下载费时很久，所以后来我选择 <code>shell</code> 方式。接下来我们看看 <code>shell</code> 方式的 <code>runner</code> 应该怎样搭建</p><h3 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h3><p>第一步 我们首先安装 <code>Docker</code>，因为后面 CI 的时候我们需要打包成 <code>Docker</code> 镜像</p><p><a href="https://docs.docker.com/install/">Docker Install</a></p><h3 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a>NO.2</h3><p>第二步 我们需要安装 <code>Java</code> 和 <code>Maven</code></p><ol><li>Installing Java 8 on CentOS 7</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Step 1: Update</span><br><span class="line">yum -y update</span><br><span class="line"></span><br><span class="line"># Step 2: Install Java 8</span><br><span class="line">yum install java-1.8.0-openjdk</span><br><span class="line"></span><br><span class="line"># Step 3:  Verify Java is Installed</span><br><span class="line"># Example Output:</span><br><span class="line">java -version</span><br><span class="line">openjdk version "1.8.0_212"</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_212-b04)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.212-b04, mixed mode)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>Installing Maven 8 on CentOS 7</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这里我们直接有用yum默认安装</span><br><span class="line">yum install maven</span><br></pre></td></tr></tbody></table></figure><h3 id="No-3"><a href="#No-3" class="headerlink" title="No.3"></a>No.3</h3><p>第三步 我们需要安装 <code>gitlab-runner</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加GitLab的官方存储库</span><br><span class="line"># For RHEL/CentOS/Fedora</span><br><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash</span><br><span class="line"></span><br><span class="line"># 安装gitlab-runner</span><br><span class="line">sudo yum install gitlab-runner</span><br></pre></td></tr></tbody></table></figure><h3 id="No-4"><a href="#No-4" class="headerlink" title="No.4"></a>No.4</h3><p>第四步 就是注册 <code>runner</code> 这里不过多赘述</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Guns 通过 Gitlab CI 跳过测试失败与多模块打包之解决方案</title>
      <link href="/2019/guns-maven-skip-test/"/>
      <url>/2019/guns-maven-skip-test/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>最近在部署一个由 <code>Guns</code> 开发的一套系统，在本地测试和 <code>Gitlab Runner</code> 上执行 <code>mvn package -B -Dmaven.test.skip=true</code> 都能跳过测试，但是在 <code>CI</code> 里面就没法跳过测试</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在 <code>pom</code> 中加入 <code>maven-surefire-plugin</code> 并跳过测试</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.0.0-M3&lt;/version&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;skipTests&gt;true&lt;/skipTests&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="Guns"><a href="#Guns" class="headerlink" title="Guns"></a>Guns</h3><p>这里我们再介绍哈 <code>guns</code> 多模块打包方案，模块如下：</p><ol><li>guns-parent <code>父模块</code></li><li>guns-core <code>guns核心模块</code></li><li>guns-generator <code>代码生成模块</code></li><li>guns-admin <code>后台管理模块</code></li><li>guns-rest <code>API模块</code></li></ol><p>下面是 <code>CI</code> 文件</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义代码目录</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">/data/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">/data/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mv</span> <span class="string">*</span> <span class="string">.git*</span> <span class="string">/data/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">/data/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">maven-build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">guns</span></span><br><span class="line"> &nbsp; &nbsp;<span class="bullet">-</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">install</span> <span class="comment"># 在父模块上运行install，将依赖打包到maven本地仓库</span></span><br><span class="line"> &nbsp; &nbsp;<span class="bullet">-</span> <span class="string">cd</span> <span class="string">../guns/guns-admin</span></span><br><span class="line"> &nbsp; &nbsp;<span class="bullet">-</span> <span class="string">mvn</span> <span class="string">package</span> <span class="string">-B</span> <span class="string">-Dmaven.test.skip=true</span> <span class="comment"># 这里其实可以不用打包，因为前面install的时候已经打包</span></span><br><span class="line"> &nbsp; &nbsp;<span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">...</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">tag</span> <span class="string">...</span></span><br><span class="line"> &nbsp; &nbsp;<span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">...</span> <span class="comment"># 构建不同项目的镜像</span></span><br><span class="line"> &nbsp; &nbsp;<span class="bullet">-</span> <span class="string">cd</span> <span class="string">../../guns/guns-rest</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">package</span> <span class="string">-B</span> <span class="string">-Dmaven.test.skip=true</span> <span class="comment"># 这里其实可以不用打包，因为前面install的时候已经打包</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">...</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">tag</span> <span class="string">...</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">...</span> <span class="comment"># 构建不同项目的镜像</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">spring-boot-shell</span></span><br></pre></td></tr></tbody></table></figure><p>关于构建的 <code>Dockerfile</code> 可以参考</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line">VOLUME /tmp</span><br><span class="line">COPY target/guns-admin-1.0.0.jar app.jar</span><br><span class="line">ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> guns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 之 SUSE 内核升级看这里</title>
      <link href="/2019/suse-kernel/"/>
      <url>/2019/suse-kernel/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>最近公司在部署 <code>SAP</code>，在部署 <code>SUSE</code> 的虚拟机的过程中接到 <code>SAP</code> 实施商的一个要求，需要将虚拟机的内核进行升级。原:<code>4.4.73-7-default</code>，目标：<code>4.4.140-94.42-default</code></p><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><p>开始之前记得去 <code>YaST</code> 里面防火墙打开对 <code>SSH</code> 允许，以及<code>网络设置</code>对 <code>IP</code> 地址进行设置</p><h4 id="获取内核"><a href="#获取内核" class="headerlink" title="获取内核"></a>获取内核</h4><p>获取内核的方法有很多比如：<a href="https://www.kernel.org/">kernel</a> 以及 <a href="https://www.opensuse.org/">opensuse</a>；不过我是通过 <a href="https://drivers.suse.com/suse">Suse Drivers</a> 获取的官方的补丁包</p><p><a href="https://drivers.suse.com/suse/installer-update/sle-12-sp3-x86_64/5.0/install/suse/x86_64/">kernel-default-4.4.140-94.42.1.x86_64</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在安装之前可能得通过 <code>SFTP</code> 等工具将 <code>rpm</code> 包上传到虚拟机</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 安装包并在安装过程中显示正在安装的文件信息及安装进度</span><br><span class="line"></span><br><span class="line">rpm -ivh kernel-default-4.4.140-94.42.1.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><p>在更新内核后需要进行重启</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 重启</span><br><span class="line"></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line">// 查看新的内核版本</span><br><span class="line"></span><br><span class="line">uname -r</span><br><span class="line">4.4.140-94.42-default</span><br></pre></td></tr></tbody></table></figure><hr><p>大功告成！！！</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SUSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 Drone CI/CD Hexo 到 Github Pages 应该这样玩儿</title>
      <link href="/2019/hexo-drone/"/>
      <url>/2019/hexo-drone/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>目前环境是 <code>Hexo</code>+<code>Github Pages</code></p><p>再来看看部署命令 <code>npm start</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//  package.json</span><br><span class="line"></span><br><span class="line">  "scripts": {</span><br><span class="line">    "start": "hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d &amp;&amp; php -f push_sitemap_to_baidu.php"</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>我们逐条来解读</p><blockquote><p><code>hexo cl</code> 清除缓存文件 <code>db.json</code> 和已生成的静态文件 <code>public</code></p></blockquote><blockquote><p><code>hexo g</code> 生成静态文件</p></blockquote><blockquote><p><code>gulp</code> 将静态文件进行压缩，这部分操作可以参考之前我写的文章 —— <a href="/2018/hexo-gulp/">利用 gulp 对 Hexo 博客压缩并一键之部署</a></p></blockquote><blockquote><p><code>php -f push_sitemap_to_baidu.php</code> 将文章主动推送至百度，这部分操作可以参考之前我写的文章 ——<a href="/2019/hexo-baidu-sitemap/">Hexo 部署在 Github Pages 怎么提交 Sitemap 给百度？来我教你</a></p></blockquote><h3 id="drone-yml"><a href="#drone-yml" class="headerlink" title=".drone.yml"></a>.drone.yml</h3><p>通过上面我们大概了解了环境，接下里我们编写<code>.drone.yml</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// .drone.yml</span><br><span class="line"></span><br><span class="line">kind: pipeline</span><br><span class="line">name: default</span><br><span class="line"></span><br><span class="line">steps:</span><br><span class="line">- name: publish</span><br><span class="line"> &nbsp;image: jakehu/php-node # 包含了PHP7+Node10+GIT环境的镜像</span><br><span class="line"> &nbsp;pull: always</span><br><span class="line">  commands:</span><br><span class="line">  - node -v</span><br><span class="line">  - php -v</span><br><span class="line">  - npm install</span><br><span class="line"> &nbsp;- git config --global user.email "jakehu1991@gmail.com" # 对GIT进行设置</span><br><span class="line"> &nbsp;- git config --global user.name "jakehu" # 对GIT进行设置</span><br><span class="line">  - npm start</span><br></pre></td></tr></tbody></table></figure><p>这样就完了？并没有由于我们是在 <code>Drone</code> 的 <code>DIND</code> 里面进行的部署，所以我们还需要对 <code>Github</code> 权限进行设置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// _config.yml</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line"> &nbsp; &nbsp;repo: https://jakehu:password@github.com/jakehu/jakehu.github.io.git</span><br><span class="line">    branch: master</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>到这里就完成，只需要进行 <code>git push</code> 每次 <code>Drone</code> 就会自动把 <code>npm start</code> 所有的工作完成了</p><p><code>Drone</code> 运行过程<br><img src="https://img.jakehu.me/810603f6ly1g1xk56nuh4j20qh079mxr.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> drone </tag>
            
            <tag> hexo </tag>
            
            <tag> Github Pages </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>或许在 Nas (群晖 [Docker]) 上 Gogs 和 Drone 更配哦</title>
      <link href="/2019/gogs-drone/"/>
      <url>/2019/gogs-drone/</url>
      
        <content type="html"><![CDATA[<div class="note danger"><p>关于 <code>Drone</code> 之 <code>Docker in Docker (dind)</code> 解决方案，本人历经 <code>2天</code>尝试了各种解决方案，最终解决方案为 <code>volumes</code> 挂载，已在本文体现</p></div><h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><p>为什么？为什么要使用 <code>Gogs</code> 和 <code>Drone</code>？答案是习惯！！！</p><p>工作中一般使用 <code>GIT</code> 管理工具为 <code>gitlab</code>，自有开源项目一般都是使用的 <code>github</code>，自有私有项目之前一直用 <code>gitee</code>；玩 <code>Nas</code> 也有好几年了，最初也想过在 <code>Nas</code> 上通过 <code>docker</code> 搭建 <code>gitlab</code> 无奈配置不过硬</p><p>怎么说呢？了解 <code>Gogs</code> 是在它出来的那一段时间，但是也一直没有用过。最近心血来潮还是想自己在 <code>Nas</code> 上做一个 <code>GIT</code> 私有服；于是挑中了 <code>Gogs</code> 和 <code>Gitea</code>，鉴于两个服务属于<code>同源</code>最后选择了 <code>Gogs</code></p><h3 id="Gogs"><a href="#Gogs" class="headerlink" title="Gogs"></a>Gogs</h3><p>关于 <code>Gogs</code> 的安装我这里就不过多的赘述，可以看下面的两个文档</p><p><a href="https://github.com/gogs/gogs/tree/master/docker">Gogs Github</a></p><p><a href="https://hub.docker.com/r/gogs/gogs">Gogs Docker</a></p><p>这需要说明的是 <code>Gogs</code> 支持 <code>MySQL</code>, <code>PostgreSQL</code>, <code>SQLite3</code>, <code>MSSQL</code> 和 <code>TiDB</code>；目前我使用的是 <code>MySQL</code>，关于 <code>Mysql</code> 的安装部署可以查看官方文档这里也不过多赘述</p><p><a href="https://hub.docker.com/_/mysql">Mysql 安装文档</a></p><p>对于在群晖 <code>Docker</code> 中去管理 <code>Mysql</code> 的工具这里我推荐 <code>adminer</code> 安装文档如下</p><p><a href="https://hub.docker.com/_/adminer">adminer 安装文档</a></p><p>最后我要说的是一个是端口映射的问题，一个是卷映射的问题，如下图<br><img src="https://img.jakehu.me/810603f6ly1g1vccwvbr8j20q10f10tx.jpg"><br><img src="https://img.jakehu.me/810603f6ly1g1vccwqe4tj20pt0evdgz.jpg"><br>最后直接访问：<code>http://192.168.1.2:10080</code> 就 OK 了</p><p>这里贴出一下整个 <code>Gogs</code> 配置文件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /data/gogs/conf/app.ini</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">APP_NAME</span> = <span class="title class_">Gogs</span></span><br><span class="line"><span class="variable constant_">RUN_USER</span> = git</span><br><span class="line"><span class="variable constant_">RUN_MODE</span> = prod</span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line"><span class="variable constant_">DB_TYPE</span>  = mysql</span><br><span class="line"><span class="variable constant_">HOST</span> &nbsp; &nbsp; = <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>:<span class="number">3306</span> <span class="comment">// mysql地址端口</span></span><br><span class="line"><span class="variable constant_">NAME</span> &nbsp; &nbsp; = gogs</span><br><span class="line"><span class="variable constant_">USER</span>     = root</span><br><span class="line"><span class="variable constant_">PASSWD</span> &nbsp; = password <span class="comment">// mysql密码</span></span><br><span class="line"><span class="variable constant_">SSL_MODE</span> = disable</span><br><span class="line"><span class="variable constant_">PATH</span>     = data/gogs.<span class="property">db</span></span><br><span class="line"></span><br><span class="line">[repository]</span><br><span class="line"><span class="variable constant_">ROOT</span> = <span class="regexp">/data/gi</span>t/gogs-repositories</span><br><span class="line">publish</span><br><span class="line">[server]</span><br><span class="line"><span class="variable constant_">DOMAIN</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span> <span class="comment">// 访问域名</span></span><br><span class="line"><span class="variable constant_">HTTP_PORT</span> &nbsp; &nbsp; &nbsp;  = <span class="number">10080</span> <span class="comment">// http端口</span></span><br><span class="line"><span class="variable constant_">ROOT_URL</span> &nbsp; &nbsp; &nbsp; &nbsp; = <span class="attr">http</span>:<span class="comment">//192.168.1.2/ // 访问域名</span></span><br><span class="line"><span class="variable constant_">DISABLE_SSH</span>      = <span class="literal">false</span></span><br><span class="line"><span class="variable constant_">SSH_PORT</span> &nbsp; &nbsp; &nbsp; &nbsp; = <span class="number">10022</span> <span class="comment">// SSH端口</span></span><br><span class="line"><span class="variable constant_">START_SSH_SERVER</span> = <span class="literal">false</span></span><br><span class="line"><span class="variable constant_">OFFLINE_MODE</span>     = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[mailer]</span><br><span class="line"><span class="variable constant_">ENABLED</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[service]</span><br><span class="line"><span class="variable constant_">REGISTER_EMAIL_CONFIRM</span> = <span class="literal">false</span></span><br><span class="line"><span class="variable constant_">ENABLE_NOTIFY_MAIL</span>     = <span class="literal">false</span></span><br><span class="line"><span class="variable constant_">DISABLE_REGISTRATION</span> &nbsp; = <span class="literal">true</span> <span class="comment">// 禁止注册，只能有管理员能加账号</span></span><br><span class="line"><span class="variable constant_">ENABLE_CAPTCHA</span> &nbsp; &nbsp; &nbsp; &nbsp; = <span class="literal">true</span></span><br><span class="line"><span class="variable constant_">REQUIRE_SIGNIN_VIEW</span> &nbsp;  = <span class="literal">true</span> <span class="comment">// 默认跳转到登录页</span></span><br><span class="line"></span><br><span class="line">[picture]</span><br><span class="line"><span class="variable constant_">DISABLE_GRAVATAR</span>        = <span class="literal">false</span></span><br><span class="line"><span class="variable constant_">ENABLE_FEDERATED_AVATAR</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[session]</span><br><span class="line"><span class="variable constant_">PROVIDER</span> = file</span><br><span class="line"></span><br><span class="line">[log]</span><br><span class="line"><span class="variable constant_">MODE</span>      = file</span><br><span class="line"><span class="variable constant_">LEVEL</span>     = <span class="title class_">Info</span></span><br><span class="line"><span class="variable constant_">ROOT_PATH</span> = <span class="regexp">/app/g</span>ogs/log</span><br><span class="line"></span><br><span class="line">[security]</span><br><span class="line"><span class="variable constant_">INSTALL_LOCK</span> = <span class="literal">true</span></span><br><span class="line"><span class="variable constant_">SECRET_KEY</span>   = security</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>到此为止，我们就完成了 <code>Gogs</code> 的所有安装<br><img src="https://img.jakehu.me/810603f6ly1g1vcre69x8j20r60aqaa8.jpg"></p><h3 id="Drone"><a href="#Drone" class="headerlink" title="Drone"></a>Drone</h3><h4 id="Drone安装"><a href="#Drone安装" class="headerlink" title="Drone安装"></a>Drone 安装</h4><p>为什么？为什么要使用 <code>Drone</code> 还是因为习惯。因为在使用 <code>Gitlab</code> 的时候使用的 <code>CI/CD</code> 都是 <code>gitlab</code> 自带的 <code>gitlab ci</code>；所以这里我们也需要一个 <code>CI/CD</code> 的工具于是我选择了 <code>Drone</code>，当然市场上 <code>CI/CD</code> 的工具是比较多的</p><p><code>Drone</code> 安装这里我们参考官方文档</p><p><a href="https://docs.drone.io/installation/gogs/single-machine/">Gogs 单机安装文档</a></p><p><code>Docker</code> 命令如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v /volume1/docker/drone:/data \</span><br><span class="line">    -e DRONE_GIT_ALWAYS_AUTH=false \</span><br><span class="line">    -e DRONE_GOGS_SERVER=http://192.168.1.2:10080 \</span><br><span class="line">    -e DRONE_SERVER_HOST=http://192.168.1.2:10800 \</span><br><span class="line">    -e DRONE_DATABASE_DRIVER=mysql \</span><br><span class="line">    -e DRONE_DATABASE_DATASOURCE="root:password@tcp(192.168.1.2:3306)/drone?parseTime=true" \</span><br><span class="line">    -p 80:80 \</span><br><span class="line">    -p 443:443 \</span><br><span class="line">    --name=drone \</span><br><span class="line">    drone/drone:latest</span><br></pre></td></tr></tbody></table></figure><p>这里贴别强调一下 <code>/var/run/docker.sock:/var/run/docker.sock</code> 的挂载是必不可少的，因为后面的 <code>DIND</code> 会用到，另外因为我使用了 <code>Mysql</code> 所以上面 <code>DRONE_DATABASE_DRIVER</code> 配置为 <code>mysql</code></p><p>接下来访问 <code>http://192.168.1.2:10800</code> 就会出现 <code>Drone</code> 登录界面，账号为 <code>Gogs</code> 管理员账号，这两个账号相通，而且也会自动同步 <code>Gogs</code> 项目<br><img src="https://img.jakehu.me/810603f6ly1g1w6bebmghj20id0c1aa1.jpg"></p><h4 id="drone-yml"><a href="#drone-yml" class="headerlink" title=".drone.yml"></a>.drone.yml</h4><p>在编辑<code>.drone.yml</code> 之前我们需要在 <code>drone</code> 管理界面对项目设置<br><img src="https://img.jakehu.me/810603f6ly1g1xbr3s339j20qn0eljrt.jpg"><br>这里需要设置项目为受信任项目，如果 <code>Project settings</code> 未显示，则表示当前用户在 <code>Drone</code> 不是管理员可以更改数据库授权为管理员</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE `users` SET `user_admin` = '1' WHERE `user_id` = '1';</span><br></pre></td></tr></tbody></table></figure><p>接下来我们编写<code>.drone.yml</code>，对于<code>.drone.yml</code> 编写我们以 <code>Spring Boot</code> 项目为例，首先我们需要编辑 <code>DockerFile</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line">VOLUME /tmp</span><br><span class="line">ADD target/hello-1.0.0.jar app.jar</span><br><span class="line">ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>接下来我们编辑<code>.drone.yml</code>，关于<code>.drone.yml</code> 请参考<a href="https://docs.drone.io/user-guide/">.drone.yml 文档</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">kind: pipeline</span><br><span class="line">name: default</span><br><span class="line"></span><br><span class="line">steps:</span><br><span class="line">- name: build</span><br><span class="line">  image: maven:3.5-jdk-8</span><br><span class="line">  commands:</span><br><span class="line">  - mvn package -B -Dmaven.test.skip=true # 打包跳过测试</span><br><span class="line"></span><br><span class="line">- name: publish</span><br><span class="line">  image: docker:dind</span><br><span class="line">  volumes:</span><br><span class="line">  - name: docker</span><br><span class="line">    path: /var/run/docker.sock  # dind挂载来自Drone容器/var/run/docker.sock</span><br><span class="line">  commands:</span><br><span class="line">  - docker login --username=* --password=* registry.cn-shenzhen.aliyuncs.com</span><br><span class="line">  - docker build -t spring-boot:master .</span><br><span class="line">  - docker tag spring-boot:master registry.cn-shenzhen.aliyuncs.com/new/spring-boot:master</span><br><span class="line">  - docker push registry.cn-shenzhen.aliyuncs.com/new/spring-boot:master</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">- name: docker</span><br><span class="line">  host:</span><br><span class="line">    path: /var/run/docker.sock # 这里挂载Drone容器所在/var/run/docker.sock，当然Drone容器/var/run/docker.sock来自于群晖宿主机/var/run/docker.sock</span><br></pre></td></tr></tbody></table></figure><p>通过上面我们定义了两步，<code>build</code> 利用 <code>maven</code> 对 <code>Spring Boot</code> 进行了打包操作；<code>publish</code> 利用 <code>dind</code> 将打包好的 <code>jar</code> 包通过 <code>DockerFile</code> 打包成镜像并推送到镜像仓库，这里说一下我使用的镜像仓库是<code>阿里云</code></p><p>这里也请注意 <code>WebHook</code> 的地址为上面安装的 <code>Drone</code> 地址请注意填写正确<br><img src="https://img.jakehu.me/810603f6ly1g1w7p18wahj20s70bdab5.jpg"></p><p>下面我们看一下 <code>Drone</code> 执行过程<br><img src="https://img.jakehu.me/810603f6ly1g1xc5lidgdj20qx0bbabj.jpg"></p><p>到这里我们就告一段落了</p><hr><p>以上就是群晖对接整个 <code>Gogs</code> 和 <code>Drone</code> 过程</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> docker </tag>
            
            <tag> gogs </tag>
            
            <tag> drone </tag>
            
            <tag> 群晖 </tag>
            
            <tag> Nas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eggjs 与微信公众平台 (Wechat) 对接之不得不说</title>
      <link href="/2019/weixin-token/"/>
      <url>/2019/weixin-token/</url>
      
        <content type="html"><![CDATA[<p>最近在开发一个项目是用的 <code>eggjs</code> 同时又需要对接到微信公众平台，所以记录下自己 <code>Egg</code> 对接微信的过程</p><h3 id="验证Token"><a href="#验证Token" class="headerlink" title="验证Token"></a>验证 Token</h3><p>我们知道在微信开发时都需在公众开发配置中对 <code>Token</code> 验证一次，接下来谈谈验证的步骤</p><h4 id="第一步确定验证URL"><a href="#第一步确定验证URL" class="headerlink" title="第一步确定验证URL"></a>第一步确定验证 URL</h4><p>比如我的是 <code>https://www.jakehu.me/wechat</code>，那么先对 <code>eggjs</code> 路由改造</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// app/router.js</span><br><span class="line"></span><br><span class="line">module.exports = app =&gt; {</span><br><span class="line">  app.router.get('/wechat', app.controller.wechat.index);</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>改造完路由后我们还必须对<code>安全</code>这块进行设置，屏蔽对路由 <code>/wechat</code> 的 <code>csrf</code> 验证</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.default.js</span></span><br><span class="line"></span><br><span class="line">config.<span class="property">security</span> = {</span><br><span class="line">    <span class="attr">csrf</span>: {</span><br><span class="line">      <span class="attr">ignore</span>: <span class="string">'/wechat'</span>,</span><br><span class="line">    },</span><br><span class="line">  };</span><br></pre></td></tr></tbody></table></figure><h4 id="第二步编写验证Controller"><a href="#第二步编写验证Controller" class="headerlink" title="第二步编写验证Controller"></a>第二步编写验证 Controller</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/wechat.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">index</span> () {</span><br><span class="line">    <span class="keyword">const</span> query = <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">request</span>.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">const</span> signature = query.<span class="property">signature</span>;</span><br><span class="line">    <span class="keyword">const</span> timestamp = query.<span class="property">timestamp</span>;</span><br><span class="line">    <span class="keyword">const</span> nonce = query.<span class="property">nonce</span>;</span><br><span class="line">    <span class="keyword">const</span> echostr = query.<span class="property">echostr</span>;</span><br><span class="line"> &nbsp; &nbsp;<span class="keyword">if</span> (<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">check</span>(timestamp, nonce, signature, <span class="string">'token'</span>)) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = echostr;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = <span class="string">'It is not from weixin'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">check</span> (timestamp, nonce, signature, token) {</span><br><span class="line">    <span class="keyword">const</span> tmp = [ token, timestamp, nonce ].<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">const</span> currSign = crypto.<span class="title function_">createHash</span>(<span class="string">'sha1'</span>).<span class="title function_">update</span>(tmp).<span class="title function_">digest</span>(<span class="string">'hex'</span>);</span><br><span class="line">    <span class="keyword">return</span> (currSign === signature);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后就可以在<code>开发者配置</code>进行验证就好了</p><blockquote><p>注：上面代码中的 <code>token</code> 即为你在<code>开发者配置</code>页面中填写的 <code>token</code></p></blockquote><h3 id="接入开发"><a href="#接入开发" class="headerlink" title="接入开发"></a>接入开发</h3><h4 id="第一步安装必要组件"><a href="#第一步安装必要组件" class="headerlink" title="第一步安装必要组件"></a>第一步安装必要组件</h4><p>这里我们用到了 <code>co-wechat</code> 插件</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i co-wechat -s</span><br></pre></td></tr></tbody></table></figure><p>安装后对插件进行配置</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.default.js</span></span><br><span class="line"></span><br><span class="line">config.<span class="property">wechat</span> = {</span><br><span class="line">    <span class="attr">token</span>: <span class="string">'token'</span>,</span><br><span class="line">    <span class="attr">appid</span>: <span class="string">'appid'</span>,</span><br><span class="line">    <span class="attr">encodingAESKey</span>: <span class="string">'encodingAESKey'</span>,</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="编写对接代码"><a href="#编写对接代码" class="headerlink" title="编写对接代码"></a>编写对接代码</h4><p>首先是 <code>Controller</code> 的编写</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/wechat.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wechat = <span class="built_in">require</span>(<span class="string">'co-wechat'</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">WechatController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">app.Controller</span> { }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 因为 Egg 需要用类的形式来组织，而 wechat 是通过 middleware 方法来生成中间件</span></span><br><span class="line">  <span class="title class_">WechatController</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">wechat</span> = <span class="title function_">wechat</span>({</span><br><span class="line">    <span class="attr">token</span>: <span class="string">'token'</span>,</span><br><span class="line">    <span class="attr">appid</span>: <span class="string">'appid'</span>,</span><br><span class="line">    <span class="attr">encodingAESKey</span>: <span class="string">'encodingAESKey'</span>,</span><br><span class="line">  }).<span class="title function_">middleware</span>(<span class="title function_">async</span> (message, ctx) =&gt; {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">    <span class="keyword">return</span> { <span class="attr">type</span>: <span class="string">'text'</span>, <span class="attr">content</span>: <span class="string">'Hello world!'</span> };</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">WechatController</span>;</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>其次我们对路由再进行改造</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/router.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> {</span><br><span class="line">  app.<span class="property">router</span>.<span class="title function_">post</span>(<span class="string">'/wechat'</span>, app.<span class="property">controller</span>.<span class="property">wechat</span>.<span class="property">wechat</span>);</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>到此就结束了，完美对接！！！</p><hr><p>完美对接！！！</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eggjs </tag>
            
            <tag> egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab 之 403 Forbidden 前世今生</title>
      <link href="/2019/gitlab-403-forbidden/"/>
      <url>/2019/gitlab-403-forbidden/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>公司的 <code>GIT</code> 环境一直是用 <code>Gitlab</code> 跑在阿里云的 <code>Docker</code> 环境中的，<code>Gitlab</code> 的配置并没有做更改，然而今天发现突然报 <code>Forbidden</code> 而且还时好时坏。通过查看官方文档<a href="https://docs.gitlab.com/ce/security/rack_attack.html">【Rack Attack】</a>发现可能是项目太多并发太高触发了 IP 屏蔽</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>根据官方的文档<a href="https://docs.gitlab.com/ce/security/rack_attack.html">【Rack Attack】</a>和<a href="https://docs.gitlab.com/ee/administration/monitoring/ip_whitelist.html">【IP whitelist】</a>可有如下三种方法解决：</p><ol><li>添加 <code>IP</code> 白名单</li><li>扩大每个 <code>IP HTTP authentication</code> 次数</li><li>直接关闭 <code>Rack Attack</code></li></ol><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><blockquote><ol><li>添加 <code>IP</code> 白名单</li></ol></blockquote><p>步骤：</p><ul><li><code>vi /etc/gitlab/gitlab.rb</code></li><li>查找 <code>rack_attack_git_basic_auth</code></li><li>将 <code>gitlab_rails['rack_attack_git_basic_auth']</code> 取消注释</li><li>修改 <code>ip_whitelist</code> 白名单将 <code>gitlab</code> 部署主机 IP 地址加入<br><code>'ip_whitelist' =&gt; ["127.0.0.1","172.16.7.21"],</code></li><li>最后执行 <code>gitlab-ctl reconfigure</code> 重载配置</li></ul><p>在添加白名单后发现问题依然存在，于是在上述完成后继续第二种方式</p><blockquote><ol start="2"><li>扩大每个 <code>IP HTTP authentication</code> 次数</li></ol></blockquote><p>步骤：</p><ul><li>将 <code>maxretry</code> 调整为 <code>200</code></li></ul><p>最后配置如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gitlab_rails['rack_attack_git_basic_auth'] = {</span><br><span class="line">  'enabled' =&gt; true,</span><br><span class="line">  'ip_whitelist' =&gt; ["127.0.0.1","172.16.7.21"],</span><br><span class="line">  'maxretry' =&gt; 200,</span><br><span class="line">  'findtime' =&gt; 60,</span><br><span class="line">  'bantime' =&gt; 3600</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>再次执行 <code>gitlab-ctl reconfigure</code> 重载配置</p><p>完美解决！！！</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eggjs 之绑定 80 端口引发的一场血案</title>
      <link href="/2019/eggjs-80/"/>
      <url>/2019/eggjs-80/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>最近在做微信开发本地测试，需要用到 <code>80</code> 端口；鉴于 <code>Eggjs</code> 默认端口为 <code>7001</code>，于是开始了一场 <code>Eggjs</code> 绑定 <code>80</code> 端口之战</p><h3 id="Scripts"><a href="#Scripts" class="headerlink" title="Scripts"></a>Scripts</h3><p><code>scripts</code> 改造，将 <code>dev</code> 命令改为如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"dev": "egg-bin dev --port=80",</span><br></pre></td></tr></tbody></table></figure><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>当运行 <code>npm run dev</code> 之后出现下面问题</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind EACCES null:80, code: EACCES</span><br></pre></td></tr></tbody></table></figure><p>绑定 <code>80</code> 端口失败，看来是权限不够</p><blockquote><p>解决方案：<code>sudo</code> 高权限运行</p></blockquote><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>当运行 <code>sudo npm run dev</code> 之后出现下面问题</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo: npm：找不到命令</span><br></pre></td></tr></tbody></table></figure><p>看来是 <code>bin</code> 下面没有可执行文件</p><blockquote><p>解决方案：<code>ln -s</code></p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ which npm</span><br><span class="line">&gt; /home/jakehu/.nvm/versions/node/v8.12.0/bin/npm</span><br><span class="line">$ sudo ln -s /home/jakehu/.nvm/versions/node/v8.12.0/bin/npm /usr/bin/npm</span><br><span class="line"></span><br><span class="line">$ which node</span><br><span class="line">&gt; /home/jakehu/.nvm/versions/node/v8.12.0/bin/node</span><br><span class="line">$ sudo ln -s /home/jakehu/.nvm/versions/node/v8.12.0/bin/node /usr/bin/node</span><br></pre></td></tr></tbody></table></figure><p>最后只需要运行 <code>sudo npm run dev</code> 就可以了</p><hr><p>如果出现 <code>bind EADDRINUSE null:80, code: EADDRINUSE</code> 错误，表示有程序占用 <code>80</code> 端口，<code>pkill</code> 掉即可</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eggjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 部署在 Github Pages 怎么提交 Sitemap 给百度？来我教你</title>
      <link href="/2019/hexo-baidu-sitemap/"/>
      <url>/2019/hexo-baidu-sitemap/</url>
      
        <content type="html"><![CDATA[<p>虽然<code>度娘</code>是一个<code>垮掉</code>的搜索引擎，但是谁叫它在<code>强国</code>是垄断的存在呢。谈谈 <code>Hexo</code> 部署在 <code>Github Pages</code> 怎么提交 <code>Sitemap</code> 给百度。</p><h3 id="Sitemap"><a href="#Sitemap" class="headerlink" title="Sitemap"></a>Sitemap</h3><p>因为 <code>Github Pages</code> 禁止百度爬虫所以这里我们不做过多的说明，无疑这种方式是行不通的</p><h3 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h3><p>目前在用的一种推送方式</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自动推送是百度搜索资源平台为提高站点新增网页发现速度推出的工具，安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度</span><br></pre></td></tr></tbody></table></figure><p>安装方式也很简单，只需要在页面中加入以下 <code>JS</code> 即可</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(function(){</span><br><span class="line">    var bp = document.createElement('script');</span><br><span class="line">    var curProtocol = window.location.protocol.split(':')[0];</span><br><span class="line">    if (curProtocol === 'https') {</span><br><span class="line">        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';</span><br><span class="line">    }</span><br><span class="line">    else {</span><br><span class="line">        bp.src = 'http://push.zhanzhang.baidu.com/push.js';</span><br><span class="line">    }</span><br><span class="line">    var s = document.getElementsByTagName("script")[0];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">})();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="主动推送-实时"><a href="#主动推送-实时" class="headerlink" title="主动推送(实时)"></a>主动推送 (实时)</h3><p>我们重点来说说<code>主动推送</code></p><p>首先我们这里需要安装一下生成 <code>sitemap</code> 的包</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-baidu-sitemap -s</span><br></pre></td></tr></tbody></table></figure><p>新建文件 <code>push_sitemap_to_baidu.php</code>，这里我们通过 <code>PHP</code> 来实现</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 解析xml</span><br><span class="line">$file = "./public/baidusitemap.xml";</span><br><span class="line">$xml = simplexml_load_file($file);</span><br><span class="line">$urls = array();</span><br><span class="line">foreach ($xml as $key =&gt; $value) {</span><br><span class="line">    $url = array();</span><br><span class="line">    $url = (array) $value-&gt;loc;</span><br><span class="line">    $urls[] = current($url);</span><br><span class="line">}</span><br><span class="line">// 调用百度API</span><br><span class="line">$api = 'http://data.zz.baidu.com/urls?site=https://www.jakehu.me&amp;token=***';</span><br><span class="line">$ch = curl_init();</span><br><span class="line">$options = array(</span><br><span class="line">    CURLOPT_URL =&gt; $api,</span><br><span class="line">    CURLOPT_POST =&gt; true,</span><br><span class="line">    CURLOPT_RETURNTRANSFER =&gt; true,</span><br><span class="line">    CURLOPT_POSTFIELDS =&gt; implode("\n", $urls),</span><br><span class="line">    CURLOPT_HTTPHEADER =&gt; array('Content-Type: text/plain'),</span><br><span class="line">);</span><br><span class="line">curl_setopt_array($ch, $options);</span><br><span class="line">$result = curl_exec($ch);</span><br><span class="line">// 返回结果记录</span><br><span class="line">$time = date("Y-m-d H:i:s");</span><br><span class="line">$content = $time . " --- " . $result . PHP_EOL;</span><br><span class="line">$file = "push_sitemap.log";</span><br><span class="line">$fp = fopen($file, "a+") or die("fail to open the file");</span><br><span class="line">fwrite($fp, $content);</span><br><span class="line">fclose($fp);</span><br></pre></td></tr></tbody></table></figure><p>最后会在根目录下生成 <code>push_sitemap.log</code> 日志文件</p><p>然后改造 <code>package.json</code> 如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": {</span><br><span class="line">  "push": "hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d &amp;&amp; php -f push_sitemap_to_baidu.php"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这条命令包含了<code>清理</code>、<code>生成</code>、<code>压缩</code>、<code>部署</code>、<code>推送Sitemap</code>，关于 <code>gulp</code> 压缩部分可看这里<a href="../../2018/hexo-gulp/">【点击查看】</a></p><p>最后我们可以直接运行命令进行部署和推送 <code>npm run push</code>，或者将 <code>push</code> 改为 <code>start</code> 直接运行 <code>npm start</code> 即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 之安装 Headless Chrome</title>
      <link href="/2019/centos-chrome-headles/"/>
      <url>/2019/centos-chrome-headles/</url>
      
        <content type="html"><![CDATA[<h3 id="Headless-Chrome"><a href="#Headless-Chrome" class="headerlink" title="Headless Chrome"></a>Headless Chrome</h3><p>什么是 <code>Headless Chrome</code>？</p><p>在 <code>Chrome59</code> 中开始搭载 <code>Headless Chrome</code>。这是一种在无需显示 <code>headless</code> 的环境下运行 <code>Chrome</code> 浏览器的方式。从本质上来说，就是不用 <code>Chrome</code> 浏览器来运行 <code>Chrome</code> 的功能！它将 <code>Chromium</code> 和 <code>Blink</code> 渲染引擎提供的所有现代 <code>Web</code> 平台的功能都带入了命令行。</p><h3 id="intoli"><a href="#intoli" class="headerlink" title="intoli"></a>intoli</h3><p>开始安装之前我们来了解一下这家公司</p><p><code>我们(intoli)是一家在数据采集，处理和分析方面具有深厚专业知识的咨询机构。</code></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>intoli</code> 在其博客上介绍了几种安装 <code>Headless Chrome</code> 的方式，我们采用如下方式安装：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://intoli.com/install-google-chrome.sh | bash</span><br></pre></td></tr></tbody></table></figure><p>安装完成提示：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Successfully installed Google Chrome!</span><br></pre></td></tr></tbody></table></figure><p><a href="https://intoli.com/blog/installing-google-chrome-on-centos/">intoli 安装文档</a></p><h3 id="运行chrome"><a href="#运行chrome" class="headerlink" title="运行chrome"></a>运行 chrome</h3><p>我们可以通过如下命令来启动 <code>Chrome</code>，同时将博客截图保存</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome-stable --no-sandbox --headless --disable-gpu --screenshot https://www.jakehu.me</span><br></pre></td></tr></tbody></table></figure><h3 id="Chromedriver"><a href="#Chromedriver" class="headerlink" title="Chromedriver"></a>Chromedriver</h3><p><code>chromedriver</code> 可以前往<a href="https://npm.taobao.org/mirrors/chromedriver">淘宝镜像</a>下载，同时通过下面命令进行验证：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./chromedriver</span><br><span class="line">Starting ChromeDriver 73.0.3683.68 (47787ec04b6e38e22703e856e101e840b65afe72) on port 9515</span><br><span class="line">Only local connections are allowed.</span><br><span class="line">Please protect ports used by ChromeDriver and related test frameworks to prevent access by malicious code.</span><br></pre></td></tr></tbody></table></figure><p>如果有如上输出则表示驱动正常运行</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Headless </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 pyspider 这个问题你遇到了吗？</title>
      <link href="/2019/pyspider/"/>
      <url>/2019/pyspider/</url>
      
        <content type="html"><![CDATA[<p>最近心血来潮想鼓捣鼓捣爬虫于是玩起了 <code>pyspider</code>，不过在启动的时候却遇到了一些小问题。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ValueError: Invalid configuration:</span><br><span class="line">  - Deprecated option 'domaincontroller': use 'http_authenticator.domain_controller' instead.</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>最后定位在了 <code>wsgidav3.x</code> 问题，<code>pyspider</code> 会默认安装 <code>wsgidav3.x</code>，解决办法为先把 <code>3.x</code> 卸载，再装 <code>2.x</code>（<code>pip install wsgidav</code> 会默认安装 <code>2.x</code> 我安装的是 <code>2.4.1</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall wsgidav  </span><br><span class="line">pip install wsgidav</span><br></pre></td></tr></tbody></table></figure><p>如果安装的 <code>wsgidav</code> 本还是 <code>3.x</code>, 可以在卸载这个版本之后，在安装命令后面加上具体版本号</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install wsgidav==2.4.1</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pyspider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Kubeadm 创建 Kubernetes 集群之 Centos，你会了吗？</title>
      <link href="/2019/kubeadm-cluster/"/>
      <url>/2019/kubeadm-cluster/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p><code>Kubeadm</code> 是一个工具，通过提供 <code>kubeadm init</code> 和 <code>kubeadm join</code> 来作为创建 <code>Kubernetes</code> 集群的最佳实践 “快速路径”</p><p>简单理解就跟 <code>Docker swarm</code> 差不多吧，<code>Kubeadm</code> 的 <code>GA</code> 版本都已经发布了，那还等什么呢？</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h5 id="资源版本"><a href="#资源版本" class="headerlink" title="资源版本"></a>资源版本</h5><ol><li><code>CentOS 7.6 64</code></li><li><code>Kubernetes version: v1.13.2</code></li><li><code>Docker version 18.06</code></li></ol><blockquote><p>这里为什么使用 <code>Docker 18.06</code> 是因为 <code>kubeadm now properly recognizes Docker 18.09.0 and newer, but still treats 18.06 as the default supported version.</code></p></blockquote><p>所以我们默认还是使用 <code>18.06</code></p><h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><p>这里我们使用 <code>CentOS 7.6 64</code>，同时测试环境为阿里云服务器</p><table><thead><tr><th>IP Address</th><th>Hostname</th><th>CPU</th><th>Memory</th></tr></thead><tbody><tr><td>172.16.1.86</td><td>Master</td><td>2C</td><td>4G</td></tr><tr><td>172.16.1.87</td><td>Node1</td><td>2C</td><td>4G</td></tr><tr><td>172.16.1.88</td><td>Node2</td><td>2C</td><td>4G</td></tr></tbody></table><blockquote><p>这里注意一下服务器系统，目前官方已支持 <code>Ubuntu 16.04+</code>、<code>Debian 9</code>、<code>CentOS 7</code>、<code>RHEL 7</code> 等</p></blockquote><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>关闭防火墙</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config</span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br></pre></td></tr></tbody></table></figure><p>设定 <code>/etc/hosts</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">172.16.1.86 Master</span><br><span class="line">172.16.1.87 Node1</span><br><span class="line">172.16.1.88 Node2</span><br></pre></td></tr></tbody></table></figure><p>禁用 <code>Swap</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a &amp;&amp; sysctl -w vm.swappiness=0</span><br></pre></td></tr></tbody></table></figure><p>将配置中 <code>net.bridge.bridge-nf-call-iptables</code> 被设为 1</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><h5 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装 Docker</h5><p>在 3 台服务器上都安装上 <code>Docker</code>，此次实验 <code>Docker</code> 版本：<code>Docker version 18.06</code></p><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/">Centos Docker 安装文档</a></p><p>安装完成启动 <code>Docker</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker.service</span><br></pre></td></tr></tbody></table></figure><h5 id="安装K8s"><a href="#安装K8s" class="headerlink" title="安装K8s"></a>安装 K8s</h5><p>在 3 台服务器上配置 <code>YUM</code> 源为阿里镜像源</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><p>您需要在每台机器上都安装以下的软件包：</p><ol><li>kubeadm: 用来初始化集群的指令。</li><li>kubelet: 在集群中的每个节点上用来启动 <code>pod</code> 和 <code>container</code> 等。</li><li>kubectl: 用来与集群通信的命令行工具。</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></tbody></table></figure><p>版本：<code>Kubernetes version: v1.13.2</code></p><h5 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h5><p>在 <code>Master</code> 节点上配置 <code>kubelet</code> 所需的 <code>cgroup</code> 驱动</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  /var/lib/kubelet/kubeadm-flags.env</span><br><span class="line">KUBELET_EXTRA_ARGS=--cgroup-driver=cgroupfs</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><p>需要重启 <code>kubelet</code>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></tbody></table></figure><p><code>k8s.gcr.io</code> 镜像本地化</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">kubeadm config images list //查看所需要的镜像</span><br><span class="line"></span><br><span class="line">// 编辑脚本从hub获取镜像</span><br><span class="line">vim k8s.sh</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">docker pull coredns/coredns:1.2.6</span><br><span class="line">docker tag coredns/coredns:1.2.6 k8s.gcr.io/coredns:1.2.6</span><br><span class="line">docker rmi coredns/coredns:1.2.6</span><br><span class="line">images=(</span><br><span class="line">    kube-apiserver:v1.13.2</span><br><span class="line">    kube-controller-manager:v1.13.2</span><br><span class="line">    kube-scheduler:v1.13.2</span><br><span class="line">    kube-proxy:v1.13.2</span><br><span class="line">    pause:3.1</span><br><span class="line">    etcd:3.2.24</span><br><span class="line">)</span><br><span class="line">for imageName in ${images[@]} ; do</span><br><span class="line">  docker pull mirrorgooglecontainers/$imageName</span><br><span class="line">  docker tag mirrorgooglecontainers/$imageName k8s.gcr.io/$imageName</span><br><span class="line">  docker rmi mirrorgooglecontainers/$imageName</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">// 编辑脚本权限</span><br><span class="line">chmod +x k8s.sh</span><br><span class="line"></span><br><span class="line">// 执行脚本</span><br><span class="line">./k8s.sh</span><br></pre></td></tr></tbody></table></figure><p>初始化 <code>Master</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version=v1.13.2 --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></tbody></table></figure><p>配置 <code>kubectl</code> 认证信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 非root用户</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line"># root用户</span><br><span class="line">export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line">echo "export KUBECONFIG=/etc/kubernetes/admin.conf" &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></tbody></table></figure><p>安装网络插件 <code>flannel</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></tbody></table></figure><h5 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h5><p><code>Node</code> 镜像本地化</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 编辑脚本从hub获取镜像</span><br><span class="line">vim k8s.sh</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">images=(</span><br><span class="line">    kube-proxy:v1.13.2</span><br><span class="line">    pause:3.1</span><br><span class="line">)</span><br><span class="line">for imageName in ${images[@]} ; do</span><br><span class="line">  docker pull mirrorgooglecontainers/$imageName</span><br><span class="line">  docker tag mirrorgooglecontainers/$imageName k8s.gcr.io/$imageName</span><br><span class="line">  docker rmi mirrorgooglecontainers/$imageName</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">// 编辑脚本权限</span><br><span class="line">chmod +x k8s.sh</span><br><span class="line"></span><br><span class="line">// 执行脚本</span><br><span class="line">./k8s.sh</span><br></pre></td></tr></tbody></table></figure><p>将节点加入集群</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 172.16.1.86:6443 --token xxx --discovery-token-ca-cert-hash xxx</span><br></pre></td></tr></tbody></table></figure><h5 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h5><p>未完待续…</p><hr><p>题外话：</p><blockquote><p>安装过程中可以用 <code>tail -f 100 /var/log/messages</code> 查看日志，便于找到问题所在</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip 之 No module named &#39;pip._internal&#39;</title>
      <link href="/2019/python-pip/"/>
      <url>/2019/python-pip/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>说说本地环境 <code>Deepin 15.8</code>，<code>Python2</code> 与 <code>Python3</code> 共存</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>问题如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pip3</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/local/bin/pip3", line 7, in &lt;module&gt;</span><br><span class="line">    from pip._internal import main</span><br><span class="line">ModuleNotFoundError: No module named 'pip._internal'</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pip</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/local/bin/pip", line 7, in &lt;module&gt;</span><br><span class="line">    from pip._internal import main</span><br><span class="line">ModuleNotFoundError: No module named 'pip._internal'</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>如 <code>pip</code> 与 <code>pip3</code> 均不可使用</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo easy_install pip</span><br><span class="line">Searching for pip</span><br><span class="line">Best match: pip 10.0.1</span><br><span class="line">Adding pip 10.0.1 to easy-install.pth file</span><br><span class="line">Installing pip script to /usr/local/bin</span><br><span class="line">Installing pip3.6 script to /usr/local/bin</span><br><span class="line">Installing pip3 script to /usr/local/bin</span><br><span class="line"></span><br><span class="line">Using /usr/local/lib/python2.7/dist-packages</span><br><span class="line">Processing dependencies for pip</span><br><span class="line">Finished processing dependencies for pip</span><br></pre></td></tr></tbody></table></figure><p>完美解决</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通过 Gitlab 打包 Java-Spring Cloud 部署 K8s 部分备忘</title>
      <link href="/2019/java-k8s/"/>
      <url>/2019/java-k8s/</url>
      
        <content type="html"><![CDATA[<h3 id="公共包的处理"><a href="#公共包的处理" class="headerlink" title="公共包的处理"></a>公共包的处理</h3><p>解决方案是将公共包打包在 <code>runner</code> 服务器上，其他模块打包时自动应用公共包<code>.gitlab-ci.yml</code> 如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stages:</span><br><span class="line">  - deploy</span><br><span class="line">maven-build:</span><br><span class="line">  stage: deploy</span><br><span class="line">  script: </span><br><span class="line">    - mvn install</span><br></pre></td></tr></tbody></table></figure><h3 id="注册中心地址"><a href="#注册中心地址" class="headerlink" title="注册中心地址"></a>注册中心地址</h3><p><code>Eureka</code> 地址应为 <code>http://[service name]:[port]/eureka</code></p><p>切记 <code>http</code> 协议</p><h3 id="runner提权"><a href="#runner提权" class="headerlink" title="runner提权"></a>runner 提权</h3><p>在 <code>gitlab-runner</code> 装好后并不能通过 <code>CI</code> 执行，因为 <code>gitlab-runner</code> 是通过 <code>gitlab-runner</code> 用户及用户组运行的，并不是 <code>ROOT</code> 权限，所以这里就需要对 <code>gitlab-runner</code> 用户进行提权</p><p>说到提权这里说两种方式</p><blockquote><ol><li><code>usermod</code></li></ol></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usermod -ag root gitlab-runner // 将gitlab-runner用户加入root用户组</span><br><span class="line"></span><br><span class="line">// 不过这种方式我没有成功，我使用的是第二种方式</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li><code>/etc/passwd</code></li></ol></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/passwd</span><br><span class="line">gitlab-runner:x:997:993:GitLab Runner:/home/gitlab-runner:/bin/bash // 修改前</span><br><span class="line">gitlab-runner:x:0:0:GitLab Runner:/home/gitlab-runner:/bin/bash // 修改后</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> runner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 常用软件备份</title>
      <link href="/2019/mac-software/"/>
      <url>/2019/mac-software/</url>
      
        <content type="html"><![CDATA[<h4 id="microsoft-remote-desktop-for-mac"><a href="#microsoft-remote-desktop-for-mac" class="headerlink" title="microsoft remote desktop for mac"></a>microsoft remote desktop for mac</h4><p>根据<a href="https://learn.microsoft.com/zh-cn/azure/virtual-desktop/users/client-features-macos">【官方文档】</a>所示，两种方式获取</p><ol><li>Mac 应用应用商店下载 (只支持美区)</li><li>Mac beta 版，通过<a href="https://install.appcenter.ms/orgs/rdmacios-k2vy/apps/microsoft-remote-desktop-for-mac/distribution_groups/all-users-of-microsoft-remote-desktop-for-mac">【appcenter】</a>下载</li><li>商店之外正版<a href="https://go.microsoft.com/fwlink/?linkid=868963">下载</a>，参考：<a href="https://community.spiceworks.com/topic/2123651-microsoft-remote-desktop-now-available-outside-the-app-store">Microsoft Remote Desktop now available outside the App Store</a></li></ol><h4 id="Mos"><a href="#Mos" class="headerlink" title="Mos"></a>Mos</h4><p>一个用于在 macOS 上平滑你的鼠标滚动效果或单独设置滚动方向的小工具，让你的滚轮爽如触控板</p><p><a href="https://github.com/Caldis/Mos">Mos</a></p><h4 id="Redis客户端"><a href="#Redis客户端" class="headerlink" title="Redis客户端"></a>Redis 客户端</h4><p><code>Redis</code> 客户端众多，安利两款自己用过，还觉得不错的</p><p><a href="https://github.com/qishibo/AnotherRedisDesktopManager">AnotherRedisDesktopManager</a></p><p><a href="https://github.com/luin/medis">Medis</a></p><hr><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> 资源控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> microsoft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务 LCN 和 GTS 比较 and 你更喜欢谁？</title>
      <link href="/2018/LCN-GTS/"/>
      <url>/2018/LCN-GTS/</url>
      
        <content type="html"><![CDATA[<h3 id="LCN简介"><a href="#LCN简介" class="headerlink" title="LCN简介"></a>LCN 简介</h3><ol><li>LCN 分布式事务框架的核心功能是对本地事务的协调控制，框架本身并不创建事务，只是对本地事务做协调控制</li><li>因此该框架与其他第三方的框架兼容性强，支持所有的关系型数据库事务，支持多数据源，支持与第三方数据库框架一块使用</li><li>在使用框架的时候只需要添加分布式事务的注解即可，对业务的侵入性低</li></ol><h3 id="LCN核心步骤"><a href="#LCN核心步骤" class="headerlink" title="LCN核心步骤"></a>LCN 核心步骤</h3><ol><li>创建事务组，是指在事务发起方开始执行业务代码之前先调用 TxManager 创建事务组对象，然后拿到事务标示 GroupId 的过程</li><li>添加事务组，添加事务组是指参与方在执行完业务方法以后，将该模块的事务信息添加通知给 TxManager 的操作</li><li>关闭事务组，是指在发起方执行完业务代码以后，将发起方执行结果状态通知给 TxManager 的动作。当执行完关闭事务组的方法以后，TxManager 将根据事务组信息来通知相应的参与模块提交或回滚事务</li></ol><h3 id="LCN事务控制原理"><a href="#LCN事务控制原理" class="headerlink" title="LCN事务控制原理"></a>LCN 事务控制原理</h3><p>LCN 事务控制原理是由事务模块 TxClient 下的代理连接池与 TxManager 的协调配合完成的事务协调控制 TxClient 的代理连接池实现了 javax.sql.DataSource 接口，并重写了 close 方法，事务模块在提交关闭以后 TxClient 连接池将执行” 假关闭” 操作，等待 TxManager 协调完成事务以后在关闭连接<br><img src="https://img.jakehu.me/1.png"></p><h3 id="阿里云GTS全局事务服务"><a href="#阿里云GTS全局事务服务" class="headerlink" title="阿里云GTS全局事务服务"></a>阿里云 GTS 全局事务服务</h3><ol><li>全局事务服务（Global Transaction Service，简称 GTS）是一款高性能、高可靠、接入简单的分布式事务中间件，用于解决分布式环境下的事务一致性问题</li><li> GTS 支持 DRDS、RDS、MySQL 等多种数据源，可以配合 EDAS 和 SpringCloud 等微服务框架使用， 兼容 MQ 实现事务消息。通过各种组合，可以轻松实现分布式数据库事务、多库事务、消息事务、服务链路级事务等多种业务需求</li></ol><h3 id="GTS模拟场景演示"><a href="#GTS模拟场景演示" class="headerlink" title="GTS模拟场景演示"></a>GTS 模拟场景演示</h3><p><img src="https://img.jakehu.me/2.png"></p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>GTS 通过大量创新，解决了事务 ACID 特性与高性能、高可用、低侵入不可兼得的问题。单事务分支的平均响应时间在 2ms 左右，3 台服务器组成的集群可以支撑 3 万 TPS 以上的分布式事务请求</p><p>LCN 性能参考：<a href="http://springcloud.cn/view/374">http://springcloud.cn/view/374</a>在众多开源分布式事务框架中，LCN 性能是处于前列的</p><h3 id="LCN总结"><a href="#LCN总结" class="headerlink" title="LCN总结"></a>LCN 总结</h3><p>优点:</p><ul><li>性能优秀</li><li>可靠性强</li><li> LCN 实现的分布式事务处理模式，编码复杂性和入侵代码量低</li></ul><p>缺点:</p><ul><li>需额外部署 tx-manager 服务节点</li><li>由于需要 lock 资源这种处理方式，如果集中更新某几个热门商品时，LCN 的性能衰减量大于 TCC 模式</li><li>服务超时时，会造成其他服务的资源被锁住，比如支付服务超时过程中，相关商品库存会一直无法操作</li><li>不支持 SpringCloud 2.0.0 及以上版本（目前已通过修改源码实现支持）</li></ul><h3 id="GTS总结"><a href="#GTS总结" class="headerlink" title="GTS总结"></a>GTS 总结</h3><p>优点:</p><ul><li>性能优秀 (有淘宝双十一作为示例）</li><li>可靠性强</li><li>代码入侵性小（相比 LCN 多一点）</li><li>支持 SpringCloud 2.0.0 及以上版本</li></ul><p>缺点:</p><ul><li>无法在本地进行测试</li><li>只能在阿里云内网使用，或者购买专有云</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lcn </tag>
            
            <tag> gts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 在 Github 慢？不存在百度云？七牛？又拍？</title>
      <link href="/2018/hexo-pages/"/>
      <url>/2018/hexo-pages/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>博客 <code>hexo</code> 一直部署在 <code>Github Pages</code>，方便、稳定非常 <code>nice</code>，但是最近发现打开博客的速度比较慢。于是想着能否通过多部署，或者国内 <code>CDN</code> 加快访问速度</p><h3 id="加速方案"><a href="#加速方案" class="headerlink" title="加速方案"></a>加速方案</h3><ol><li>利用 <code>Gitee Pages</code> 作为国内部署，但是 <code>Gitee Pages</code> 免费版不支持 <code>https</code>，遂作罢</li><li>利用 <code>Coding Pages</code> 作为国内部署，支持 <code>Let's Encrypt https</code>，但发现所加速的 <code>IP</code> 均为国外 <code>IP</code>，有时也比较的慢，于是尝试在国内找 <code>cdn</code> 加速就有了下面方案的对比</li><li>百度云：免费版不支持 <code>https</code>，遂作罢</li><li>腾讯云：没有免费额度，支持上传自有证书，遂作罢</li><li>七牛 CDN：免费 10G 额度，免费版不支持 <code>https</code>，遂作罢</li><li>又拍云 (在用方案，目前最完美方案)：支持 <code>Let's Encrypt</code> 加入<a href="https://www.upyun.com/league">又拍云联盟</a> 10G 空间 + 15G 流量额度</li></ol><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>加速过后速度杠杠的</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 又拍云 </tag>
            
            <tag> 百度云 </tag>
            
            <tag> 七牛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改 /etc/fstab 后可以不重启吗？答案是肯定的</title>
      <link href="/2018/etc-fstab/"/>
      <url>/2018/etc-fstab/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>最近由于项目比较大而且附件比较多，在服务器上选择了外挂 <code>Nas</code> 盘符来存储项目文件</p><p>目前服务器和 <code>Nas</code> 都是用的阿里的服务，这里说一下阿里在 <code>Linux</code> 中自动挂载的注意事项，在 <code>/etc/fstab</code> 配置文件中添加以下命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fid-xxxx.cn-hangzhou.nas.aliyuncs.com:/ /mnt  nfs4 vers=4.0,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,_netdev,noresvport 0 0</span><br></pre></td></tr></tbody></table></figure><p>重点来了，请注意：</p><blockquote><p>命令中的 <code>fid-xxxx.cn-hangzhou.nas.aliyuncs.com</code> 为挂载点的域名</p></blockquote><p>我第一次的时候就把 <code>xxxx.cn-hangzhou.nas.aliyuncs.com</code> 替换为了挂载点的域名，而保留了 <code>fid</code></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>按阿里官方说明为重启时自动挂载 <code>NAS</code> 文件系统，如果需要及时生效可以运行以下命令而不用重启：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -a</span><br><span class="line">-a：将 /etc/fstab 中定义的所有档案系统挂上</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 之常用命令集</title>
      <link href="/2018/npm-cli/"/>
      <url>/2018/npm-cli/</url>
      
        <content type="html"><![CDATA[<h3 id="查看npm全局包"><a href="#查看npm全局包" class="headerlink" title="查看npm全局包"></a>查看 npm 全局包</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm ll -g</span><br><span class="line">npm la -g</span><br></pre></td></tr></tbody></table></figure><p>上面这两个命令会显示包的简介和 git 地址和 readme 信息</p><p><code>npm ls -g</code> 只会显示包名和版本</p><p><code>depth</code> 参数代表依赖关系最大深度</p><p>如:<code>npm ls -g --depth 0</code> 表示只显示最顶层</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周末休闲江津。李市之不舍。鹿山</title>
      <link href="/2018/Bushe-Lushan/"/>
      <url>/2018/Bushe-Lushan/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>去年团建的时候公司一直在物色一个好的农家乐，由此关注上了不舍。鹿山。虽然最后也没有去，好心累<br><img src="https://img.jakehu.me/20181222160331.jpg"><br>这次找了个周末双休带上孩子一起出发，去到大山卡卡里头呼吸新鲜的空气</p><h3 id="行"><a href="#行" class="headerlink" title="行"></a>行</h3><p>在百度直接导航不舍。鹿山度假酒店即可差不多一个半小时左右<br><img src="https://img.jakehu.me/baidu.png"><br>从重庆出发经过 <code>G85-&gt;G93-&gt;江习高速</code>在李市下道，再走上过 10 分钟左右就到了，有一个问题有差不多 500m 的距离小路非常窄，可能也就 2m 左右。记得要注意上面来车，真的很难错车</p><h3 id="住"><a href="#住" class="headerlink" title="住"></a>住</h3><p>关于住宿最好是在网上订好，差不多只有 20 多间房吧，所有越早订好越好，基本周末都是满房。<br><img src="https://img.jakehu.me/20181222161231.jpg"><br>就是因为我们订房晚了，所以只能订在周五…</p><p>目前订房好像是只接受官微订房，官微：<code>蕙家农业</code>价格方面有四个档次</p><p>以下价格为周末价格，平常价格可能会有波动请以官微为准</p><ol><li>普通标间 280 元</li><li>精品标间 380 元</li><li>大床房 480 元</li><li>套房 680 元</li></ol><p>普标房间内部，有热水，感觉空调不是嘿给力，如果冷可以找前台拿棉被<br><img src="https://img.jakehu.me/20181222160111.jpg"></p><h3 id="食"><a href="#食" class="headerlink" title="食"></a>食</h3><p>吃的还是比较多，价格也还能接收，有<code>炒菜</code>、<code>烧烤</code>、<code>汤锅</code>等</p><p>价格方面：</p><ol><li>晚上炒菜 <code>8个菜 366元</code>，分量非常足，就是冬天菜上桌易冷</li><li>早上房间含双早，自己点有<code>饺子、汤圆、小面</code>等</li><li>中午汤锅<code>整只乌鸡汤锅 299</code>，现杀</li></ol><p>对于我们 6 个大人 3 个小孩来说整体不算太贵，而且食材都还比较新鲜，尤其是鸡更是后山现抓、现杀</p><h3 id="耍"><a href="#耍" class="headerlink" title="耍"></a>耍</h3><p>酒店门前有一大片竹林，夏天歇凉好去处，竹林下有草坪可露营等，晚上有篝火活动 (可能这个要看人多少)</p><p>由于冬天所有官方的活动只有<code>丛林寻蛋</code>，<code>59元</code>一个小朋友，捡的蛋可以自己带走，如果是夏天会有各种采摘活动<br><img src="https://img.jakehu.me/20181222162015.jpg"><br>也可以带小朋友看<code>孔雀 、 梅花鹿 、 鸵鸟 、 鸡 、 香猪</code>等</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总体来说周末休闲，带小朋友出去耍还是不错的</p>]]></content>
      
      
      <categories>
          
          <category> 出去浪 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL 优化和改写工具之小米 SOAR</title>
      <link href="/2018/sql-soar/"/>
      <url>/2018/sql-soar/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p><code>SOAR(SQL Optimizer And Rewriter)</code> 是一个对 <code>SQL</code> 进行优化和改写的自动化工具。 由小米人工智能与云平台的数据库团队开发与维护。</p><p>本来之前使用过一段时间美团的 <code>SQLAdvisor</code>，但是依然有诸多问题无法解决，所以改用 <code>SOAR</code> 试试。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载二进制安装包</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/XiaoMi/soar/releases/download/0.10.0/soar.linux-amd64 -O soar</span><br><span class="line">chmod a+x soar</span><br></pre></td></tr></tbody></table></figure><p>验证安装</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 'select * from film' | ./soar</span><br></pre></td></tr></tbody></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><a href="https://github.com/XiaoMi/soar/blob/master/doc/config.md">配置参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SOAR </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew 安装 Node 版本管理 nvm 之不得不说的坑！</title>
      <link href="/2018/Homebrew-nvm/"/>
      <url>/2018/Homebrew-nvm/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>首先终端已经换为 <code>zsh</code> 了，至于怎样安装和更换默认终端，这里我就不赘述，可以参考下面网友做法</p><p><a href="http://achillessatan.github.io/2016/02/15/2016021503/">Homebrew install zsh &amp; oh-my-zsh</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></tbody></table></figure><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>在<code>.bash_profile</code> 加入以下这行，让你可以直接在 <code>shell</code> 使用 <code>nvm</code> 指令</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source $(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></tbody></table></figure><p>重新 <code>source .bash_profile</code> 来让设定生效</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></tbody></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>以上操作看似没有任何问题，安装 <code>node</code> 后也能使用。但是，当你第二次重新打开终端时 <code>node</code> 将不能使用，提示错误 <code>Run nvm use --delete-prefix v8.14.0 to unset it.</code></p><p>后面在 <code>nvm</code> 文档看到这段话 <code>Homebrew installation is not supported. If you have issues with homebrew-installed nvm, please brew uninstall it, and install it using the instructions below, before filing an issue.</code>，额… 看来没事还是要多看看文档啊，同时也有网友对此提有 <a href="https://github.com/creationix/nvm/issues/855">Issues</a></p><h3 id="正确安装"><a href="#正确安装" class="headerlink" title="正确安装"></a>正确安装</h3><p>推荐使用官方<code>script</code>安装</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></tbody></table></figure><p>最后在安装好 <code>node</code> 之后不要忘记设置 <code>alias default</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm alias default 8.14.0</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs 工具函数集</title>
      <link href="/2018/node-utils/"/>
      <url>/2018/node-utils/</url>
      
        <content type="html"><![CDATA[<h3 id="对数组中的对象进行排序"><a href="#对数组中的对象进行排序" class="headerlink" title="对数组中的对象进行排序"></a>对数组中的对象进行排序</h3><p>函数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function keysort (key, desc) {</span><br><span class="line">  return function (a, b) {</span><br><span class="line">    return desc ? (a[key] &lt; b[key]) : (a[key] &gt; b[key]);</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const arr = [{"id":2,"name":"2"},{"id":1,"name":"1"}]</span><br><span class="line">arr.sort(keysort('name', 'desc'));</span><br></pre></td></tr></tbody></table></figure><h3 id="判断是否是Float浮点"><a href="#判断是否是Float浮点" class="headerlink" title="判断是否是Float浮点"></a>判断是否是 Float 浮点</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isFloat (num) {</span><br><span class="line">  return num !== parseInt(num);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="保留两位小数，同时不四舍五入"><a href="#保留两位小数，同时不四舍五入" class="headerlink" title="保留两位小数，同时不四舍五入"></a>保留两位小数，同时不四舍五入</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// number</span><br><span class="line">// num 保留位数</span><br><span class="line">function toFixedNum (number, num) {</span><br><span class="line">  const type = typeof (number);</span><br><span class="line">  let number_arr = [];</span><br><span class="line">  if (type === 'number') {</span><br><span class="line">    const str = number.toString();</span><br><span class="line">    number_arr = str.split('.');</span><br><span class="line">  } else if (type === 'string') {</span><br><span class="line">    number_arr = number.split('.');</span><br><span class="line">  }</span><br><span class="line">  if (number_arr.length &gt; 1) {</span><br><span class="line">    number = number_arr[0] + '.' + number_arr[1].substr(0, num);</span><br><span class="line">  }</span><br><span class="line">  return parseFloat(number);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="给出开始时间和结束时间，算出中间所有的日期"><a href="#给出开始时间和结束时间，算出中间所有的日期" class="headerlink" title="给出开始时间和结束时间，算出中间所有的日期"></a>给出开始时间和结束时间，算出中间所有的日期</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// start ： 2018-01-01</span><br><span class="line">// end ： 2018-01-03</span><br><span class="line">// return : ["2018-01-01","2018-01-02","2018-01-03"]</span><br><span class="line">function getDate (start, end) {</span><br><span class="line">  start = new Date(start).getTime();</span><br><span class="line">  end = new Date(end).getTime();</span><br><span class="line">  const date = [];</span><br><span class="line">  for (; start &lt;= end; start += 86400000) {</span><br><span class="line">    const tmp = new Date(start);</span><br><span class="line">    date.push(tmp.getFullYear() + '-' + (tmp.getMonth() + 1) + '-' + tmp.getDate());</span><br><span class="line">  }</span><br><span class="line">  return date;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="从数组中随机取出N个元素"><a href="#从数组中随机取出N个元素" class="headerlink" title="从数组中随机取出N个元素"></a>从数组中随机取出 N 个元素</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function getRandomArrayElements (arr, count) {</span><br><span class="line">  const shuffled = arr.slice(0);</span><br><span class="line">  let i = arr.length;</span><br><span class="line">  const min = i - count;</span><br><span class="line">  let temp,</span><br><span class="line">    index;</span><br><span class="line">  while (i-- &gt; min) {</span><br><span class="line">    index = Math.floor((i + 1) * Math.random());</span><br><span class="line">    temp = shuffled[index];</span><br><span class="line">    shuffled[index] = shuffled[i];</span><br><span class="line">    shuffled[i] = temp;</span><br><span class="line">  }</span><br><span class="line">  return shuffled.slice(min);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CleanMyMac 资源之备忘录</title>
      <link href="/2018/cleanmymac/"/>
      <url>/2018/cleanmymac/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>CleanMyMac X</code> 是一款强大的 <code>Mac</code> 系统垃圾清理工具，可以清除 <code>Mac</code> 系统多余的语言包、系统缓存、应用程序、<code>PowerPc</code> 软件运行库等，是硬盘瘦身的好工具</p><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://macpaw.com/">国际版官网</a></p><p><a href="http://www.mycleanmymac.com/">中文官网</a></p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>因为 <code>CleanMyMac</code> 对不同的版本有不同的授权信息。</p><p>下面地址均为官网下载地址 <code>https://dl.devmate.com</code> 开头。</p><p><a href="https://dl.devmate.com/com.macpaw.CleanMyMac3/CleanMyMac3.dmg">国际版 CleanMyMac 3</a></p><p><a href="https://dl.devmate.com/com.macpaw.CleanMyMac4/CleanMyMacX.dmg">国际版  CleanMyMac X</a></p><p><a href="https://dl.devmate.com/com.macpaw.zh.CleanMyMac3/CleanMyMacChinese.dmg">中文版 CleanMyMac 3</a></p><p><a href="https://dl.devmate.com/com.macpaw.zh.CleanMyMac4/CleanMyMacXChinese.dmg">中文版 CleanMyMac X</a></p><h3 id="MacPaw支持"><a href="#MacPaw支持" class="headerlink" title="MacPaw支持"></a>MacPaw 支持</h3><p>可在支持中心查询许可证，或者当换机不成功时可以通过支持中心进行许可证重置。</p><p><a href="https://macpaw.com/zh/support">支持中心</a></p>]]></content>
      
      
      <categories>
          
          <category> 资源控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cleanmymac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 gulp 对 Hexo 博客压缩并一键之部署</title>
      <link href="/2018/hexo-gulp/"/>
      <url>/2018/hexo-gulp/</url>
      
        <content type="html"><![CDATA[<h3 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h3><p>压缩页面无非就是减小页面大小加快博客访问时间</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify -s</span><br></pre></td></tr></tbody></table></figure><h4 id="gulp配置"><a href="#gulp配置" class="headerlink" title="gulp配置"></a>gulp 配置</h4><p>在根目录下创建 <code>gulpfile.js</code> 文件</p><p><code>gulpfile.js</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require('gulp');</span><br><span class="line">var minifycss = require('gulp-minify-css');</span><br><span class="line">var uglify = require('gulp-uglify');</span><br><span class="line">var htmlmin = require('gulp-htmlmin');</span><br><span class="line">var htmlclean = require('gulp-htmlclean');</span><br><span class="line">// 压缩 public 目录 css</span><br><span class="line">gulp.task('minify-css', function () {</span><br><span class="line">    return gulp.src('./public/**/*.css')</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest('./public'));</span><br><span class="line">});</span><br><span class="line">// 压缩 public 目录 html</span><br><span class="line">gulp.task('minify-html', function () {</span><br><span class="line">    return gulp.src('./public/**/*.html')</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin({</span><br><span class="line">            removeComments: true,</span><br><span class="line">            minifyJS: true,</span><br><span class="line">            minifyCSS: true,</span><br><span class="line">            minifyURLs: true,</span><br><span class="line">        }))</span><br><span class="line">        .pipe(gulp.dest('./public'))</span><br><span class="line">});</span><br><span class="line">// 压缩 public/js 目录 js</span><br><span class="line">gulp.task('minify-js', function () {</span><br><span class="line">    return gulp.src('./public/**/*.js')</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest('./public'));</span><br><span class="line">});</span><br><span class="line">// 执行 gulp 命令时执行的任务</span><br><span class="line">gulp.task('default', [</span><br><span class="line">    'minify-html', 'minify-css', 'minify-js'</span><br><span class="line">]);</span><br></pre></td></tr></tbody></table></figure><h4 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h4><p>在 <code>package.json</code> 中加入如下 <code>script</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": {</span><br><span class="line">  "push": "hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后在部署的时候只需要运行</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run push</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Next 之 Leancloud 访客统计 v6.6.0 配置</title>
      <link href="/2018/next-leancloud/"/>
      <url>/2018/next-leancloud/</url>
      
        <content type="html"><![CDATA[<h3 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h3><p>版本：<code>NexT.Pisces v6.6.0</code><br>Error： <code>阅读次数：Counter not initialized! See more at console err msg.</code></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>出现上述之错误，遂查看配置文件之说明</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Show number of visitors to each article.</span><br><span class="line"># You can visit https://leancloud.cn get AppID and AppKey.</span><br><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: &lt;&lt;your app id&gt;&gt;</span><br><span class="line">  app_key: &lt;&lt;your app key&gt;&gt;</span><br><span class="line">  # Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span><br><span class="line">  # If you don't care about security in lc counter and just want to use it directly</span><br><span class="line">  # (without hexo-leancloud-counter-security plugin), set the `security` to `false`.</span><br><span class="line">  security: true</span><br><span class="line">  betterPerformance: false</span><br></pre></td></tr></tbody></table></figure><p>如上述两个解决办法：</p><ol><li><p>安装 <code>hexo-leancloud-counter-security</code> 并设置 <code>leancloud</code> 的 <code>app_id</code> 和 <code>app_key</code></p></li><li><p>将 <code>security</code> 设置为 <code>security: false</code></p></li></ol><p>因为懒所以选择了第二方案。</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next </tag>
            
            <tag> Leancloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 Time Machine 将文件从 Mac 备份至 Synology NAS</title>
      <link href="/2018/Nas-Time-Machine/"/>
      <url>/2018/Nas-Time-Machine/</url>
      
        <content type="html"><![CDATA[<h3 id="官宣文档"><a href="#官宣文档" class="headerlink" title="官宣文档"></a>官宣文档</h3><p>官宣文档没毛病，重点说说注意事项<br><a href="https://www.synology.com/zh-cn/knowledgebase/DSM/tutorial/Backup_Restore/How_to_back_up_files_from_Mac_to_Synology_NAS_with_Time_Machine">文档</a></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><p>对于 macOS Sierra 和更高版本，Time Machine 使用 SMB 代替 AFP 作为默认协议。</p></blockquote><p>Mac(Finder)：<code>smb://JakehuNas</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Synology </tag>
            
            <tag> NAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>beanstalkd 之 Nodejs 客户端 bsw</title>
      <link href="/2018/beanstalkd-bsw/"/>
      <url>/2018/beanstalkd-bsw/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://github.com/beanstalkd/beanstalkd">Beanstalkd</a> - 一个高性能、轻量级的分布式内存队列系统。</p><p><a href="https://github.com/beanstalkd/beanstalkd/blob/master/doc/protocol.txt">英文协议</a></p><p><a href="https://github.com/beanstalkd/beanstalkd/blob/master/doc/protocol.zh-CN.md">中文协议</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这里我们用 <code>Docker</code> 来运行。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull schickling/beanstalkd</span><br><span class="line">docker run -d -p 11300:11300 schickling/beanstalkd</span><br></pre></td></tr></tbody></table></figure><p><code>beanstalkd</code> 管理 <code>WEB</code> 平台，主要用来看看以后的任务详情。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull schickling/beanstalkd-console</span><br><span class="line">docker run -d -p 2080:2080 --link beanstalkd:beanstalkd schickling/beanstalkd-console</span><br></pre></td></tr></tbody></table></figure><p>通过 <code>127.0.0.1:2080</code> 访问</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>官方客户端推荐列表 <a href="https://github.com/beanstalkd/beanstalkd/wiki/Client-Libraries">Client</a></p><p>下面我们主要介绍 <code>Nodejs</code> 客户端 <code>bsw</code></p><h4 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bsw --save</span><br></pre></td></tr></tbody></table></figure><h4 id="客户端示例"><a href="#客户端示例" class="headerlink" title="客户端示例"></a>客户端示例</h4><p>这里我们用阿里开源框架 <code>eggjs</code> 做测试。<br><code>app.js</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">'use strict';</span><br><span class="line">const { Consumer } = require('bsw');</span><br><span class="line">module.exports = app =&gt; {</span><br><span class="line">  app.beforeStart(async () =&gt; {</span><br><span class="line">    const consumer = new Consumer({</span><br><span class="line">      host: 'localhost',</span><br><span class="line">      port: '11300',</span><br><span class="line">      tube: 'node',</span><br><span class="line">      async handler(payload, job_info) {</span><br><span class="line">        console.log('processing job: ', payload);</span><br><span class="line">        console.log('processing job_info: ', job_info);</span><br><span class="line">        // 这里进行业务操作</span><br><span class="line">        return 'success';</span><br><span class="line">      },</span><br><span class="line">    });</span><br><span class="line">    consumer.on('error', e =&gt; {</span><br><span class="line">      console.log(e);</span><br><span class="line">    });</span><br><span class="line">    console.log('beanstalkd启动了');</span><br><span class="line">    await consumer.start();</span><br><span class="line">  });</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p><code>home.js</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">'use strict';</span><br><span class="line">const Controller = require('egg').Controller;</span><br><span class="line">const { Producer } = require('bsw');</span><br><span class="line">class HomeController extends Controller {</span><br><span class="line">  async index() {</span><br><span class="line">    const producer = new Producer({</span><br><span class="line">      host: 'localhost',</span><br><span class="line">      port: '11300',</span><br><span class="line">      tube: 'node',</span><br><span class="line">    });</span><br><span class="line">    await producer.start();</span><br><span class="line">    await producer.putJob({</span><br><span class="line">      payload: JSON.stringify({ throw: true, result: 'success' }),</span><br><span class="line">      priority: 0, // 优先级</span><br><span class="line">      delay: 30, // 延时单位(s)</span><br><span class="line">      ttr: 60, // 允许worker执行的最大秒数</span><br><span class="line">    });</span><br><span class="line">    producer.stop();</span><br><span class="line">    this.ctx.body = 'hi, egg';</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">module.exports = HomeController;</span><br></pre></td></tr></tbody></table></figure><hr><p>天若有情天亦老，月如无恨月长圆</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> beanstalkd </tag>
            
            <tag> Nodejs </tag>
            
            <tag> eggjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 楞个多优秀的工具类，嗯嗯，快记下来</title>
      <link href="/2018/Java-Utils/"/>
      <url>/2018/Java-Utils/</url>
      
        <content type="html"><![CDATA[<h3 id="commons-lang3"><a href="#commons-lang3" class="headerlink" title="commons-lang3"></a>commons-lang3</h3><blockquote><p>概述</p></blockquote><p><code>Apache Commons-Lang3</code> 库提供了 <code>Java</code> 的 <code>API</code> 的核心类的操作支持。此支持包括处理字符串，数字，日期，并发，对象反射等的方法。</p><blockquote><p>Maven 依赖</p></blockquote><p>要使用 <code>commons-lang3</code> 库，只需使用以下依赖项从中央 Maven 存储库中提取它</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>示例、文档参考</p></blockquote><p>文档参考：<a href="https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html">StringUtils</a></p><h3 id="Hutool"><a href="#Hutool" class="headerlink" title="Hutool"></a>Hutool</h3><blockquote><p>概述</p></blockquote><p><code>Hutool</code> 是一个 <code>Java</code> 工具包，也只是一个工具包，它帮助我们简化每一行代码，减少每一个方法，让 <code>Java</code> 语言也可以 “甜甜的”。</p><blockquote><p>Maven 依赖</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>示例、文档参考</p></blockquote><p>文档参考：<a href="https://hutool.cn/docs/#/">Hutool</a></p><h3 id="easy-okhttp"><a href="#easy-okhttp" class="headerlink" title="easy-okhttp"></a>easy-okhttp</h3><blockquote><p>概述</p></blockquote><p><code>easy-okhttp</code> 是对 <code>OkHttp</code> 网络框架封装，提供文件上传和下载，表单 (含文件) 提交，链式调用，支持 <code>HTTPS</code> 和自定义签名证书等特性。</p><blockquote><p>Maven 依赖</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.mzlion&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;easy-okhttp&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>示例、文档参考</p></blockquote><p>文档参考：<a href="https://gitee.com/mzllon/easy-okhttp#%E7%AE%80%E4%BB%8B">easy-okhttp</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> StringUtils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 之常用命令集</title>
      <link href="/2018/docker-command/"/>
      <url>/2018/docker-command/</url>
      
        <content type="html"><![CDATA[<h4 id="查看docker磁盘使用情况"><a href="#查看docker磁盘使用情况" class="headerlink" title="查看docker磁盘使用情况"></a>查看 docker 磁盘使用情况</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system df</span><br></pre></td></tr></tbody></table></figure><h4 id="kill掉所有容器"><a href="#kill掉所有容器" class="headerlink" title="kill掉所有容器"></a>kill 掉所有容器</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill $(docker ps -a -q)</span><br></pre></td></tr></tbody></table></figure><h4 id="删除所有停止容器"><a href="#删除所有停止容器" class="headerlink" title="删除所有停止容器"></a>删除所有停止容器</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></tbody></table></figure><h4 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></tbody></table></figure><h4 id="强制删除镜像"><a href="#强制删除镜像" class="headerlink" title="强制删除镜像"></a>强制删除镜像</h4><blockquote><p>当同一镜像被多个储存库引用时，就需要强制删除镜像</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f 镜像ID</span><br></pre></td></tr></tbody></table></figure><h4 id="删除tag为的所有镜像"><a href="#删除tag为的所有镜像" class="headerlink" title="删除tag为<none>的所有镜像"></a>删除 tag 为 <code>&lt;none&gt;</code> 的所有镜像</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images|grep none|awk '{print $3}'|xargs docker rmi</span><br><span class="line"></span><br><span class="line">docker rmi $(docker images -f "dangling=true" -q)</span><br></pre></td></tr></tbody></table></figure><h4 id="删除已经PUSH带有DIGEST参数镜像"><a href="#删除已经PUSH带有DIGEST参数镜像" class="headerlink" title="删除已经PUSH带有DIGEST参数镜像"></a>删除已经 PUSH 带有 DIGEST 参数镜像</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker images --digests</span><br><span class="line">REPOSITORY                     TAG       DIGEST                                                                    IMAGE ID        CREATED         SIZE</span><br><span class="line">localhost:5000/nodeservice    &lt;none&gt;    sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf   4986bf8c1536    9 weeks ago     2.43 MB</span><br><span class="line"></span><br><span class="line">$ docker rmi localhost:5000/nodeservice@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf</span><br></pre></td></tr></tbody></table></figure><hr><font color="red">参考：[Docker 命令](https://docs.docker.com/engine/reference/commandline/cli/)</font>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 之时区配置</title>
      <link href="/2018/docker-time-zone/"/>
      <url>/2018/docker-time-zone/</url>
      
        <content type="html"><![CDATA[<h4 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h4><p>公司部分业务使用的是阿里的 <code>docker swarm</code> 服务，在配置 <code>nodejs</code> 应用时发现时区不对。</p><h4 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h4><p>记录下自己所选择的方式。</p><p>我选择在 <code>Dockerfile</code> 文件中做处理，这样利于以后所有引用此镜像的容器时区的正确性。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN echo "Asia/Shanghai" &gt; /etc/timezone \</span><br><span class="line">    &amp;&amp; dpkg-reconfigure -f noninteractive tzdata</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这些个 Kubernetes 集群管理平台你值得拥有</title>
      <link href="/2018/k8s-ui/"/>
      <url>/2018/k8s-ui/</url>
      
        <content type="html"><![CDATA[<div class="note danger"><p>我们不生产 <code>k8s</code> 管理平台，我们只是开源项目的搬运工</p></div><h4 id="Rancher"><a href="#Rancher" class="headerlink" title="Rancher"></a>Rancher</h4><p><a href="https://rancher.com/">Rancher</a> 是一个开源的企业级容器管理平台。通过 Rancher，企业再也不必自己使用一系列的开源软件去从头搭建容器服务平台。Rancher 提供了在生产环境中使用的管理 Docker 和 Kubernetes 的全栈化容器部署与管理平台。</p><h4 id="Kubernetes-Dashboard"><a href="#Kubernetes-Dashboard" class="headerlink" title="Kubernetes Dashboard"></a>Kubernetes Dashboard</h4><p><a href="https://github.com/kubernetes/dashboard">Kubernetes Dashboard</a> 是 Kubernetes 集群的基于 Web 的通用 UI。它允许用户管理在群集中运行的应用程序并对其进行故障排除，以及管理群集本身。</p><h4 id="Wayne"><a href="#Wayne" class="headerlink" title="Wayne"></a>Wayne</h4><p><a href="https://github.com/Qihoo360/wayne">Wayne</a> 是一个通用的、基于 Web 的 Kubernetes 多集群管理平台。通过可视化 Kubernetes 对象模板编辑的方式，降低业务接入成本， 拥有完整的权限管理系统，适应多租户场景，是一款适合企业级集群使用的发布平台。</p><h4 id="Naftis"><a href="#Naftis" class="headerlink" title="Naftis"></a>Naftis</h4><p><a href="https://github.com/XiaoMi/naftis">Naftis</a> 是一个基于 web 的 Istio dashboard，通过任务模板的方式来帮助用户更方便地执行 Istio 任务。 用户可以在 Naftis 中定义自己的任务模板，并填充变量来构造单个或多个构造任务实例，从而完成各种服务治理功能。</p><h4 id="Breeze"><a href="#Breeze" class="headerlink" title="Breeze"></a>Breeze</h4><p><a href="https://github.com/wise2c-devops/breeze">Breeze</a> 是睿云智合提供的图形化 Kubernetes 部署工具。</p><h4 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h4><p><a href="https://nacos.io/zh-cn/">Nacos</a> 是阿里巴巴的新开源项目，其核心定位是 “一个更易于帮助构建云原生应用的动态服务发现、配置和服务管理平台”。</p><p><code>Nacos</code> 可能更多的是为了支持一整套微服务。包括 <code>Dubbo</code>，<code>Spring Cloud</code> 以及 <code>Kubernetes</code> 等。</p><hr><p>最后相对来说，我还是比较喜欢用 <code>Rancher</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-Plus 注解方式自定义分页实现</title>
      <link href="/2018/mybatis-plus-page/"/>
      <url>/2018/mybatis-plus-page/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>毫无疑问，<code>Mybatis-Plus</code> 是优秀的。<br>在 <code>Mybatis-Plus</code> 官网的文档中，自定义分页只能只支持 <code>xml</code> 方式，但是鉴于本人对 <code>xml</code> 并不是太喜欢，而是喜欢用注解的方式。</p><p>于是，记录了在 <code>Mybatis-Plus</code> 中注解分页方式实现。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>首先讲一下我的请求：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">controller-&gt;service-&gt;mapper-&gt;entity</span><br></pre></td></tr></tbody></table></figure><p><code>UserService.java</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public Object getAll() {</span><br><span class="line">    Page userList = new Page&lt;&gt;(1, 5);</span><br><span class="line">    Map&lt;String, Object&gt; param = new HashMap&lt;&gt;();</span><br><span class="line">    param.put("name", "测试788");</span><br><span class="line">    param.put("page", userList);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; userListArr = mapper.getAllUserGoodsSQLPage(param);</span><br><span class="line">    userList.setRecords(userListArr);</span><br><span class="line"></span><br><span class="line">    return userList;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>UserMapper.java</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Select("&lt;script&gt;SELECT u.id,u.name from " + TABLE + " as u " +</span><br><span class="line">        "left join " + G_TABLE + " as g " +</span><br><span class="line">        "on u.id = g.uid " +</span><br><span class="line">        "where u.name =  #{name}" +</span><br><span class="line">        "&lt;if test = 'id != null'&gt;" +</span><br><span class="line">        "   and u.id = #{id}" +</span><br><span class="line">        "&lt;/if&gt;" +</span><br><span class="line">        "&lt;/script&gt;")</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; getAllUserGoodsSQLPage(Map&lt;String, Object&gt; param);</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记 Mysql 部分用法</title>
      <link href="/2018/mysql-usage/"/>
      <url>/2018/mysql-usage/</url>
      
        <content type="html"><![CDATA[<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>1、查询数组中对象</p><blockquote><p><code>JSON_CONTAINS</code> 用法</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from circulation</span><br><span class="line">where JSON_CONTAINS(goods-&gt;'$[*].name', '["海带结（香辣味）150克/袋"]', '$')</span><br><span class="line"></span><br><span class="line">select * from circulation</span><br><span class="line">where JSON_CONTAINS(goods-&gt;'$[*].gid', '[20]', '$')</span><br></pre></td></tr></tbody></table></figure><p>2、Json 字符串转化为 Json 对象</p><blockquote><p><code>CONVERT</code> 用法</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select CONVERT('{"mail": "amy@gmail.com", "name": "Amy"}',JSON)</span><br></pre></td></tr></tbody></table></figure><p>3、元素转化为数组</p><blockquote><p><code>JSON_ARRAY</code> 用法</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT JSON_ARRAY(1, "abc", NULL, TRUE, CURTIME())</span><br></pre></td></tr></tbody></table></figure><p>4、数组中查询元素</p><blockquote><p><code>JSON_CONTAINS + JSON_ARRAY</code> 用法</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select JSON_CONTAINS(JSON_ARRAY(1,2,3,4,5,6),'6')</span><br></pre></td></tr></tbody></table></figure><p>5、数组模糊查询</p><blockquote><p><code>JSON_SEARCH用法</code></p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table where JSON_SEARCH(profiles, 'all', 'sales%') is not null</span><br></pre></td></tr></tbody></table></figure><p>6、JSON_SET 修改数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 数组</span></span><br><span class="line"><span class="keyword">set</span> id <span class="operator">=</span> JSON_SET(id,<span class="string">'$[0]'</span>,<span class="number">1</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment">--- Json对象</span></span><br><span class="line"><span class="keyword">set</span> info <span class="operator">=</span><span class="string">'{}'</span> </span><br><span class="line"><span class="keyword">set</span> info <span class="operator">=</span>JSON_SET(info,<span class="string">'$."1"'</span>,"{}") </span><br></pre></td></tr></tbody></table></figure><p>7、利用 JSON_CONTAINS 实现 On</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">" LEFT JOIN `ag_user_group` as ug  on JSON_CONTAINS(u.user_group_id, JSON_ARRAY(ug.id), '$')"</span><br></pre></td></tr></tbody></table></figure><p><code>user_group_id</code> 为数组，<code>ug.id</code> 为 <code>int</code> 格式</p><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><p>1、查询重复记录</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from merchant</span><br><span class="line">where num in (select num from synk.merchant group by num having count(num) &gt; 1)</span><br></pre></td></tr></tbody></table></figure><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>1、count 与 distinct 结合使用，限制条件的情况下去除重复数据</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(distinct id, if(id is not null,true,null)) </span><br><span class="line">FROM flow_view;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记 Gitlab 到 Docker 全过程 CI/CD</title>
      <link href="/2018/gitlab-docker/"/>
      <url>/2018/gitlab-docker/</url>
      
        <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>很久都没有写博客了，不是没时间，可能就是纯粹的懒吧。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>公司内部版本管理一直以来都是用的 <code>Gitlab</code>，而系统早在前年的时候就已经全部上了 <code>Docker</code>，<code>gitlab-runner</code> 发布过后就一直想利用 <code>gitlab-runner</code> 进行 <code>CI/CD</code> 自动化的部署。</p><h3 id="Gitlab-Gitlab-Runner"><a href="#Gitlab-Gitlab-Runner" class="headerlink" title="Gitlab &amp;&amp; Gitlab-Runner"></a>Gitlab &amp;&amp; Gitlab-Runner</h3><h4 id="基于原生原方案"><a href="#基于原生原方案" class="headerlink" title="基于原生原方案"></a>基于原生原方案</h4><p>关于 <code>gitlab &amp;&amp; gitlab-runner</code> 的安装我这边就不赘述了，不会的可以看官方的文档。</p><p><a href="https://docs.gitlab.com.cn/">Gitlab</a></p><p><a href="https://docs.gitlab.com.cn/runner/">Runner 的安装和注册</a></p><p>我们在物理机或云上部署的时候一个流程图如下：</p><img src="https://img.jakehu.me/runner.png"><p>从上图我们可以看出，当我们的服务器多了之后每个服务器都需要安装 <code>runner</code> 服务，这对于我这样懒的人感觉好麻烦的；受不了。</p><p>当然也有可以解决的方案，如：单独用一服务器挂载共享磁盘。</p><h4 id="基于Docker新方案"><a href="#基于Docker新方案" class="headerlink" title="基于Docker新方案"></a>基于 Docker 新方案</h4><p>今天我们重点来谈谈，<code>gitlab</code> 如何和 <code>docker</code> 完美结合</p><p>先看看看架构图，如下：</p><img src="https://img.jakehu.me/docker.png"><p>接下来我们来说明一哈上面这张图的一个工作流程。</p><blockquote><p>1、开发人员通过本地 <code>push</code> 代码到 <code>gitlab</code> 上<br>2、<code>gitlab-runner</code> 会根据代码根目录下的 <code>gitlab-ci.yml</code> 文件执行 <code>CI</code>，<code>gitlab-ci.yml</code> 使用说明请移步：<a href="https://docs.gitlab.com/ce/ci/yaml/README.html">gitlab-ci 使用说明</a>。<br>3、在 <code>CI</code> 过程中会去读取你在代码下 <code>Dockerfile</code> 文件构建镜像。<code>docker</code> 的使用我们这里不做过多赘述<br>4、将镜像推送到镜像仓库，可以自建，也可以用像阿里云的仓库<br>5、<code>docker</code> 拉去镜像对服务进行部署。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《诗经・国风・陈风・宛丘》</title>
      <link href="/2016/Shijing-Wanqiu/"/>
      <url>/2016/Shijing-Wanqiu/</url>
      
        <content type="html"><![CDATA[<p>你飘飘荡荡，轻歌曼舞在宛丘之上，是多么令人神往啊。我想着你爱着你，确实有着深深的感情啊，可是只是一厢情愿而没有什么希望啊！</p><p>冬冬冬冬，鼓声响了，那是你在宛丘之下唱歌跳舞。你手持鹭毛伞一年到头歌舞不停，不管是寒冷的冬天还是炎热的盛夏。</p><p>乒乒乓乓，瓦盆响了，那是你在宛丘道上跳舞歌唱。你手持鹭毛伞一年到头歌舞不停，不管是寒冷的冬天还是炎热的盛夏。<br><img src="https://img.jakehu.me/ZGAHXN0ABPkYXwZHNw36.jpeg"><br>子之汤兮，宛丘之上兮。洵有情兮，而无望兮。<br>坎其击鼓，宛丘之下。无冬无夏，值其鹭羽。<br>坎其击缶，宛丘之道。无冬无夏，值其鹭翿。</p><hr><p>既见君子，云胡不喜</p>]]></content>
      
      
      <categories>
          
          <category> 在水一方 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下必不可少的编程字体 Consolas</title>
      <link href="/2015/Ubuntu-Consolas/"/>
      <url>/2015/Ubuntu-Consolas/</url>
      
        <content type="html"><![CDATA[<p>Consolas 是一套等宽的字体，属无衬线字体，由 Lucas de Groot 设计。这个字体使用了微软的 ClearType 字型平滑技术，并随同 Windows Vista、Office 2007 及 Microsoft Visual Studio 中发行，或可在微软的网站下载。</p><p>不说了上面的都是废话，哈哈。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://code.google.com/p/uigroupcode/downloads/list">YaHei.Consolas</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>将上面下载的字体包解压，并按如下操作：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /usr/share/fonts/consolas</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> YaHei.Consolas.1.12.ttf /usr/share/fonts/consolas/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 644 /usr/share/fonts/consolas/YaHei.Consolas.1.12.ttf</span><br><span class="line"><span class="built_in">cd</span> /usr/share/fonts/consolas</span><br><span class="line"><span class="built_in">sudo</span> mkfontscale &amp;&amp; <span class="built_in">sudo</span> mkfontdir &amp;&amp; <span class="built_in">sudo</span> fc-cache -fv</span><br></pre></td></tr></tbody></table></figure><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>在这里再给两款编程常用的字体：(个人爱好罢了)<br>Monaco：<a href="https://github.com/cstrap/monaco-font">https://github.com/cstrap/monaco-font</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -kL https://raw.github.com/cstrap/monaco-font/master/install-font-ubuntu.sh | bash</span><br></pre></td></tr></tbody></table></figure><p>Source Code Pro：<a href="https://github.com/adobe-fonts/source-code-pro">https://github.com/adobe-fonts/source-code-pro</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /usr/share/fonts/adobe-fonts/source-code-pro</span><br><span class="line"><span class="built_in">sudo</span> git <span class="built_in">clone</span> https://github.com/adobe-fonts/source-code-pro.git /usr/share/fonts/adobe-fonts/source-code-pro</span><br><span class="line"><span class="built_in">sudo</span> fc-cache -f -v /usr/share/fonts/adobe-fonts/source-code-pro</span><br></pre></td></tr></tbody></table></figure><hr><p>提笔为青春，人生正当年</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Consolas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下利用 proxychains 高大上的安装 Dropbox</title>
      <link href="/2015/Ubuntu-Dropbox/"/>
      <url>/2015/Ubuntu-Dropbox/</url>
      
        <content type="html"><![CDATA[<p>对 Ubuntu 的折腾也有几年了吧，但是一直都是双系统或是虚拟机，最近将 windows 彻底的抛弃了。<br>接下来说我们今天的主角 Dropbox，一直以来都是利用 Dropbox 进行资料同步。转入 Ubuntu 也不例外，在安装的时候由于 Dropbox 已经被墙了所以想到了走代理。</p><h3 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h3><p>这里也就不多说了，<a href="https://github.com/shadowsocks/shadowsocks-qt5">Shadowsocks-Qt5</a>。</p><h3 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a><a href="https://github.com/rofl0r/proxychains-ng">proxychains</a></h3><p>在使用 3 版本中的时候遇到了一些问题，所以我建议直接使用 4 版本。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git</span><br><span class="line">./configure --prefix=/usr --sysconfdir=/etc</span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"><span class="built_in">sudo</span> make install-config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 socks4 127.0.0.1 9050改为socks5 127.0.0.1 1080</span></span><br><span class="line">vi /usr/local/etc/proxychains.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">proxychains4 telnet google.com 80</span><br></pre></td></tr></tbody></table></figure><h3 id="Dropbox"><a href="#Dropbox" class="headerlink" title="Dropbox"></a>Dropbox</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 dropbox start -i</span><br></pre></td></tr></tbody></table></figure><p>Dropbox 启动后就会自动下载并安装，登录过后可以通过配置选项走代理。</p><h3 id="题外话："><a href="#题外话：" class="headerlink" title="题外话："></a>题外话：</h3><p><a href="http://www.jianshu.com/p/bf05fb3a4709">解决 Ubuntu 下 Sublime Text 3 无法输入中文</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Dropbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mark 在学习和使用 Centos 时那些常用的命令 / 概念</title>
      <link href="/2015/Centos-Command/"/>
      <url>/2015/Centos-Command/</url>
      
        <content type="html"><![CDATA[<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>在安装 minimal 版系统之后 Centos 系统的网卡默认是没有被开启的，我们可以用下面的命令编辑网络配置:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></tbody></table></figure><p>如果使用 DHCP 则需要按以下格式设置：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0</span><br><span class="line">HWADDR=08:00:27:0F:5C:17</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=64ea57af-9329-40c4-90da-bf239cecea4f</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">NM_CONTROLLED=<span class="built_in">yes</span></span><br><span class="line">BOOTPROTO=dhcp</span><br></pre></td></tr></tbody></table></figure><p>如果是固定 IP 则需要按以下格式设置：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0</span><br><span class="line">HWADDR=08:00:27:0F:5C:17</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=64ea57af-9329-40c4-90da-bf239cecea4f</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">NM_CONTROLLED=<span class="built_in">yes</span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.0.2</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.0.1</span><br><span class="line">DNS1=61.128.128.68</span><br><span class="line">DNS2=61.128.128.69</span><br><span class="line">IPV6INIT=no</span><br></pre></td></tr></tbody></table></figure><p>设置完成后需要运行以下命令重启网络服务：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></tbody></table></figure><p>最后可以用以下命令来查看 IP 地址：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="重启-关机命令"><a href="#重启-关机命令" class="headerlink" title="重启/关机命令"></a>重启 / 关机命令</h3><p>重启命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br><span class="line">shutdown -r now <span class="comment">#立刻重启(root用户使用)</span></span><br><span class="line">shutdown -r 10 <span class="comment">#过10分钟自动重启(root用户使用) </span></span><br><span class="line">shutdown -r 23:59 <span class="comment">#在时间为23:59时候重启(root用户使用)</span></span><br><span class="line"><span class="comment">#如果是通过shutdown命令设置重启的话，可以用shutdown -c命令取消重启</span></span><br></pre></td></tr></tbody></table></figure><p>关机命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">halt <span class="comment">#立刻关机</span></span><br><span class="line">poweroff <span class="comment">#立刻关机</span></span><br><span class="line">shutdown -h now <span class="comment">#立刻关机(root用户使用)</span></span><br><span class="line">shutdown -h 10 <span class="comment">#10分钟后自动关机</span></span><br><span class="line"><span class="comment">#如果是通过shutdown命令设置关机的话，可以用shutdown -c命令取消重启</span></span><br></pre></td></tr></tbody></table></figure><h3 id="清理命令"><a href="#清理命令" class="headerlink" title="清理命令"></a>清理命令</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum autoclean</span><br><span class="line"><span class="built_in">sudo</span> yum clean</span><br><span class="line"><span class="built_in">sudo</span> yum autoremove</span><br></pre></td></tr></tbody></table></figure><p>这三个命令主要清理升级缓存以及无用包的。</p><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls 命令</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> [选项] [文件/目录]</span><br><span class="line">   -a 显示所有文件，包括隐藏信息</span><br><span class="line">   -l 显示详细信息</span><br><span class="line">   -d 查看目录属性</span><br><span class="line">   -h 人性化显示文件大小</span><br><span class="line">   -i 显示inode</span><br></pre></td></tr></tbody></table></figure><p>扩展：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls -lh 文件权限解读</span></span><br><span class="line">-rw-r--r--. 1 root root 7.5K 11月  9 15:45 install.log</span><br><span class="line"><span class="comment"># - 文件类型</span></span><br><span class="line"><span class="comment"># rw- 所有者权限</span></span><br><span class="line"><span class="comment"># r-- 所属组权限</span></span><br><span class="line"><span class="comment"># r-- 其他人权限</span></span><br><span class="line"><span class="comment"># . 代表ACL权限</span></span><br><span class="line"><span class="comment"># 1 引用计数</span></span><br><span class="line"><span class="comment"># root 所有者</span></span><br><span class="line"><span class="comment"># root 所有组</span></span><br><span class="line"><span class="comment"># r 读 / w 写 / x 执行</span></span><br></pre></td></tr></tbody></table></figure><h3 id="目录处理命令"><a href="#目录处理命令" class="headerlink" title="目录处理命令"></a>目录处理命令</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立目录</span></span><br><span class="line"><span class="built_in">mkdir</span> [选项] [目录]</span><br><span class="line">      -p 递归处理</span><br><span class="line"><span class="comment"># mkdir -p blog/css</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换目录(tab键可以识别目录补全)</span></span><br><span class="line"><span class="built_in">cd</span> [目录]</span><br><span class="line">   ~  进入用户主目录</span><br><span class="line">   -  进入上次所在目录</span><br><span class="line">   .. 进入上级目录</span><br><span class="line">   .  进入当前目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前所在目录</span></span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></tbody></table></figure><p><strong>未完待续…</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《清平乐・红笺小字》</title>
      <link href="/2015/Yanshu-Hongjianxiaozi/"/>
      <url>/2015/Yanshu-Hongjianxiaozi/</url>
      
        <content type="html"><![CDATA[<p>这是一首念远怀人的爱情词，是晏殊 [艳情] 词的代表作之一。运用 [雁足传书] 和 [鱼传尺素] 的典故，又化用了崔护《题都城南庄》[人面不知何处去，桃花依旧笑春风] 的诗句。</p><img src="https://img.jakehu.me/20151120132820.jpg"><p>红笺小字，说尽平生意。</p><p>鸿雁在云鱼在水，惆怅此情难寄！</p><p>斜阳独倚西楼，遥山恰对帘钩。</p><p>人面不知何处，绿波依旧东流。</p><hr><p>锦书难寄，相思难至</p>]]></content>
      
      
      <categories>
          
          <category> 一人一词 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP Developers and Use Sublime Text,Look here！</title>
      <link href="/2015/Sublime-Text-PHPer/"/>
      <url>/2015/Sublime-Text-PHPer/</url>
      
        <content type="html"><![CDATA[<p>昨天写了一篇介绍 <code>Sublime Text</code> 插件的文章《<a href="http://www.jakehu.me/2015/Sublime-Text-Package/">带你在 Sublime Text 的世界里装逼 and 飞！</a>》，今天我们再来谈一谈一个 PHP 的开发者如何利用 <code>Sublime Text</code> 为自己搭建一个不错的 <code>IDE</code> 环境；话不多说开始吧！</p><p><a href="https://github.com/erichard/SublimePHPCompanion"><strong>Sublime PHP Companion</strong></a><br>这是一个非常棒的插件，但是安装好了之后要小小的设置一哈快捷键。在菜单栏找到下面的快捷键设置文件__Preferences &gt; Key Bindings - User__。快捷键的设置请参考 <a href="https://github.com/erichard/SublimePHPCompanion/blob/master/messages/1.0.0.txt"><strong>PHP Companion Setting</strong></a>。<br>__find_use (F5)__：当你的光标在这个类名上能快速的导入使用的类<br><img src="https://img.jakehu.me/php-companion-use.gif"><br>__expand_fqcn (F6)__：当你的光标在这个类名上能快速的内联使用的类<br><img src="https://img.jakehu.me/php-companion-use-inline.gif"><br>就是这么的牛逼，这么的叼，当然上面只是一个示例，更多的功能自己折腾去吧！</p><span id="more"></span><p><a href="https://github.com/alienhard/SublimeAllAutocomplete"><strong>Sublime AllAutocomplete</strong></a><br>他的功能是自动补全在已打开文件中定义的类，就像下图。这个功能怎么说呢？感觉有点鸡肋，但还是很有用处！<br><img src="https://img.jakehu.me/allautocomplete.gif"></p><p><strong>未完待续…</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime Text </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你在 Sublime Text 的世界里装逼 and 飞！</title>
      <link href="/2015/Sublime-Text-Package/"/>
      <url>/2015/Sublime-Text-Package/</url>
      
        <content type="html"><![CDATA[<p>Sublime Text 是什么，用来干什么就不用我说了哈！</p><p>这货的官网是 <a href="http://www.sublimetext.com/">Sublime Text</a>；然并卵，这不是我们要介绍的重点。介绍哈 Sublime Text 的插件管理 <a href="https://packagecontrol.io/">Package Control</a>,Package Control 是 Sublime Text 的插件管理平台，我想应该是类似于 PHP 的 Composer 吧！好吧，其实我也不知道。哈哈</p><p>看这货就长这熊样：<br><img src="https://img.jakehu.me/20151103141134.png"><br>我们来介绍哈怎么在 Sublime Text 中安装 Package Control，Sublime Text2 和 Sublime Text3 分别有不同的安装方式。</p><p>首先：我们可以在菜单栏__View-&gt;Show Console__打开 Console，或者是__Ctrl+`__打开 Console。</p><span id="more"></span><p>Sublime Text2 请在 Console 中输入以下代码安装 Package Control</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib2,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')</span><br></pre></td></tr></tbody></table></figure><p>Sublime Text3 请在 Console 中输入以下代码安装 Package Control</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)</span><br></pre></td></tr></tbody></table></figure><p>Package Control 就安装好了，至于 Sublime Text 的快捷方式什么的在这里也不说了，因为实在是__太多了__；好吧，我承认其实就是我懒。</p><p>重点介绍哈使用得比较顺手的几个插件，仅仅是我使用得顺手的。Sublime Text 插件太多有待自己的探索。</p><p><strong>Ctrl+Shift+p</strong>(就是因为这个功能爱上了 Sublime Text，太好用了！) 打开控制台，输入并选择 <code>Install Package</code> 然后就可以开始安装插件了！</p><p><strong>Emmet</strong><br>不得不用的一款前端开发方面的插件，Write less , show more. 安装后可直接使用，Tab 键触发，Alt+Shift+W 是个代码机器</p><p><strong>Alignment</strong><br>代码对齐，写几个变量，选中这几行，Ctrl+Alt+A，哇，齐了</p><p><strong>Prefixr</strong><br>写 CSS 可自动添加 -webkit 等私有词缀，Ctrl+Alt+X 触发</p><p><strong>Tag</strong><br>Html 格式化，右键 Auto-Format Tags on Ducument</p><p><strong>JS Format</strong><br>一个 JS 代码格式化插件</p><p><strong>sublimeCodeIntel</strong><br>代码提示插件，支持的语言包括：PHP, Python, RHTML, JavaScript, Smarty, Mason, Node.js, XBL, Tcl, HTML, HTML5, TemplateToolkit, XUL, Django, Perl, Ruby, Python3</p><p><strong>Sublimerge Pro</strong><br>文件对比插件</p><p><strong>MarkdownEditing</strong><br>这个我不想多说，因为此刻我正在用这个插件写这篇文章</p><p><strong>Markdown Preview</strong><br>这玩意儿你只需要轻轻的 <code>Ctrl+B</code> 就能吧.md 文件转换为.html 文件</p><p><strong>Sublime​Linter-php</strong><br>一个支持 lint 语法的插件，ctrl+alt+l 呼出 (与 qq 的锁定冲突，自己去改热键吧) 可以高亮 linter 认为有错误的代码行</p><p><strong>sublime-jsdocs(DocBlockr)</strong><br>自动注释，完全符合 jsdoc 标准，按 /** 即可，再也不用为注释烦恼啦，设置及配置参考<br><a href="https://github.com/spadgos/sublime-jsdocs">https://github.com/spadgos/sublime-jsdocs</a></p><p><strong>Pretty JSON</strong><br>JSON 美化扩展</p><p><strong>Color​Picker</strong><br>跨平台取色器插件</p><p><strong>jQuery</strong><br>用 jquery 的同学不容错过啊，写完后按 tab 键，有惊喜</p><p><strong>Clipboard History</strong><br>剪贴板历史记录，显示更多历史复制，Ctrl+Shift+V 触发</p><p><strong>SideBarEnhancements</strong><br>侧栏右键功能增强，非常实用</p><p><strong>BracketHighlighter</strong><br>Bracket​Highlighter 是一个括号、引号、标签高亮插件，支持 []、()、{}、””、’’和 等，比 Sublime Text 自带的高亮要明显得多</p><p><strong>Theme–Soda</strong><br>完美的编码主题，用过的都说好，Setting user 里面添加”theme”: “Soda Dark.sublime-theme”</p><p><strong>GBK to UTF8</strong><br>将文件编码从 GBK 转黄成 UTF8，菜单 - File 里面找</p><p><strong>SFTP</strong><br>直接编辑 FTP 或 SFTP 服务器上的文件，绝对 FTP 浮云</p><p><strong>WordPress</strong><br>集成一些 WordPress 的函数，对于像我这种经常要写 WP 模版和插件的人特别有用</p><p><strong>PHPTidy</strong><br>整理排版 PHP 代码</p><p><strong>YUI Compressor</strong><br>压缩 JS 和 CSS 文件</p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime Text </tag>
            
            <tag> packagecontrol </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《诗经・国风・郑风・溱洧》</title>
      <link href="/2015/Shijing-Zhenwei/"/>
      <url>/2015/Shijing-Zhenwei/</url>
      
        <content type="html"><![CDATA[<p>溱水流，洧水淌，两条河水哗哗奔流。小伙子和大姑娘，手中兰花散发着芳香。妹说：“咱们一块儿去看热闹吧？” 哥说：“我已经去过一趟了。” 姑娘说：“再陪我去一趟也无妨！” 洧水外，河岸边，地方宽敞，人儿喜洋洋，男女相伴，有说有笑，心花怒放。送支芍药花，以表真挚的情意。<br><img src="https://img.jakehu.me/20151031122000.jpg"><br>溱与洧，方涣涣兮。士与女，方秉蕳兮。女曰观乎？士曰既且。且往观乎？洧之外，洵訏且乐。维士与女，伊其相谑，赠之以勺药。<br>溱与洧，浏其清矣。士与女，殷其盈矣。女曰观乎？士曰既且。且往观乎？洧之外，洵訏且乐。维士与女，伊其将谑，赠之以勺药。</p><hr><p>维士与女，伊其将谑，赠之以勺药。</p>]]></content>
      
      
      <categories>
          
          <category> 在水一方 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>论如何解决在 Windows 下使用 Composer 时出现的这些问题</title>
      <link href="/2015/Windows-Composer-Error/"/>
      <url>/2015/Windows-Composer-Error/</url>
      
        <content type="html"><![CDATA[<h3 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Fatal error: Call to undefined method Composer\Package\CompletePackage::getTrans</span><br><span class="line">portOptions() <span class="keyword">in</span> C:\Users\idiot\AppData\Roaming\Composer\vendor\fxp\composer-ass</span><br><span class="line">et-plugin\Package\AbstractLazyCompletePackage.php on line 184</span><br></pre></td></tr></tbody></table></figure><p>解决办法：<br>下载最新的 composer.phar<br><a href="https://getcomposer.org/download/">https://getcomposer.org/download/</a></p><h3 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Could not fetch https://api.github.com/repos/jquery/jquery, enter your GitHub cr</span><br><span class="line">edentials to go over the API rate <span class="built_in">limit</span></span><br><span class="line">The credentials will be swapped <span class="keyword">for</span> an OAuth token stored <span class="keyword">in</span> C:/Users/idiot/AppD</span><br><span class="line">ata/Roaming/Composer/auth.json, your password will not be stored</span><br><span class="line">To revoke access to this token you can visit https://github.com/settings/applica</span><br><span class="line">tions</span><br><span class="line">Username: </span><br></pre></td></tr></tbody></table></figure><p>解决办法：<br>1、更新 Composer 到最新版本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php composer.phar self-update</span><br></pre></td></tr></tbody></table></figure><p>2、登录到 Github <a href="https://github.com/settings/applications">https://github.com/settings/applications</a> “generated a token” 增加一个新的 Token<br>3、运行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php composer.phar config -g github-oauth.github.com token</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《诗经・小雅・采薇》</title>
      <link href="/2015/Shijing-Caiwei/"/>
      <url>/2015/Shijing-Caiwei/</url>
      
        <content type="html"><![CDATA[<p>寒冬，阴雨霏霏，雪花纷纷，一位解甲退役的征夫在返乡途中踽踽独行。道路崎岖，又饥又渴；但边关渐远，乡关渐近。此刻，他遥望家乡，抚今追昔，不禁思绪纷繁，百感交集。艰苦的军旅生活，激烈的战斗场面，无数次的登高望归情景，一幕幕在眼前重现。《采薇》，就是三千年前这样的一位久戍之卒，在归途中的追忆唱叹之作。<br><img src="https://img.jakehu.me/20151027132526.jpg"><br>采薇采薇，薇亦作止。曰归曰归，岁亦莫止。<br>靡室靡家，𤞤狁之故。不遑启居，𤞤狁之故。<br>采薇采薇，薇亦柔止。曰归曰归，心亦忧止。<br>忧心烈烈，载饥载渴。我戍未定，靡使归聘。<br>采薇采薇，薇亦刚止。曰归曰归，岁亦阳止。<br>王事靡盬，不遑启处。忧心孔疚，我行不来！<br>彼尔维何？维常之华。彼路斯何？君子之车。<br>戎车既驾，四牡业业。岂敢定居？一月三捷。<br>驾彼四牡，四牡骙骙。君子所依，小人所腓。<br>四牡翼翼，象弭鱼服。岂不日戒？𤞤狁孔棘！<br>昔我往矣，杨柳依依。今我来思，雨雪霏霏。<br>行道迟迟，载渴载饥。我心伤悲，莫知我哀！</p><hr><p>我心伤悲，莫知我哀！</p>]]></content>
      
      
      <categories>
          
          <category> 在水一方 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>唉，找不到 Windows 下 Memcached 的 php 扩展还是自己在 Linux 上编译吧！</title>
      <link href="/2015/Linux-install-php-extension/"/>
      <url>/2015/Linux-install-php-extension/</url>
      
        <content type="html"><![CDATA[<p>想在 Windows 上安装个 Memcached 的 php 扩展真是找了好多地方都没找到，Windows 上自己编译起来也非常的麻烦。算了吧还是 Linux 方便，走你：<br><img src="https://img.jakehu.me/20151027125619.jpg"><br>Memcached 扩展需要安装 libmemcached，因为该扩展是依赖 libmemcached 的 API。所以首先我们必须安装 libmemcached：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz</span><br><span class="line">tar zxvf libmemcached-1.0.18.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libmemcached-1.0.18</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><p>安装完成后我们可以发现 libmemcached 被安装在了</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/include/libmemcached</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p>接下来找到 php 中 Memcached 扩展页面 <a href="http://pecl.php.net/package/memcached">http://pecl.php.net/package/memcached</a> 并下载</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://pecl.php.net/get/memcached-2.2.0.tgz</span><br><span class="line">tar xvzf memcached-2.2.0.tgz</span><br><span class="line"><span class="built_in">cd</span> memcached-2.2.0</span><br></pre></td></tr></tbody></table></figure><p>在编译之前我们要确认 php-devel 是否已经安装，如果没有安装请使用 (Centos)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php-devel</span><br></pre></td></tr></tbody></table></figure><p>安装；如果已经安装好接下来我们就可以编译了。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php-5.6.4/bin/php-config --disable-memcached-sasl</span><br><span class="line">make</span><br><span class="line">make <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure><p>然后我们可以在</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/memcached-2.2.0/modules</span><br></pre></td></tr></tbody></table></figure><p>目录下面找到 memcached.so, 我们只需要将 memcached.so 移动到 PHP 环境所在的 ext 文件夹内然后再配置 php.ini 即可<br><strong>注：以上安装过程中出现以下错误可以按下面的解决办法解决</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#configure: error: no, sasl.h is not available. Run configure with --disable-memcached-sasl to disable this check</span></span><br><span class="line"><span class="comment">#如果出现上面错误则运行以下代码</span></span><br><span class="line">yum install cyrus-sasl-devel</span><br></pre></td></tr></tbody></table></figure><p>最后我们用 php 代码进行测试，代码如下：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$m</span> = <span class="keyword">new</span> <span class="title class_">Memcached</span>();</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">'127.0.0.1'</span>,<span class="number">11211</span>));</span><br><span class="line"><span class="variable">$m</span>-&gt;<span class="title function_ invoke__">addServers</span>(<span class="variable">$arr</span>); <span class="comment">//addServers可以同时添加多台服务器</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$m</span>-&gt;<span class="title function_ invoke__">getStats</span>()); <span class="comment">//打印服务器状态</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$m</span>-&gt;<span class="title function_ invoke__">getVersion</span>()); <span class="comment">//打印memcached版本号</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Memcached </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TP-Link 703N 路由器刷 Openwrt+Shadowsocks 实现 OpenWRT 路由器自动翻墙</title>
      <link href="/2015/TP-Link-703N-Openwrt-Shadowsocks/"/>
      <url>/2015/TP-Link-703N-Openwrt-Shadowsocks/</url>
      
        <content type="html"><![CDATA[<p>说明：此篇文章是作者刷机过程中遇到的一些问题和解决方案，其中有自己的也有其他网友提供的一些方案；希望这篇文章能够帮助到大家。</p><h3 id="一、前往Openwrt官网下载703n官方固件，我下载的是最新的版本。"><a href="#一、前往Openwrt官网下载703n官方固件，我下载的是最新的版本。" class="headerlink" title="一、前往Openwrt官网下载703n官方固件，我下载的是最新的版本。"></a>一、前往 Openwrt 官网下载 703n 官方固件，我下载的是最新的版本。</h3><p><a href="http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/">http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/</a></p><h3 id="二、进入原路由器（192-168-1-1）在【系统工具】-【软件升级】中升级刚才在Openwrt官网下载的固件。"><a href="#二、进入原路由器（192-168-1-1）在【系统工具】-【软件升级】中升级刚才在Openwrt官网下载的固件。" class="headerlink" title="二、进入原路由器（192.168.1.1）在【系统工具】->【软件升级】中升级刚才在Openwrt官网下载的固件。"></a>二、进入原路由器（192.168.1.1）在【系统工具】-&gt;【软件升级】中升级刚才在 Openwrt 官网下载的固件。</h3><h4 id="（1）首先用一根网线将703N的Lan口和你电脑相连，电脑上设置为DHCP模式。"><a href="#（1）首先用一根网线将703N的Lan口和你电脑相连，电脑上设置为DHCP模式。" class="headerlink" title="（1）首先用一根网线将703N的Lan口和你电脑相连，电脑上设置为DHCP模式。"></a>（1）首先用一根网线将 703N 的 Lan 口和你电脑相连，电脑上设置为 DHCP 模式。</h4><h4 id="（2）然后运行cmd-exe，输入telnet-192-168-1-1成功后出现OpenWrt的欢迎界面。"><a href="#（2）然后运行cmd-exe，输入telnet-192-168-1-1成功后出现OpenWrt的欢迎界面。" class="headerlink" title="（2）然后运行cmd.exe，输入telnet 192.168.1.1成功后出现OpenWrt的欢迎界面。"></a>（2）然后运行 cmd.exe，输入 telnet 192.168.1.1 成功后出现 OpenWrt 的欢迎界面。</h4><h4 id="（3）输入passwd更改root密码后dropbear-SSH-服务-就运行了，输入exit退出telnet；以后就可以通过ssh管理OpenWrt。"><a href="#（3）输入passwd更改root密码后dropbear-SSH-服务-就运行了，输入exit退出telnet；以后就可以通过ssh管理OpenWrt。" class="headerlink" title="（3）输入passwd更改root密码后dropbear(SSH 服务)就运行了，输入exit退出telnet；以后就可以通过ssh管理OpenWrt。"></a>（3）输入 passwd 更改 root 密码后 dropbear (SSH 服务) 就运行了，输入 exit 退出 telnet；以后就可以通过 ssh 管理 OpenWrt。</h4><p>注：最新版默认已经安装和启用 Luci 管理界面，你可以直接通过访问 192.168.1.1 进入 Luci Web 管理界面。</p><span id="more"></span><p>默认 Luci 管理界面是没有中文的，中文包安装如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install luci-i18n-chinese</span><br></pre></td></tr></tbody></table></figure><p>安装好后可以前往 WEB 界面更改<br><img src="https://img.jakehu.me/62972015.jpg"></p><h3 id="三、因为703N的Flash只有4M，做完上述步骤之后就只有400KB左右了；于是我选择了在703N上面挂在了一个8G的U盘来扩展。"><a href="#三、因为703N的Flash只有4M，做完上述步骤之后就只有400KB左右了；于是我选择了在703N上面挂在了一个8G的U盘来扩展。" class="headerlink" title="三、因为703N的Flash只有4M，做完上述步骤之后就只有400KB左右了；于是我选择了在703N上面挂在了一个8G的U盘来扩展。"></a>三、因为 703N 的 Flash 只有 4M，做完上述步骤之后就只有 400KB 左右了；于是我选择了在 703N 上面挂在了一个 8G 的 U 盘来扩展。</h3><h4 id="（1）在Linux系统下将8G的U盘分为两个区，一个区2G为swap格式作为缓存区用，其他空间为ext4格式。（Linux系统下给U盘分区可以用GParted这款软件）"><a href="#（1）在Linux系统下将8G的U盘分为两个区，一个区2G为swap格式作为缓存区用，其他空间为ext4格式。（Linux系统下给U盘分区可以用GParted这款软件）" class="headerlink" title="（1）在Linux系统下将8G的U盘分为两个区，一个区2G为swap格式作为缓存区用，其他空间为ext4格式。（Linux系统下给U盘分区可以用GParted这款软件）"></a>（1）在 Linux 系统下将 8G 的 U 盘分为两个区，一个区 2G 为 swap 格式作为缓存区用，其他空间为 ext4 格式。（Linux 系统下给 U 盘分区可以用 GParted 这款软件）</h4><h4 id="（2）挂载U盘"><a href="#（2）挂载U盘" class="headerlink" title="（2）挂载U盘"></a>（2）挂载 U 盘</h4><p>安装必须的包</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install kmod-usb-storage block-mount kmod-fs-ext4</span><br></pre></td></tr></tbody></table></figure><p>将 U 盘插上，执行”block info” 命令，看下 U 盘是否已被识别，如下图，其中中 sda1、sda2 为 U 盘分区：<br><img src="https://img.jakehu.me/64175937.jpg"><br>安装完成以后，挂载 u 盘。如下命令将默认的系统盘转移到 u 盘中</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda1 /mnt</span><br><span class="line"><span class="built_in">mkdir</span> /tmp/root</span><br><span class="line">mount -o <span class="built_in">bind</span> / /tmp/root</span><br><span class="line"><span class="built_in">cp</span> /tmp/root/* /mnt -a</span><br><span class="line">umount /tmp/root</span><br></pre></td></tr></tbody></table></figure><p>修改 /etc/config/fstab 文件，让系统启动自动挂载，修改成如下</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config mount</span><br><span class="line">        option target   /overlay</span><br><span class="line">        option device   /dev/sda1</span><br><span class="line">        option fstype   ext4</span><br><span class="line">        option options  rw,<span class="built_in">sync</span></span><br><span class="line">        option enabled  1</span><br><span class="line">        option enabled_fsck 0</span><br></pre></td></tr></tbody></table></figure><p>执行如下命令让其生效</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/fstab <span class="built_in">enable</span></span><br></pre></td></tr></tbody></table></figure><p>设置并激活 swap 分区，修改 fstab 文件，激活</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkswap /dev/sda2</span><br><span class="line">config swap</span><br><span class="line">        option device   /dev/sda2</span><br><span class="line">        option enabled  1</span><br></pre></td></tr></tbody></table></figure><p>重启路由器，再次”df -h” 一下，可以看到路由器的空间已经扩展成功了。<br><img src="https://img.jakehu.me/12133462.jpg"></p><h3 id="四、接下来我们就来安装Shadowsocks，这步已经有网友有成熟案例和教程了。我这里就不多说了，具体请前往："><a href="#四、接下来我们就来安装Shadowsocks，这步已经有网友有成熟案例和教程了。我这里就不多说了，具体请前往：" class="headerlink" title="四、接下来我们就来安装Shadowsocks，这步已经有网友有成熟案例和教程了。我这里就不多说了，具体请前往："></a>四、接下来我们就来安装 Shadowsocks，这步已经有网友有成熟案例和教程了。我这里就不多说了，具体请前往：</h3><p><a href="http://cokebar.info/archives/664">http://cokebar.info/archives/664</a><br>按上面的教程设置好了就只能正常的使用和翻墙了。<br>这里我也秀一张最后的成品<br><img src="https://img.jakehu.me/61677427.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 技术渣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openwrt </tag>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世事无常，荣枯随缘，泰然处之</title>
      <link href="/2015/life-is-changeable/"/>
      <url>/2015/life-is-changeable/</url>
      
        <content type="html"><![CDATA[<p>人生的境遇并没有绝对的好坏之别，佛说：物随心转，境由心造，烦恼皆心生。自性的清明、智慧，才是一切意念的本源。日月经年，世事无常；人生如月，盈亏有间。人生在世，难免有忠奸善恶，是非情仇，得失成败，荣辱浮沉。我们应当不逃避。不强求，一切随缘，任由世事变迁，宠辱皆不惊，以一颗恬然、淡定的心，泰然处之。</p><img src="https://img.jakehu.me/54114822.jpg"><p>从前，山上有座古刹，里面住着师徒四人。一天，师父为考验弟子们的修行功夫，与他们一起来到寺庙前的两棵树前。</p><p>其中一棵尚未到秋天枝干就枯瘪了，叶子也凋零得差不多，恐怕早已病死了。另一棵则郁郁葱葱。深绿的叶子像涂了层蜡似的，在阳光下泛着耀眼的光泽，一副欣欣向荣的样子。</p><p>这时，师父发话了：“你们说说，这两棵树，是枯的好，还是荣的好？”</p><p>大徒弟抢着回答：“荣的好！”</p><p>二徒弟接着说：“枯的好！”</p><p>唯有天资聪颖的小徒弟沉思片刻，望着远方绵亘的山脉，缓缓地说：“枯也随它，荣也随它……”</p><span id="more"></span><p>“春有百花秋有月，夏有凉风冬有雪。若无闲事挂心头，人间处处好时节。” 人生的境遇并没有绝对的好坏之别，而常人眼里之所以有顺逆、褒贬等种种色彩，是缘于内心的染缸。境由心生，一切唯心造。由此可见，自性的清明、智慧，才是一切意念的本源。</p><p>日月经年，世事无常；人生如月，盈亏有间。人生在世，难免有忠奸善恶，是非情仇，得失成败，荣辱浮沉。我们应当不逃避。不强求，一切随缘，任由世事变迁，宠辱皆不惊，以一颗恬然、淡定的心，泰然处之。</p><p>世尊说，一个人如果有觉悟的人生，虽然睡卧草皮，也会觉得快乐。不懂得人生的人，就算跑到天堂去，也活得不开心。如怀有一颗智慧、明朗的心，洞察世事人情，透析宇宙、人生的真理，那么，一切的横逆苦厄都是圆满的，就日日是好日，夜夜是清宵……</p>]]></content>
      
      
      <categories>
          
          <category> 呱唧呱唧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大美青海，大美中国</title>
      <link href="/2015/picture-test/"/>
      <url>/2015/picture-test/</url>
      
        <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://img.jakehu.me/wKgBpVXWf62ABGXtAANDpkzuBvM47.jpeg"></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://img.jakehu.me/wKgBpVXWf6WAKbPFAAGxsP-ZKnQ05.jpeg"></div><div class="group-picture-column"><img src="https://img.jakehu.me/wKgBpVXWf6aAZXJhAAH3gy1Zvms09.jpeg"></div><div class="group-picture-column"><img src="https://img.jakehu.me/wKgBpVXWf6eAe_EYAAH1AzPUNYE07.jpeg"></div></div></div><hr><p>是大山就有高度和坡度，是江河就有宽度和深度，是人就存在不足和错误。</p>]]></content>
      
      
      <categories>
          
          <category> 呱唧呱唧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美图 </tag>
            
            <tag> 青海 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说一说，那些年我们一起自建过的 Git 服务器</title>
      <link href="/2015/Git-on-the-Server/"/>
      <url>/2015/Git-on-the-Server/</url>
      
        <content type="html"><![CDATA[<h3 id="Git服务器端搭建，基于ssh协议"><a href="#Git服务器端搭建，基于ssh协议" class="headerlink" title="Git服务器端搭建，基于ssh协议"></a>Git 服务器端搭建，基于 ssh 协议</h3><h4 id="服务端架设空git-repo"><a href="#服务端架设空git-repo" class="headerlink" title="服务端架设空git repo"></a>服务端架设空 git repo</h4><p>ssh 登录服务器</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">groupadd git <span class="comment">#增加git用户组</span></span><br><span class="line">useradd jakehu -g git <span class="comment">#增加名为jakehu的用户属于git用户组</span></span><br><span class="line"><span class="built_in">ln</span> –s /gitwork /git </span><br><span class="line"><span class="comment">#gitwork为实际工作目录，git为空目录做链接使用，可直接在根目录建立git文件夹即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下造作操作是以直接在根目录下建立git文件夹为前提</span></span><br><span class="line"><span class="built_in">chown</span> jakehu.git /git</span><br><span class="line">su jakehu</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span> /git</span><br><span class="line"><span class="comment">#空库的目录权限设定为 组内读写</span></span><br><span class="line"><span class="comment">#用--shared  git会自动搞定创建起来的文件目录</span></span><br><span class="line"><span class="comment"># shared 参数很重要</span></span><br><span class="line">git init --bare --shared test.git</span><br></pre></td></tr></tbody></table></figure><p>到此为止服务器端架设完成</p><span id="more"></span><h4 id="客户端生成密钥"><a href="#客户端生成密钥" class="headerlink" title="客户端生成密钥"></a>客户端生成密钥</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">ssh-keygen -b 2048 -t rsa <span class="comment">#生成密钥</span></span><br><span class="line"><span class="comment">#windows生成密钥方式不同,可用Pageant生成密钥</span></span><br></pre></td></tr></tbody></table></figure><h4 id="服务器端导入密钥"><a href="#服务器端导入密钥" class="headerlink" title="服务器端导入密钥"></a>服务器端导入密钥</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su jakehu</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line"><span class="built_in">cat</span> id_rsa_jakehu.pub &gt;&gt; authorized_keys</span><br><span class="line"><span class="built_in">chmod</span> 600 authorized_keys</span><br></pre></td></tr></tbody></table></figure><p>最后访问地址: ssh://jakehu@serverIP/git/test.git</p><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>服务器上自动部署</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"><span class="built_in">cd</span> /www/ <span class="comment">#网站目录</span></span><br><span class="line">sh git-deploy.sh</span><br><span class="line"><span class="comment">#https://raw.githubusercontent.com/jakehu/tools/master/git-deploy.sh</span></span><br></pre></td></tr></tbody></table></figure><p>服务器上切换分支测试</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"><span class="built_in">cd</span> /www/web</span><br><span class="line">git checkout dev</span><br><span class="line"><span class="built_in">chown</span> -R www:www /www/web</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好 Hexo，我来了！</title>
      <link href="/2015/hello-hexo/"/>
      <url>/2015/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>13 年开始玩博客，最开始的时候还比较上心每天都去更新一两篇文章；也把自己的做的一些笔记分享在博客上。后来渐渐的也就失去了兴趣了，好吧，其实要把一件事变成一个习惯还是挺难的。再后来我发现 <code>wordpress</code> 越来越慢，把啥子 <code>Google</code> 的一些字体什么的都去掉之后还是很慢。其实也是 <code>wordpress</code> 都已经进行了这么多的迭代，所以我放弃了 <code>wordpress</code> 开始寻找他的代替品。</p><p>在放弃 <code>Wordpress</code> 之后我开始寻找一款极简的博客，我尝试过在 IT 界不少人推荐的 <a href="http://typecho.org/">Typecho</a>，也试过 <code>Github</code> 官方推荐的 <code>jekyll</code>, 直到我看到 <code>Hexo</code>；好吧，我承认我找到了我想要的。</p><p>当然在这里也要感谢 <a href="https://github.com/iissnan/hexo-theme-next">iissnan</a> 为我们带来这么棒棒哒的主题。</p><p>就这样 Hexo 我来了，哈哈！</p><hr><p>广厦千间，夜眠仅需六尺；家财万贯，日食不过三餐。</p>]]></content>
      
      
      <categories>
          
          <category> 呱唧呱唧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
